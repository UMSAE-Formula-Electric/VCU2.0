/*
 * Programmed by Martin Rickey
 *
 * Created November 26th 2017
 *
 * This module implements a hardware watchdog. An RTOS task is used
 * to kick a hardware watchdog every so many milleseconds. If the RTOS
 * scheduler gets messed due to infinite loops or whatever the watchdog
 * will not be kicked and the system will reset.
 */


#ifndef WATCHDOG_H
#define WATCHDOG_H

#include "FreeRTOS.h"
#include "task.h"
#include "stdbool.h"
#include "stdlib.h"

#include "global_board_config.h"

//enum of critical tasks used for kicking watchdog. MAX 24
#ifdef ACB	//critical tasks for each board
enum WD_CRITICALTASK{
	wd_STARTUP_CTask = 0,
	wd_NumCriticalTasks
};
#else//VCU
enum WD_CRITICALTASK{
	wd_APPS_CTask = 0,
	wd_BRAKE_CTASK,
	wd_STARTUP_CTask,
	wd_NumCriticalTasks
};
#endif


uint8_t initIWDG();
void testIWDGReset();
void testIWDGResetting();
bool startFromIWDG();
void wd_criticalTaskKick(enum WD_CRITICALTASK task);


#endif
