
VCU2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800c7e0  0800c7e0  0001c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1e8  0800d1e8  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1e8  0800d1e8  0001d1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f0  0800d1f0  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1f4  0800d1f4  0001d1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800d1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a88  20000150  0800d348  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006bd8  0800d348  00026bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000236fc  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006981  00000000  00000000  000438bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ee8  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174a  00000000  00000000  0004c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b945  00000000  00000000  0004d872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f71  00000000  00000000  000791b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f08fc  00000000  00000000  000a3128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008790  00000000  00000000  00193a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0019c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c7c8 	.word	0x0800c7c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	0800c7c8 	.word	0x0800c7c8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	; 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b970 	b.w	8000d94 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4694      	mov	ip, r2
 8000ae0:	d965      	bls.n	8000bae <__udivmoddi4+0xe2>
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	b143      	cbz	r3, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aec:	f1c3 0220 	rsb	r2, r3, #32
 8000af0:	409f      	lsls	r7, r3
 8000af2:	fa20 f202 	lsr.w	r2, r0, r2
 8000af6:	4317      	orrs	r7, r2
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afe:	fa1f f58c 	uxth.w	r5, ip
 8000b02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b06:	0c22      	lsrs	r2, r4, #16
 8000b08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b10:	fb01 f005 	mul.w	r0, r1, r5
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b18:	eb1c 0202 	adds.w	r2, ip, r2
 8000b1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b20:	f080 811c 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b24:	4290      	cmp	r0, r2
 8000b26:	f240 8119 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b3e:	fb00 f505 	mul.w	r5, r0, r5
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x90>
 8000b46:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b4e:	f080 8107 	bcs.w	8000d60 <__udivmoddi4+0x294>
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	f240 8104 	bls.w	8000d60 <__udivmoddi4+0x294>
 8000b58:	4464      	add	r4, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11e      	cbz	r6, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0xbc>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80ed 	beq.w	8000d56 <__udivmoddi4+0x28a>
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b82:	4608      	mov	r0, r1
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	fab3 f183 	clz	r1, r3
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d149      	bne.n	8000c24 <__udivmoddi4+0x158>
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	d302      	bcc.n	8000b9a <__udivmoddi4+0xce>
 8000b94:	4282      	cmp	r2, r0
 8000b96:	f200 80f8 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000b9a:	1a84      	subs	r4, r0, r2
 8000b9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d0e2      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bac:	e7df      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000bae:	b902      	cbnz	r2, 8000bb2 <__udivmoddi4+0xe6>
 8000bb0:	deff      	udf	#255	; 0xff
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd0:	0c22      	lsrs	r2, r4, #16
 8000bd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bd6:	fb0e f005 	mul.w	r0, lr, r5
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000bde:	eb1c 0202 	adds.w	r2, ip, r2
 8000be2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2b8>
 8000bee:	4645      	mov	r5, r8
 8000bf0:	1a12      	subs	r2, r2, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x14e>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x14c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2c2>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c22:	e79f      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c24:	f1c1 0720 	rsb	r7, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa05 f401 	lsl.w	r4, r5, r1
 8000c36:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3a:	40fd      	lsrs	r5, r7
 8000c3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c40:	4323      	orrs	r3, r4
 8000c42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c4e:	0c1c      	lsrs	r4, r3, #16
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	fb08 f50e 	mul.w	r5, r8, lr
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2b4>
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2b4>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4464      	add	r4, ip
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	b29d      	uxth	r5, r3
 8000c80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c84:	fb09 4413 	mls	r4, r9, r3, r4
 8000c88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2ac>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2ac>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000caa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	42ac      	cmp	r4, r5
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46ae      	mov	lr, r5
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x29c>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x298>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x208>
 8000cbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40ca      	lsrs	r2, r1
 8000ccc:	40cc      	lsrs	r4, r1
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	f1c3 0120 	rsb	r1, r3, #32
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cec:	409d      	lsls	r5, r3
 8000cee:	432a      	orrs	r2, r5
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d06:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x258>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d1c:	428d      	cmp	r5, r1
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1b49      	subs	r1, r1, r5
 8000d26:	b292      	uxth	r2, r2
 8000d28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	fb05 f10e 	mul.w	r1, r5, lr
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x282>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000d46:	4291      	cmp	r1, r2
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000d4a:	3d02      	subs	r5, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a52      	subs	r2, r2, r1
 8000d50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0xfc>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e6e6      	b.n	8000b2e <__udivmoddi4+0x62>
 8000d60:	4610      	mov	r0, r2
 8000d62:	e6fb      	b.n	8000b5c <__udivmoddi4+0x90>
 8000d64:	4548      	cmp	r0, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d74:	4645      	mov	r5, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d78:	462b      	mov	r3, r5
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x258>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d84:	3d02      	subs	r5, #2
 8000d86:	4462      	add	r2, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e70a      	b.n	8000ba4 <__udivmoddi4+0xd8>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x14e>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <set_ACB_State>:
		}
	}
	vTaskDelete(NULL);
}

void set_ACB_State(enum CAR_STATE new_state){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = (uint8_t) new_state;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	73fb      	strb	r3, [r7, #15]
	sendCan(CAN1, &data, 1, CAN_VCU_SET_ACB_STATE_ID, CAN_NO_EXT, CAN_NO_EXT);
 8000da6:	f107 010f 	add.w	r1, r7, #15
 8000daa:	2300      	movs	r3, #0
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2201      	movs	r2, #1
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <set_ACB_State+0x2c>)
 8000db8:	f000 fe54 	bl	8001a64 <sendCan>
	//wait for acknowledge?
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40006400 	.word	0x40006400

08000dc8 <send_ACB_mesg>:

void send_ACB_mesg(enum ACB_TO_CAN_MSG msg){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = (uint8_t)msg;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	73fb      	strb	r3, [r7, #15]
	sendCan(CAN1, &data, 1, CAN_ACU_CAN_ID, CAN_NO_EXT, CAN_NO_EXT);
 8000dd6:	f107 010f 	add.w	r1, r7, #15
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	2300      	movs	r3, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2369      	movs	r3, #105	; 0x69
 8000de4:	2201      	movs	r2, #1
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <send_ACB_mesg+0x2c>)
 8000de8:	f000 fe3c 	bl	8001a64 <sendCan>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40006400 	.word	0x40006400

08000df8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <MX_ADC1_Init+0xf0>)
 8000e0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e10:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e38:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <MX_ADC1_Init+0xf4>)
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e58:	f003 fa4a 	bl	80042f0 <HAL_ADC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f001 ffcd 	bl	8002e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e66:	230a      	movs	r3, #10
 8000e68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e78:	f003 fa7e 	bl	8004378 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e82:	f001 ffbd 	bl	8002e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e86:	2305      	movs	r3, #5
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000e94:	f003 fa70 	bl	8004378 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e9e:	f001 ffaf 	bl	8002e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000eb0:	f003 fa62 	bl	8004378 <HAL_ADC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000eba:	f001 ffa1 	bl	8002e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000ecc:	f003 fa54 	bl	8004378 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ed6:	f001 ff93 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000017c 	.word	0x2000017c
 8000ee8:	40012000 	.word	0x40012000
 8000eec:	0f000001 	.word	0x0f000001

08000ef0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a41      	ldr	r2, [pc, #260]	; (8001014 <HAL_ADC_MspInit+0x124>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d17b      	bne.n	800100a <HAL_ADC_MspInit+0x11a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a3f      	ldr	r2, [pc, #252]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a38      	ldr	r2, [pc, #224]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_ADC_MspInit+0x128>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = APPS1_Pin|BRAKE1_Pin|BPS_Pin;
 8000f66:	2307      	movs	r3, #7
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4828      	ldr	r0, [pc, #160]	; (800101c <HAL_ADC_MspInit+0x12c>)
 8000f7a:	f004 fb51 	bl	8005620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = APPS2_Pin|BRAKE2_Pin|VBATT_Pin;
 8000f7e:	23e0      	movs	r3, #224	; 0xe0
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <HAL_ADC_MspInit+0x130>)
 8000f92:	f004 fb45 	bl	8005620 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_ADC_MspInit+0x138>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fde:	2203      	movs	r2, #3
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8000ff0:	f004 f82c 	bl	800504c <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 8000ffa:	f001 ff01 	bl	8002e00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_ADC_MspInit+0x134>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012000 	.word	0x40012000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000
 8001024:	200001c4 	.word	0x200001c4
 8001028:	40026410 	.word	0x40026410

0800102c <ADC_get_val>:
 *
 * @Brief: This function is used to get a measured ADC value
 * @Param item: The item to get. Should be one of @ADC Vals
 * @Return: returns the most recent conversion of the given value. on failure returns 0
 */
uint16_t ADC_get_val(uint8_t item){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    assert(item < NUM_ADC_CHANNELS);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d905      	bls.n	8001048 <ADC_get_val+0x1c>
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <ADC_get_val+0x3c>)
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <ADC_get_val+0x40>)
 8001040:	21d1      	movs	r1, #209	; 0xd1
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <ADC_get_val+0x44>)
 8001044:	f00a f94a 	bl	800b2dc <__assert_func>

    uint32_t retVal = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]

    if(item < NUM_ADC_CHANNELS){
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d804      	bhi.n	800105c <ADC_get_val+0x30>
        retVal = Sensor_DMABase[item];
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <ADC_get_val+0x48>)
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	60fb      	str	r3, [r7, #12]
    }
    return retVal;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b29b      	uxth	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800c7e0 	.word	0x0800c7e0
 800106c:	0800cf9c 	.word	0x0800cf9c
 8001070:	0800c7f8 	.word	0x0800c7f8
 8001074:	2000016c 	.word	0x2000016c

08001078 <map>:
static uint32_t current_max_power = TR_MAX_POWER; //update based on data from AMS

static pedal_state_t brake; //Brake pedal position sensor / brake sensor
static pedal_state_t apps; //Accelerator pedal position sensor / throttle sensor

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	long outVal = (x - in_min) * (out_max - out_min) / (in_max - in_min)
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	6a39      	ldr	r1, [r7, #32]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	1a8a      	subs	r2, r1, r2
 8001092:	fb03 f202 	mul.w	r2, r3, r2
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1acb      	subs	r3, r1, r3
 800109c:	fb92 f3f3 	sdiv	r3, r2, r3
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
			+ out_min;

	if (x < in_min) {
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	da01      	bge.n	80010b2 <map+0x3a>
		outVal = out_min;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	617b      	str	r3, [r7, #20]
	}

	if (x > in_max) {
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dd01      	ble.n	80010be <map+0x46>
		outVal = out_max;
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	617b      	str	r3, [r7, #20]
	}
	return outVal;
 80010be:	697b      	ldr	r3, [r7, #20]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <StartAppsProcessTask>:
/*
 * updateAPPSVals
 *
 * This is the main task for updating and handling the throttle. This task checks for impossibility of the apps and if the apps is present
 */
void StartAppsProcessTask(void *argument) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
	int16_t mc_apps_val;

	uint16_t apps1 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	82fb      	strh	r3, [r7, #22]
	uint16_t apps2 = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	82bb      	strh	r3, [r7, #20]
	uint16_t brake1 = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	827b      	strh	r3, [r7, #18]
	uint16_t brake2 = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	823b      	strh	r3, [r7, #16]

	//setup apps state
	strcpy(apps.name, "Apps");
 80010e4:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <StartAppsProcessTask+0x24c>)
 80010e6:	4a8d      	ldr	r2, [pc, #564]	; (800131c <StartAppsProcessTask+0x250>)
 80010e8:	6810      	ldr	r0, [r2, #0]
 80010ea:	6018      	str	r0, [r3, #0]
 80010ec:	7912      	ldrb	r2, [r2, #4]
 80010ee:	711a      	strb	r2, [r3, #4]
	apps.possibility = PEDAL_POSSIBLE;
 80010f0:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <StartAppsProcessTask+0x254>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	apps.gone_count = 0;
 80010f6:	4b8a      	ldr	r3, [pc, #552]	; (8001320 <StartAppsProcessTask+0x254>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	805a      	strh	r2, [r3, #2]
	apps.found_Count = 0;
 80010fc:	4b88      	ldr	r3, [pc, #544]	; (8001320 <StartAppsProcessTask+0x254>)
 80010fe:	2200      	movs	r2, #0
 8001100:	809a      	strh	r2, [r3, #4]
	apps.impos_count = 0;
 8001102:	4b87      	ldr	r3, [pc, #540]	; (8001320 <StartAppsProcessTask+0x254>)
 8001104:	2200      	movs	r2, #0
 8001106:	80da      	strh	r2, [r3, #6]
	apps.possible_count = 0;
 8001108:	4b85      	ldr	r3, [pc, #532]	; (8001320 <StartAppsProcessTask+0x254>)
 800110a:	2200      	movs	r2, #0
 800110c:	811a      	strh	r2, [r3, #8]
	apps.impos_limit = (APPS_REQ_FREQ / 10); //100ms limit max (T.6.2.4) //TODO check
 800110e:	4b84      	ldr	r3, [pc, #528]	; (8001320 <StartAppsProcessTask+0x254>)
 8001110:	2214      	movs	r2, #20
 8001112:	815a      	strh	r2, [r3, #10]
	apps.low_min = 180; //133;//
 8001114:	4b82      	ldr	r3, [pc, #520]	; (8001320 <StartAppsProcessTask+0x254>)
 8001116:	22b4      	movs	r2, #180	; 0xb4
 8001118:	819a      	strh	r2, [r3, #12]
	apps.low_max = 839; //
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <StartAppsProcessTask+0x254>)
 800111c:	f240 3247 	movw	r2, #839	; 0x347
 8001120:	81da      	strh	r2, [r3, #14]
	apps.high_min = 130; //34;//
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <StartAppsProcessTask+0x254>)
 8001124:	2282      	movs	r2, #130	; 0x82
 8001126:	821a      	strh	r2, [r3, #16]
	apps.high_max = 1049; //
 8001128:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <StartAppsProcessTask+0x254>)
 800112a:	f240 4219 	movw	r2, #1049	; 0x419
 800112e:	825a      	strh	r2, [r3, #18]
	apps.gain = 1.24;
 8001130:	4b7b      	ldr	r3, [pc, #492]	; (8001320 <StartAppsProcessTask+0x254>)
 8001132:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <StartAppsProcessTask+0x258>)
 8001134:	61da      	str	r2, [r3, #28]
	apps.low_zero = apps.low_min;
 8001136:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <StartAppsProcessTask+0x254>)
 8001138:	899a      	ldrh	r2, [r3, #12]
 800113a:	4b79      	ldr	r3, [pc, #484]	; (8001320 <StartAppsProcessTask+0x254>)
 800113c:	829a      	strh	r2, [r3, #20]
	apps.high_zero = apps.high_min;
 800113e:	4b78      	ldr	r3, [pc, #480]	; (8001320 <StartAppsProcessTask+0x254>)
 8001140:	8a1a      	ldrh	r2, [r3, #16]
 8001142:	4b77      	ldr	r3, [pc, #476]	; (8001320 <StartAppsProcessTask+0x254>)
 8001144:	82da      	strh	r2, [r3, #22]

	for (;;) {
		//low pass filters to increase noise rejection
		apps1 = 0.5 * ADC_get_val(ADC_APPS1) + 0.5 * apps1;
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ff70 	bl	800102c <ADC_get_val>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fb42 	bl	80007d8 <__aeabi_i2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b73      	ldr	r3, [pc, #460]	; (8001328 <StartAppsProcessTask+0x25c>)
 800115a:	f7ff f8c1 	bl	80002e0 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4614      	mov	r4, r2
 8001164:	461d      	mov	r5, r3
 8001166:	8afb      	ldrh	r3, [r7, #22]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fb35 	bl	80007d8 <__aeabi_i2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <StartAppsProcessTask+0x25c>)
 8001174:	f7ff f8b4 	bl	80002e0 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f9de 	bl	8000540 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fc16 	bl	80009bc <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	82fb      	strh	r3, [r7, #22]
		apps2 = 0.5 * ADC_get_val(ADC_APPS2) + 0.5 * apps2;
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff ff49 	bl	800102c <ADC_get_val>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fb1b 	bl	80007d8 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <StartAppsProcessTask+0x25c>)
 80011a8:	f7ff f89a 	bl	80002e0 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	8abb      	ldrh	r3, [r7, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb0e 	bl	80007d8 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <StartAppsProcessTask+0x25c>)
 80011c2:	f7ff f88d 	bl	80002e0 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f9b7 	bl	8000540 <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fbef 	bl	80009bc <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	82bb      	strh	r3, [r7, #20]
		brake1 = ADC_get_val(ADC_BPS);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff ff22 	bl	800102c <ADC_get_val>
 80011e8:	4603      	mov	r3, r0
 80011ea:	827b      	strh	r3, [r7, #18]

		wd_criticalTaskKick(wd_APPS_CTask);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f001 fbfb 	bl	80029e8 <wd_criticalTaskKick>

		if (!detectPedal(apps1, apps2, &apps)) {
 80011f2:	8ab9      	ldrh	r1, [r7, #20]
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <StartAppsProcessTask+0x254>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f8e9 	bl	80033d0 <detectPedal>
 80011fe:	4603      	mov	r3, r0
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00e      	beq.n	8001228 <StartAppsProcessTask+0x15c>
			led_mgmt_set_error(DASH_NO_THROTTLE);
 800120a:	2004      	movs	r0, #4
 800120c:	f000 ff4e 	bl	80020ac <led_mgmt_set_error>
			logIndicator(true, THROTTLE_ERROR);
 8001210:	2104      	movs	r1, #4
 8001212:	2001      	movs	r0, #1
 8001214:	f001 fc6e 	bl	8002af4 <logIndicator>
			if (get_car_state() == READY_TO_DRIVE) {
 8001218:	f000 fe6c 	bl	8001ef4 <get_car_state>
 800121c:	4603      	mov	r3, r0
 800121e:	2b02      	cmp	r3, #2
 8001220:	d191      	bne.n	8001146 <StartAppsProcessTask+0x7a>
				handleImpossiblilty();
 8001222:	f000 f94f 	bl	80014c4 <handleImpossiblilty>
 8001226:	e78e      	b.n	8001146 <StartAppsProcessTask+0x7a>
			}
		} else {
			if (get_car_state() == READY_TO_DRIVE) {
 8001228:	f000 fe64 	bl	8001ef4 <get_car_state>
 800122c:	4603      	mov	r3, r0
 800122e:	2b02      	cmp	r3, #2
 8001230:	d141      	bne.n	80012b6 <StartAppsProcessTask+0x1ea>
				mc_apps_val = map(apps1, 310, 600, 0, MAX_TORQUE_REQUESTABLE);
 8001232:	8af8      	ldrh	r0, [r7, #22]
 8001234:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001240:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001244:	f7ff ff18 	bl	8001078 <map>
 8001248:	4603      	mov	r3, r0
 800124a:	81fb      	strh	r3, [r7, #14]
				if (BYPASS_SAFETY) {
					sendTorqueWithFaultFixing(mc_apps_val);
				} else {
					if (!sensAgreement_990(apps1, apps2, &apps)) {
 800124c:	8ab9      	ldrh	r1, [r7, #20]
 800124e:	8afb      	ldrh	r3, [r7, #22]
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <StartAppsProcessTask+0x254>)
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f940 	bl	80034d8 <sensAgreement_990>
 8001258:	4603      	mov	r3, r0
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <StartAppsProcessTask+0x1a6>
						handleImpossiblilty();
 8001264:	f000 f92e 	bl	80014c4 <handleImpossiblilty>
						logIndicator(true, THROTTLE_ERROR);
 8001268:	2104      	movs	r1, #4
 800126a:	2001      	movs	r0, #1
 800126c:	f001 fc42 	bl	8002af4 <logIndicator>
 8001270:	e04d      	b.n	800130e <StartAppsProcessTask+0x242>
					} else {
						if (BYPASS_BRAKE) {
							sendTorqueWithFaultFixing(mc_apps_val);
						} else {
							if (detectBrake()) {
 8001272:	f000 f93e 	bl	80014f2 <detectBrake>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <StartAppsProcessTask+0x1e2>
								if (twoFootRulePassed(apps1, &apps)) {
 800127c:	8afb      	ldrh	r3, [r7, #22]
 800127e:	4928      	ldr	r1, [pc, #160]	; (8001320 <StartAppsProcessTask+0x254>)
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f86f 	bl	8001364 <twoFootRulePassed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <StartAppsProcessTask+0x1da>
									logIndicator(false, THROTTLE_ERROR);
 800128c:	2104      	movs	r1, #4
 800128e:	2000      	movs	r0, #0
 8001290:	f001 fc30 	bl	8002af4 <logIndicator>
									led_mgmt_clear_error(DASH_NO_THROTTLE);
 8001294:	2004      	movs	r0, #4
 8001296:	f000 ff1b 	bl	80020d0 <led_mgmt_clear_error>
									sendTorqueWithFaultFixing(mc_apps_val);
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f844 	bl	800132c <sendTorqueWithFaultFixing>
 80012a4:	e033      	b.n	800130e <StartAppsProcessTask+0x242>
								} else {
									sendTorqueWithFaultFixing(0);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f840 	bl	800132c <sendTorqueWithFaultFixing>
 80012ac:	e02f      	b.n	800130e <StartAppsProcessTask+0x242>
								}
							} else {
								sendTorqueWithFaultFixing(0);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f83c 	bl	800132c <sendTorqueWithFaultFixing>
 80012b4:	e02b      	b.n	800130e <StartAppsProcessTask+0x242>
							}
						}
					}
				}
			} else {
				sendTorqueWithFaultFixing(0);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f838 	bl	800132c <sendTorqueWithFaultFixing>
				if (detectPedal(apps1, apps2, &apps)) {
 80012bc:	8ab9      	ldrh	r1, [r7, #20]
 80012be:	8afb      	ldrh	r3, [r7, #22]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <StartAppsProcessTask+0x254>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f884 	bl	80033d0 <detectPedal>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d01b      	beq.n	8001306 <StartAppsProcessTask+0x23a>
					if (detectBrake()) {
 80012ce:	f000 f910 	bl	80014f2 <detectBrake>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d011      	beq.n	80012fc <StartAppsProcessTask+0x230>
						if(twoFootRulePassed(apps1, &apps)) {
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	4911      	ldr	r1, [pc, #68]	; (8001320 <StartAppsProcessTask+0x254>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f841 	bl	8001364 <twoFootRulePassed>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <StartAppsProcessTask+0x226>
							logIndicator(false, THROTTLE_ERROR); //all good, just not rtd
 80012e8:	2104      	movs	r1, #4
 80012ea:	2000      	movs	r0, #0
 80012ec:	f001 fc02 	bl	8002af4 <logIndicator>
 80012f0:	e00d      	b.n	800130e <StartAppsProcessTask+0x242>
						} else {
							logIndicator(true, THROTTLE_ERROR); //brake offline
 80012f2:	2104      	movs	r1, #4
 80012f4:	2001      	movs	r0, #1
 80012f6:	f001 fbfd 	bl	8002af4 <logIndicator>
 80012fa:	e008      	b.n	800130e <StartAppsProcessTask+0x242>
						}
					} else {
						logIndicator(true, THROTTLE_ERROR); //two foot fail
 80012fc:	2104      	movs	r1, #4
 80012fe:	2001      	movs	r0, #1
 8001300:	f001 fbf8 	bl	8002af4 <logIndicator>
 8001304:	e003      	b.n	800130e <StartAppsProcessTask+0x242>
					}
				} else {
					logIndicator(true, THROTTLE_ERROR); //pedal sensor doesnt agree
 8001306:	2104      	movs	r1, #4
 8001308:	2001      	movs	r0, #1
 800130a:	f001 fbf3 	bl	8002af4 <logIndicator>
				}
			}
			vTaskDelay(pdMS_TO_TICKS(1000/APPS_REQ_FREQ));
 800130e:	2005      	movs	r0, #5
 8001310:	f007 ff38 	bl	8009184 <vTaskDelay>
		apps1 = 0.5 * ADC_get_val(ADC_APPS1) + 0.5 * apps1;
 8001314:	e717      	b.n	8001146 <StartAppsProcessTask+0x7a>
 8001316:	bf00      	nop
 8001318:	20000271 	.word	0x20000271
 800131c:	0800c80c 	.word	0x0800c80c
 8001320:	20000250 	.word	0x20000250
 8001324:	3f9eb852 	.word	0x3f9eb852
 8001328:	3fe00000 	.word	0x3fe00000

0800132c <sendTorqueWithFaultFixing>:
	}
	vTaskDelete(NULL);
}


void sendTorqueWithFaultFixing(int16_t torque) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
	if (torque < 10) {
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	2b09      	cmp	r3, #9
 800133c:	dc07      	bgt.n	800134e <sendTorqueWithFaultFixing+0x22>
		DisableMC();
 800133e:	f002 f83b 	bl	80033b8 <DisableMC>
		sendTorque(0);
 8001342:	2000      	movs	r0, #0
 8001344:	f001 ff5e 	bl	8003204 <sendTorque>
		fixFaults();
 8001348:	f001 fe28 	bl	8002f9c <fixFaults>
	} else {
		EnableMC();
		sendTorque(torque);
	}
}
 800134c:	e006      	b.n	800135c <sendTorqueWithFaultFixing+0x30>
		EnableMC();
 800134e:	f002 f827 	bl	80033a0 <EnableMC>
		sendTorque(torque);
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 ff54 	bl	8003204 <sendTorque>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <twoFootRulePassed>:

bool twoFootRulePassed(long appsVal, pedal_state_t * pedalState) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	if (pedalState->two_foot_flag == true) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d017      	beq.n	80013a8 <twoFootRulePassed+0x44>
		if (brakePressed()) {
 8001378:	f000 f8ab 	bl	80014d2 <brakePressed>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <twoFootRulePassed+0x26>
			pedalState->twoFootCount = 10;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	220a      	movs	r2, #10
 8001386:	831a      	strh	r2, [r3, #24]
 8001388:	e01d      	b.n	80013c6 <twoFootRulePassed+0x62>
		} else {
			if (appsVal < APPS_TWO_FOOT_RELEASE) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001390:	da06      	bge.n	80013a0 <twoFootRulePassed+0x3c>
				pedalState->twoFootCount--;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	8b1b      	ldrh	r3, [r3, #24]
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	831a      	strh	r2, [r3, #24]
 800139e:	e012      	b.n	80013c6 <twoFootRulePassed+0x62>
			} else {
				pedalState->twoFootCount = 10;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	220a      	movs	r2, #10
 80013a4:	831a      	strh	r2, [r3, #24]
 80013a6:	e00e      	b.n	80013c6 <twoFootRulePassed+0x62>
			}
		}
	} else if (appsVal > APPS_TWO_FOOT_VAL && brakePressed()) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013ae:	dd0a      	ble.n	80013c6 <twoFootRulePassed+0x62>
 80013b0:	f000 f88f 	bl	80014d2 <brakePressed>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <twoFootRulePassed+0x62>
		pedalState->twoFootCount++;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	8b1b      	ldrh	r3, [r3, #24]
 80013be:	3301      	adds	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	831a      	strh	r2, [r3, #24]
	}

	if (pedalState->twoFootCount >= 10) {
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	8b1b      	ldrh	r3, [r3, #24]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	d904      	bls.n	80013d8 <twoFootRulePassed+0x74>
		pedalState->two_foot_flag = true;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]
 80013d6:	e00a      	b.n	80013ee <twoFootRulePassed+0x8a>
	} else if (pedalState->twoFootCount <= 0) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	8b1b      	ldrh	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <twoFootRulePassed+0x8a>
		pedalState->two_foot_flag = false;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]
		pedalState->twoFootCount = 0;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	831a      	strh	r2, [r3, #24]
	}

	if (pedalState->two_foot_flag == false) {
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <twoFootRulePassed+0x9e>
		return true;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <twoFootRulePassed+0xa0>
	} else {
		return false;
 8001402:	2300      	movs	r3, #0
	}
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <StartBrakeProcessTask>:
/*
 * updateBrakeVals
 *
 * This task is used for detecting the plausibility of the brake sensor
 */
void StartBrakeProcessTask(void *argument) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

	uint16_t brake1 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	81fb      	strh	r3, [r7, #14]
	uint16_t brake2 = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	81bb      	strh	r3, [r7, #12]

	//setup apps state
	strcpy(brake.name, "Brake");
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <StartBrakeProcessTask+0xa8>)
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <StartBrakeProcessTask+0xac>)
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	6018      	str	r0, [r3, #0]
 8001424:	8892      	ldrh	r2, [r2, #4]
 8001426:	809a      	strh	r2, [r3, #4]
	brake.possibility = PEDAL_POSSIBLE;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
	brake.gone_count = 0;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	805a      	strh	r2, [r3, #2]
	brake.found_Count = 0;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	809a      	strh	r2, [r3, #4]
	brake.impos_count = 0;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800143c:	2200      	movs	r2, #0
 800143e:	80da      	strh	r2, [r3, #6]
	brake.possible_count = 0;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	811a      	strh	r2, [r3, #8]
	brake.impos_limit = (APPS_REQ_FREQ / 10); //100ms limit max (T.6.3.3)
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001448:	2214      	movs	r2, #20
 800144a:	815a      	strh	r2, [r3, #10]
	brake.low_min = 125;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800144e:	227d      	movs	r2, #125	; 0x7d
 8001450:	819a      	strh	r2, [r3, #12]
	brake.low_max = 330;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001454:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001458:	81da      	strh	r2, [r3, #14]
	brake.high_min = 259;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800145c:	f240 1203 	movw	r2, #259	; 0x103
 8001460:	821a      	strh	r2, [r3, #16]
	brake.high_max = 574;
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001464:	f240 223e 	movw	r2, #574	; 0x23e
 8001468:	825a      	strh	r2, [r3, #18]
	brake.high_zero = brake.high_min;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800146c:	8a1a      	ldrh	r2, [r3, #16]
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001470:	82da      	strh	r2, [r3, #22]
	brake.low_zero = brake.low_min;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001474:	899a      	ldrh	r2, [r3, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <StartBrakeProcessTask+0xb0>)
 8001478:	829a      	strh	r2, [r3, #20]
	brake.gain = 1.74;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <StartBrakeProcessTask+0xb0>)
 800147c:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <StartBrakeProcessTask+0xb4>)
 800147e:	61da      	str	r2, [r3, #28]

	//task infinite loop
	for (;;) {
		//log brake sensors
		logSensor(ADC_get_val(ADC_BPS), BRAKE_1);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fdd3 	bl	800102c <ADC_get_val>
 8001486:	4603      	mov	r3, r0
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	2019      	movs	r0, #25
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	f001 fba9 	bl	8002bec <logSensor>
//		logSensor(ADC_get_val(ADC_BRK2), BRAKE_2);

		brake1 = ADC_get_val(ADC_BPS);
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff fdc6 	bl	800102c <ADC_get_val>
 80014a0:	4603      	mov	r3, r0
 80014a2:	81fb      	strh	r3, [r7, #14]
//		brake2 = ADC_get_val(ADC_BRK2);

		//kick wathcdog to make sure this doesn't hang
		wd_criticalTaskKick(wd_BRAKE_CTASK);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 fa9f 	bl	80029e8 <wd_criticalTaskKick>

		vTaskDelay(pdMS_TO_TICKS(1000/BRAKE_REQ_FREQ));
 80014aa:	200a      	movs	r0, #10
 80014ac:	f007 fe6a 	bl	8009184 <vTaskDelay>
		logSensor(ADC_get_val(ADC_BPS), BRAKE_1);
 80014b0:	e7e6      	b.n	8001480 <StartBrakeProcessTask+0x74>
 80014b2:	bf00      	nop
 80014b4:	20000245 	.word	0x20000245
 80014b8:	0800c814 	.word	0x0800c814
 80014bc:	20000224 	.word	0x20000224
 80014c0:	3fdeb852 	.word	0x3fdeb852

080014c4 <handleImpossiblilty>:

/*
 * This function handles the situation when the throttle is in an impossible state due to be being broken
 *
 */
static void handleImpossiblilty() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	sendTorqueWithFaultFixing(0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff2f 	bl	800132c <sendTorqueWithFaultFixing>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <brakePressed>:
		}
	}
	return is_pressed;
}

bool brakePressed() {
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
	if (ADC_get_val(ADC_BPS) > 950) {
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff fda8 	bl	800102c <ADC_get_val>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	f240 33b6 	movw	r3, #950	; 0x3b6
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d901      	bls.n	80014ec <brakePressed+0x1a>
		return true;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <brakePressed+0x1c>
	} else {
		return false;
 80014ec:	2300      	movs	r3, #0
	}
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <detectBrake>:

bool detectBrake() {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
	long brakeVal = ADC_get_val(ADC_BPS);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff fd97 	bl	800102c <ADC_get_val>
 80014fe:	4603      	mov	r3, r0
 8001500:	607b      	str	r3, [r7, #4]

	if (brakeVal > 1300 || brakeVal < 600) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f240 5214 	movw	r2, #1300	; 0x514
 8001508:	4293      	cmp	r3, r2
 800150a:	dc03      	bgt.n	8001514 <detectBrake+0x22>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001512:	da01      	bge.n	8001518 <detectBrake+0x26>
		return false;
 8001514:	2300      	movs	r3, #0
 8001516:	e000      	b.n	800151a <detectBrake+0x28>
	} else {
		return true;
 8001518:	2301      	movs	r3, #1
	}
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <btInitialize>:
/**
 * btInitialize()
 *
 * 		Initializes the packet and starts the Bluetooth task
 */
bool btInitialize() {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	//Check if BT has already been initialized
	if(!BT_INITIALIZED) {
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <btInitialize+0x38>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00f      	beq.n	8001556 <btInitialize+0x32>
        initPacket();
 8001536:	f000 f8f5 	bl	8001724 <initPacket>
        //Create the mutex
        packetMutex = xSemaphoreCreateMutex();
 800153a:	2001      	movs	r0, #1
 800153c:	f006 ff45 	bl	80083ca <xQueueCreateMutex>
 8001540:	4603      	mov	r3, r0
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <btInitialize+0x3c>)
 8001544:	6013      	str	r3, [r2, #0]
        //Set the init flag and error state
        BT_ERROR_STATE = 0x00;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <btInitialize+0x40>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
        BT_INITIALIZED = true;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <btInitialize+0x38>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
        return true;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <btInitialize+0x34>
	}
	return false;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000027c 	.word	0x2000027c
 8001560:	20000c00 	.word	0x20000c00
 8001564:	2000027d 	.word	0x2000027d

08001568 <btSendPacket>:
/**
 * btSendPacket()
 *
 * 		Builds and sends the packet via USART
 */
void btSendPacket() {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	if(BT_INITIALIZED && BT_ERROR_STATE == 0x00) {
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <btSendPacket+0x40>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d017      	beq.n	80015a4 <btSendPacket+0x3c>
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <btSendPacket+0x44>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d113      	bne.n	80015a4 <btSendPacket+0x3c>
		//Try to take the semaphore to update the packet memory location
		if(xSemaphoreTake(packetMutex, BT_MUTEX_TIMEOUT) == pdPASS) {
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <btSendPacket+0x48>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <btSendPacket+0x4c>)
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f007 f9b2 	bl	80088f0 <xQueueSemaphoreTake>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <btSendPacket+0x3c>
			updateSequence();
 8001592:	f000 f989 	bl	80018a8 <updateSequence>
            //TODO Bluetooth
//			usartBTSend((char*)&packet);
			xSemaphoreGive(packetMutex);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <btSendPacket+0x48>)
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	f006 ff2c 	bl	80083fc <xQueueGenericSend>
		}
	}
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000027c 	.word	0x2000027c
 80015ac:	2000027d 	.word	0x2000027d
 80015b0:	20000c00 	.word	0x20000c00
 80015b4:	20000008 	.word	0x20000008

080015b8 <btUpdateData>:
/**
 * btUpdateData()
 *
 * 		Updates an individual data member's value
 */
bool btUpdateData(void *value, SENSOR name) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
	//Try to take the semaphore to update the packet memory location
	if( 1){//xSemaphoreTake(packetMutex, BT_MUTEX_TIMEOUT) == pdPASS) {
		int size = 51; //I thibk //used to be 11
 80015c4:	2333      	movs	r3, #51	; 0x33
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
		//Convert packet type back to an integer
		int packet_type = packet.data[name].type[0] - '0';
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	494e      	ldr	r1, [pc, #312]	; (8001704 <btUpdateData+0x14c>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	330d      	adds	r3, #13
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3b30      	subs	r3, #48	; 0x30
 80015dc:	643b      	str	r3, [r7, #64]	; 0x40
		//Char array for storing final value
		char value_buff[55] = {0};  // usually 15
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2233      	movs	r2, #51	; 0x33
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00a f90f 	bl	800b80e <memset>
		//Convert value to char depending on type using sprintf, place in value_buff
		if(packet_type == BT_DT_BYTE) {
 80015f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <btUpdateData+0x50>
			snprintf(value_buff, size, "%10c",*((char *)value));
 80015f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f107 0008 	add.w	r0, r7, #8
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <btUpdateData+0x150>)
 8001602:	f00a f86d 	bl	800b6e0 <sniprintf>
 8001606:	e068      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_SHORT) {
 8001608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160a:	2b01      	cmp	r3, #1
 800160c:	d109      	bne.n	8001622 <btUpdateData+0x6a>
			snprintf(value_buff, size, "%010hi", *((short *)value));
 800160e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	f107 0008 	add.w	r0, r7, #8
 800161a:	4a3c      	ldr	r2, [pc, #240]	; (800170c <btUpdateData+0x154>)
 800161c:	f00a f860 	bl	800b6e0 <sniprintf>
 8001620:	e05b      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_INT) {
 8001622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001624:	2b02      	cmp	r3, #2
 8001626:	d108      	bne.n	800163a <btUpdateData+0x82>
			snprintf(value_buff, size, "%010d", *((int *)value));
 8001628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f107 0008 	add.w	r0, r7, #8
 8001632:	4a37      	ldr	r2, [pc, #220]	; (8001710 <btUpdateData+0x158>)
 8001634:	f00a f854 	bl	800b6e0 <sniprintf>
 8001638:	e04f      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_LONG) {
 800163a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800163c:	2b03      	cmp	r3, #3
 800163e:	d108      	bne.n	8001652 <btUpdateData+0x9a>
			snprintf(value_buff, size, "%010li", *((long *)value));
 8001640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f107 0008 	add.w	r0, r7, #8
 800164a:	4a32      	ldr	r2, [pc, #200]	; (8001714 <btUpdateData+0x15c>)
 800164c:	f00a f848 	bl	800b6e0 <sniprintf>
 8001650:	e043      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_FLOAT) {
 8001652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001654:	2b04      	cmp	r3, #4
 8001656:	d10d      	bne.n	8001674 <btUpdateData+0xbc>
			snprintf(value_buff, size, "%010li", (uint32_t)*((float *)value));
 8001658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	f107 0008 	add.w	r0, r7, #8
 8001668:	ee17 3a90 	vmov	r3, s15
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <btUpdateData+0x15c>)
 800166e:	f00a f837 	bl	800b6e0 <sniprintf>
 8001672:	e032      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_DOUBLE) {
 8001674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001676:	2b05      	cmp	r3, #5
 8001678:	d10b      	bne.n	8001692 <btUpdateData+0xda>
			snprintf(value_buff, size, "%010f", *((double *)value));
 800167a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f107 0008 	add.w	r0, r7, #8
 8001686:	e9cd 2300 	strd	r2, r3, [sp]
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <btUpdateData+0x160>)
 800168c:	f00a f828 	bl	800b6e0 <sniprintf>
 8001690:	e023      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_CHAR) {
 8001692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001694:	2b06      	cmp	r3, #6
 8001696:	d103      	bne.n	80016a0 <btUpdateData+0xe8>
			value_buff[0] = *((char *)value);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	723b      	strb	r3, [r7, #8]
 800169e:	e01c      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_STRING) {
 80016a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d107      	bne.n	80016b6 <btUpdateData+0xfe>
			snprintf(value_buff, size, "%10s", (char *)value);
 80016a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80016a8:	f107 0008 	add.w	r0, r7, #8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <btUpdateData+0x164>)
 80016b0:	f00a f816 	bl	800b6e0 <sniprintf>
 80016b4:	e011      	b.n	80016da <btUpdateData+0x122>
		} else if(packet_type == BT_DT_BOOLEAN) {
 80016b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d109      	bne.n	80016d0 <btUpdateData+0x118>
			//Checks if value is true, and sets value accordingly
			if(*((bool *)value)) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <btUpdateData+0x112>
				value_buff[0] = (char)BT_VALUE_TRUE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	723b      	strb	r3, [r7, #8]
 80016c8:	e007      	b.n	80016da <btUpdateData+0x122>
			} else {
				value_buff[0] = (char)BT_VALUE_FALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	723b      	strb	r3, [r7, #8]
 80016ce:	e004      	b.n	80016da <btUpdateData+0x122>
			}
		} else {
			//Somehow has an invalid datatype, set the error state and return
			BT_ERROR_STATE = 0x02;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <btUpdateData+0x168>)
 80016d2:	2202      	movs	r2, #2
 80016d4:	701a      	strb	r2, [r3, #0]
			return false;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e00f      	b.n	80016fa <btUpdateData+0x142>
		}
		//Copies the computed character array back into the packet and returns
		memcpy(packet.data[name].value,value_buff,sizeof(packet.data[name].value));
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	3308      	adds	r3, #8
 80016e6:	4a07      	ldr	r2, [pc, #28]	; (8001704 <btUpdateData+0x14c>)
 80016e8:	4413      	add	r3, r2
 80016ea:	3308      	adds	r3, #8
 80016ec:	f107 0108 	add.w	r1, r7, #8
 80016f0:	2232      	movs	r2, #50	; 0x32
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00a f97c 	bl	800b9f0 <memcpy>
		//xSemaphoreGive(packetMutex);
	}
	return true;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3748      	adds	r7, #72	; 0x48
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000280 	.word	0x20000280
 8001708:	0800c8c8 	.word	0x0800c8c8
 800170c:	0800c8d0 	.word	0x0800c8d0
 8001710:	0800c8d8 	.word	0x0800c8d8
 8001714:	0800c8e0 	.word	0x0800c8e0
 8001718:	0800c8e8 	.word	0x0800c8e8
 800171c:	0800c8f0 	.word	0x0800c8f0
 8001720:	2000027d 	.word	0x2000027d

08001724 <initPacket>:
/**
 * initPacket()
 * 
 * 		Initializes the packet structure
 */
static void initPacket() {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
	//Build/set the other packet structure parts
	buildPacket();
 800172a:	f000 f861 	bl	80017f0 <buildPacket>
	//Build the data entries part of the packet
	for(int i=0; i<(NUM_OF_SENSORS+NUM_OF_INDICATORS); i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e04b      	b.n	80017cc <initPacket+0xa8>
		//Mem copies the ID into struct
		memcpy(packet.data[i].id,data_ids_bt[i],sizeof(packet.data[i].id));
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	3308      	adds	r3, #8
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <initPacket+0xb8>)
 8001742:	4413      	add	r3, r2
 8001744:	1c98      	adds	r0, r3, #2
 8001746:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <initPacket+0xbc>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	2203      	movs	r2, #3
 8001750:	4619      	mov	r1, r3
 8001752:	f00a f94d 	bl	800b9f0 <memcpy>

		//Fetches type from array, converts to string, mem copies the type into struct
		char type_buff[sizeof(packet.data[i].type)+1];
		itoa(data_types_bt[i],type_buff,10);
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <initPacket+0xc0>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	220a      	movs	r2, #10
 8001766:	4619      	mov	r1, r3
 8001768:	f009 fdee 	bl	800b348 <itoa>
		memcpy(packet.data[i].type,type_buff,sizeof(packet.data[i].type));
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	3308      	adds	r3, #8
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <initPacket+0xb8>)
 800177a:	4413      	add	r3, r2
 800177c:	3305      	adds	r3, #5
 800177e:	7a3a      	ldrb	r2, [r7, #8]
 8001780:	701a      	strb	r2, [r3, #0]

		//Fetches scalar from array, converts to string, mem copies the scalar into struct
		char scalar_buff[sizeof(packet.data[i].scalar)+1];
		sprintf(scalar_buff, "%02d",data_scalars_bt[i]);
 8001782:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <initPacket+0xc4>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4917      	ldr	r1, [pc, #92]	; (80017ec <initPacket+0xc8>)
 800178e:	4618      	mov	r0, r3
 8001790:	f009 ffda 	bl	800b748 <siprintf>
		memcpy(packet.data[i].scalar,scalar_buff,sizeof(packet.data[i].scalar));
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	3308      	adds	r3, #8
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <initPacket+0xb8>)
 80017a2:	4413      	add	r3, r2
 80017a4:	3306      	adds	r3, #6
 80017a6:	88ba      	ldrh	r2, [r7, #4]
 80017a8:	801a      	strh	r2, [r3, #0]

		//Set the value to zero
		memset(packet.data[i].value,'\0',sizeof(packet.data[i].value));
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	3308      	adds	r3, #8
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <initPacket+0xb8>)
 80017b8:	4413      	add	r3, r2
 80017ba:	3308      	adds	r3, #8
 80017bc:	2232      	movs	r2, #50	; 0x32
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00a f824 	bl	800b80e <memset>
	for(int i=0; i<(NUM_OF_SENSORS+NUM_OF_INDICATORS); i++) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b2a      	cmp	r3, #42	; 0x2a
 80017d0:	ddb0      	ble.n	8001734 <initPacket+0x10>
	}
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000280 	.word	0x20000280
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	200000b8 	.word	0x200000b8
 80017e8:	20000c04 	.word	0x20000c04
 80017ec:	0800c8f8 	.word	0x0800c8f8

080017f0 <buildPacket>:
/**
 * buildPacket()
 *
 * 		Builds the base packet to send
 */
static void buildPacket() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	//Set individual sections of the packet
	setStartFlag();
 80017f4:	f000 f80e 	bl	8001814 <setStartFlag>
	setAcknowledgement();
 80017f8:	f000 f818 	bl	800182c <setAcknowledgement>
	setHeader();
 80017fc:	f000 f822 	bl	8001844 <setHeader>
	setExpansion();
 8001800:	f000 f82c 	bl	800185c <setExpansion>
	setChecksum();
 8001804:	f000 f836 	bl	8001874 <setChecksum>
	setEndFlag();
 8001808:	f000 f840 	bl	800188c <setEndFlag>
	updateSequence();
 800180c:	f000 f84c 	bl	80018a8 <updateSequence>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <setStartFlag>:
/**
 * setStartFlag()
 *
 * 		Sets the start flag in the packet struct
 */
static void setStartFlag() {
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	packet.start = BT_START_FLAG;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <setStartFlag+0x14>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000280 	.word	0x20000280

0800182c <setAcknowledgement>:
/**
 * setAcknowledgement()
 *
 * 		Sets the acknowledgment in the packet struct
 */
static void setAcknowledgement() {
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <setAcknowledgement+0x14>)
 8001832:	2200      	movs	r2, #0
 8001834:	715a      	strb	r2, [r3, #5]
	memset(packet.ack,'\0',sizeof(packet.ack));
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000280 	.word	0x20000280

08001844 <setHeader>:
/**
 * setHeader()
 *
 * 		Sets the header in the packet struct
 */
static void setHeader() {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	memset(packet.header,'\0',sizeof(packet.header));
 8001848:	2204      	movs	r2, #4
 800184a:	2100      	movs	r1, #0
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <setHeader+0x14>)
 800184e:	f009 ffde 	bl	800b80e <memset>
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000286 	.word	0x20000286

0800185c <setExpansion>:
/**
 * setExpansion()
 *
 * 		Sets the expansion in the packet struct
 */
static void setExpansion() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	memset(packet.expan,'\0',sizeof(packet.expan));
 8001860:	2205      	movs	r2, #5
 8001862:	2100      	movs	r1, #0
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <setExpansion+0x14>)
 8001866:	f009 ffd2 	bl	800b80e <memset>
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000bf2 	.word	0x20000bf2

08001874 <setChecksum>:
/**
 * setChecksum()
 *
 * 		Sets the checksum in the packet struct
 */
static void setChecksum() {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	memset(packet.checksum,'\0',sizeof(packet.checksum));
 8001878:	2205      	movs	r2, #5
 800187a:	2100      	movs	r1, #0
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <setChecksum+0x14>)
 800187e:	f009 ffc6 	bl	800b80e <memset>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000bf7 	.word	0x20000bf7

0800188c <setEndFlag>:
/**
 * setEndFlag()
 *
 * 		Sets the end flag in the packet struct
 */
static void setEndFlag() {
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	packet.end = BT_END_FLAG;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <setEndFlag+0x18>)
 8001892:	2217      	movs	r2, #23
 8001894:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000280 	.word	0x20000280

080018a8 <updateSequence>:
 *
 * 		Updates the static 4-byte character buffer
 * 		Overflows at 10000, modulo back to 0
 * 		Stores the current sequence value in the packet structure
 */
static void updateSequence() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	//Increment the current sequence value
	curr_sequence++;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <updateSequence+0x54>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <updateSequence+0x54>)
 80018b8:	801a      	strh	r2, [r3, #0]
	curr_sequence = curr_sequence%10000;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <updateSequence+0x54>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <updateSequence+0x58>)
 80018c0:	fba2 1203 	umull	r1, r2, r2, r3
 80018c4:	0b52      	lsrs	r2, r2, #13
 80018c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80018ca:	fb01 f202 	mul.w	r2, r1, r2
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <updateSequence+0x54>)
 80018d4:	801a      	strh	r2, [r3, #0]
	//Fill temporary buffer of FIVE bytes
	char seq_buff[sizeof(packet.sequence)+1];
	sprintf(seq_buff, "%04d", curr_sequence);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <updateSequence+0x54>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	463b      	mov	r3, r7
 80018de:	4909      	ldr	r1, [pc, #36]	; (8001904 <updateSequence+0x5c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f009 ff31 	bl	800b748 <siprintf>
	//Copy first FOUR bytes (no null terminator) back to packet structure
	strncpy(packet.sequence,seq_buff,4); 
 80018e6:	463b      	mov	r3, r7
 80018e8:	2204      	movs	r2, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <updateSequence+0x60>)
 80018ee:	f009 ff96 	bl	800b81e <strncpy>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000027e 	.word	0x2000027e
 8001900:	d1b71759 	.word	0xd1b71759
 8001904:	0800c900 	.word	0x0800c900
 8001908:	20000281 	.word	0x20000281

0800190c <StartBluetoothDumpTask>:
 *
 *		btDumpingTask(void *pvParameters): Timed task to dump the packet to the Bluetooth USART channel
 */


void StartBluetoothDumpTask(void *argument) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	for(;;) {
		//Dump, Wait
		btSendPacket();
 8001914:	f7ff fe28 	bl	8001568 <btSendPacket>
		logSensor((float)0 -1,MC_ACUAL_SPEED_REG_LOG);
 8001918:	2003      	movs	r0, #3
 800191a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800191e:	f001 f965 	bl	8002bec <logSensor>
		logSensor(mc_getBusCurrent(),MC_I_ACTUAL_LOG);
 8001922:	f001 fac3 	bl	8002eac <mc_getBusCurrent>
 8001926:	eef0 7a40 	vmov.f32	s15, s0
 800192a:	200d      	movs	r0, #13
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	f001 f95c 	bl	8002bec <logSensor>
		logSensor((float)0,MC_BUS_VOLTAGE_LOG);
 8001934:	2015      	movs	r0, #21
 8001936:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001960 <StartBluetoothDumpTask+0x54>
 800193a:	f001 f957 	bl	8002bec <logSensor>

		if(get_car_state() == READY_TO_DRIVE) {
 800193e:	f000 fad9 	bl	8001ef4 <get_car_state>
 8001942:	4603      	mov	r3, r0
 8001944:	2b02      	cmp	r3, #2
 8001946:	d105      	bne.n	8001954 <StartBluetoothDumpTask+0x48>
			vTaskDelay(BT_DUMP_DELAY);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <StartBluetoothDumpTask+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f007 fc19 	bl	8009184 <vTaskDelay>
 8001952:	e7df      	b.n	8001914 <StartBluetoothDumpTask+0x8>
		} else {
			vTaskDelay(LONG_BT_DUMP_DELAY);
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <StartBluetoothDumpTask+0x5c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fc13 	bl	8009184 <vTaskDelay>
		btSendPacket();
 800195e:	e7d9      	b.n	8001914 <StartBluetoothDumpTask+0x8>
 8001960:	00000000 	.word	0x00000000
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_CAN1_Init+0x60>)
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <MX_CAN1_Init+0x64>)
 8001974:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_CAN1_Init+0x60>)
 8001978:	2210      	movs	r2, #16
 800197a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_CAN1_Init+0x60>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_CAN1_Init+0x60>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_CAN1_Init+0x60>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_CAN1_Init+0x60>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_CAN1_Init+0x60>)
 8001996:	2200      	movs	r2, #0
 8001998:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_CAN1_Init+0x60>)
 800199c:	2200      	movs	r2, #0
 800199e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_CAN1_Init+0x60>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_CAN1_Init+0x60>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <MX_CAN1_Init+0x60>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_CAN1_Init+0x60>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_CAN1_Init+0x60>)
 80019ba:	f002 ff0b 	bl	80047d4 <HAL_CAN_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80019c4:	f001 fa1c 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000cf8 	.word	0x20000cf8
 80019d0:	40006400 	.word	0x40006400

080019d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12c      	bne.n	8001a50 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_CAN_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a40:	2309      	movs	r3, #9
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_CAN_MspInit+0x8c>)
 8001a4c:	f003 fde8 	bl	8005620 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40006400 	.word	0x40006400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <sendCan>:
  * @param 	dest: destination ID ??? Austin sucks, don't understand CAN at all
  * @param	isRTR: is request for transmission, 1 for request, 0 for data
  * @param	isExtended: is the ID and extended address, 0 for standard, 1 for extended
  * @retval 0 on success, 1 if timeout, 2 CANx not init, 3 length too long
  */
uint8_t sendCan(CAN_TypeDef* CANx, uint8_t const * data, int32_t length, uint32_t dest, uint8_t isRTR, uint8_t isExtended){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
    uint8_t sendSuccess = 0x0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

    //check the length of the data
    if(length > 8){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	dd03      	ble.n	8001a84 <sendCan+0x20>
        sendSuccess = 0x3;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	75fb      	strb	r3, [r7, #23]
        return sendSuccess;
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	e064      	b.n	8001b4e <sendCan+0xea>
    }
    //check type of message to send
    if(isRTR){
 8001a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <sendCan+0x30>
        TxHeader.RTR = CAN_RTR_REMOTE;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <sendCan+0xf4>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	e002      	b.n	8001a9a <sendCan+0x36>
    }
    else{
        TxHeader.RTR = CAN_RTR_DATA;
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <sendCan+0xf4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    }
    if(isExtended){
 8001a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <sendCan+0x4c>
        TxHeader.IDE = CAN_ID_EXT;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <sendCan+0xf4>)
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	609a      	str	r2, [r3, #8]
        TxHeader.ExtId = dest;
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <sendCan+0xf4>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6053      	str	r3, [r2, #4]
 8001aae:	e005      	b.n	8001abc <sendCan+0x58>
    }
    else{
        TxHeader.IDE = CAN_ID_STD;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <sendCan+0xf4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
        TxHeader.StdId = dest;
 8001ab6:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <sendCan+0xf4>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6013      	str	r3, [r2, #0]
    }
    //copy data
    for(int i = 0; i < length; i++){
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e00b      	b.n	8001ada <sendCan+0x76>
        TxData[i] = data[i];
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	7819      	ldrb	r1, [r3, #0]
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <sendCan+0xf8>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < length; i++){
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbef      	blt.n	8001ac2 <sendCan+0x5e>
    }
    TxHeader.DLC = length;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <sendCan+0xf4>)
 8001ae6:	6113      	str	r3, [r2, #16]

    //send the can message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <sendCan+0xfc>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <sendCan+0xf8>)
 8001aec:	491a      	ldr	r1, [pc, #104]	; (8001b58 <sendCan+0xf4>)
 8001aee:	481d      	ldr	r0, [pc, #116]	; (8001b64 <sendCan+0x100>)
 8001af0:	f002 ffaf 	bl	8004a52 <HAL_CAN_AddTxMessage>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d013      	beq.n	8001b22 <sendCan+0xbe>
        strncpy((char *) TxData, "VCU couldn't send a message to the CAN Bus.\r\n", sizeof(TxData) - 1);
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <sendCan+0xf8>)
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <sendCan+0x104>)
 8001afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b02:	6018      	str	r0, [r3, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	8019      	strh	r1, [r3, #0]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	0c0a      	lsrs	r2, r1, #16
 8001b0c:	701a      	strb	r2, [r3, #0]
        HAL_USART_Transmit(&husart2, data, length+1, 10);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	230a      	movs	r3, #10
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <sendCan+0x108>)
 8001b1c:	f005 fb78 	bl	8007210 <HAL_USART_Transmit>
 8001b20:	e014      	b.n	8001b4c <sendCan+0xe8>
    }
    else {
        strncpy((char *) TxData, "VCU sent a message to the CAN Bus.\r\n", sizeof(TxData) - 1);
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <sendCan+0xf8>)
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <sendCan+0x10c>)
 8001b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2a:	6018      	str	r0, [r3, #0]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	8019      	strh	r1, [r3, #0]
 8001b30:	3302      	adds	r3, #2
 8001b32:	0c0a      	lsrs	r2, r1, #16
 8001b34:	701a      	strb	r2, [r3, #0]
        HAL_USART_Transmit(&husart2,  data, length+1, 10);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	230a      	movs	r3, #10
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <sendCan+0x108>)
 8001b44:	f005 fb64 	bl	8007210 <HAL_USART_Transmit>
        sendSuccess = 0x1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	75fb      	strb	r3, [r7, #23]
    }

    return sendSuccess;
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000cd4 	.word	0x20000cd4
 8001b5c:	20000cec 	.word	0x20000cec
 8001b60:	20000cf4 	.word	0x20000cf4
 8001b64:	20000cf8 	.word	0x20000cf8
 8001b68:	0800c908 	.word	0x0800c908
 8001b6c:	20000e28 	.word	0x20000e28
 8001b70:	0800c938 	.word	0x0800c938

08001b74 <nullTerminate>:

void nullTerminate(char *str) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    size_t length = strlen(str);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7fe fb51 	bl	8000224 <strlen>
 8001b82:	60f8      	str	r0, [r7, #12]
    uint8_t isNullTerminated = str[length - 1] != '\0';
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	72fb      	strb	r3, [r7, #11]
    if (isNullTerminated == 0) {
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <nullTerminate+0x36>
        str[length] = '\0';
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    }
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <messageReceivedFromControlUnit>:

void messageReceivedFromControlUnit(const char *unitType) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    char canMsg[50];
    if (strcmp(unitType, "VCU") == 0) strncpy(canMsg, "VCU received a CAN message from the VCU.\r\n", sizeof(canMsg) - 1);
 8001bbc:	492d      	ldr	r1, [pc, #180]	; (8001c74 <messageReceivedFromControlUnit+0xc0>)
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fb26 	bl	8000210 <strcmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <messageReceivedFromControlUnit+0x26>
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	2231      	movs	r2, #49	; 0x31
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <messageReceivedFromControlUnit+0xc4>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f009 fe23 	bl	800b81e <strncpy>
 8001bd8:	e01c      	b.n	8001c14 <messageReceivedFromControlUnit+0x60>
    else if (strcmp(unitType, "ACU") == 0) strncpy(canMsg, "VCU received a CAN message from the ACU.\r\n", sizeof(canMsg) - 1);
 8001bda:	4928      	ldr	r1, [pc, #160]	; (8001c7c <messageReceivedFromControlUnit+0xc8>)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7fe fb17 	bl	8000210 <strcmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <messageReceivedFromControlUnit+0x44>
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2231      	movs	r2, #49	; 0x31
 8001bee:	4924      	ldr	r1, [pc, #144]	; (8001c80 <messageReceivedFromControlUnit+0xcc>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f009 fe14 	bl	800b81e <strncpy>
 8001bf6:	e00d      	b.n	8001c14 <messageReceivedFromControlUnit+0x60>
    else if (strcmp(unitType, "SCU") == 0) strncpy(canMsg, "VCU received a CAN message from the SCU.\r\n", sizeof(canMsg) - 1);
 8001bf8:	4922      	ldr	r1, [pc, #136]	; (8001c84 <messageReceivedFromControlUnit+0xd0>)
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fb08 	bl	8000210 <strcmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <messageReceivedFromControlUnit+0x60>
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2231      	movs	r2, #49	; 0x31
 8001c0c:	491e      	ldr	r1, [pc, #120]	; (8001c88 <messageReceivedFromControlUnit+0xd4>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 fe05 	bl	800b81e <strncpy>
    nullTerminate(canMsg);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ffab 	bl	8001b74 <nullTerminate>
    HAL_USART_Transmit(&husart2, (uint8_t *)canMsg, strlen(canMsg), 10);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fafe 	bl	8000224 <strlen>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f107 010c 	add.w	r1, r7, #12
 8001c30:	230a      	movs	r3, #10
 8001c32:	4816      	ldr	r0, [pc, #88]	; (8001c8c <messageReceivedFromControlUnit+0xd8>)
 8001c34:	f005 faec 	bl	8007210 <HAL_USART_Transmit>
    strncpy(canMsg, (char *) RxData, RxHeader.DLC);
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <messageReceivedFromControlUnit+0xdc>)
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4914      	ldr	r1, [pc, #80]	; (8001c94 <messageReceivedFromControlUnit+0xe0>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f009 fdeb 	bl	800b81e <strncpy>
    nullTerminate(canMsg);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff91 	bl	8001b74 <nullTerminate>
    HAL_USART_Transmit(&husart2, (uint8_t *)canMsg, strlen(canMsg), 10);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fae4 	bl	8000224 <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	230a      	movs	r3, #10
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <messageReceivedFromControlUnit+0xd8>)
 8001c68:	f005 fad2 	bl	8007210 <HAL_USART_Transmit>
}
 8001c6c:	bf00      	nop
 8001c6e:	3740      	adds	r7, #64	; 0x40
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0800c960 	.word	0x0800c960
 8001c78:	0800c964 	.word	0x0800c964
 8001c7c:	0800c990 	.word	0x0800c990
 8001c80:	0800c994 	.word	0x0800c994
 8001c84:	0800c9c0 	.word	0x0800c9c0
 8001c88:	0800c9c4 	.word	0x0800c9c4
 8001c8c:	20000e28 	.word	0x20000e28
 8001c90:	20000cb0 	.word	0x20000cb0
 8001c94:	20000ccc 	.word	0x20000ccc

08001c98 <CAN_Polling>:

HAL_StatusTypeDef CAN_Polling(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
    uint32_t isCanRxFifoFilled = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <CAN_Polling+0x40>)
 8001ca2:	f003 f8c8 	bl	8004e36 <HAL_CAN_GetRxFifoFillLevel>
 8001ca6:	6078      	str	r0, [r7, #4]
    if (isCanRxFifoFilled < 1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <CAN_Polling+0x1a>
    {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00d      	b.n	8001cce <CAN_Polling+0x36>
    }

    HAL_StatusTypeDef isCanMsgReceived = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <CAN_Polling+0x44>)
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <CAN_Polling+0x48>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <CAN_Polling+0x40>)
 8001cba:	f002 ff9a 	bl	8004bf2 <HAL_CAN_GetRxMessage>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	70fb      	strb	r3, [r7, #3]
    if (isCanMsgReceived != HAL_OK)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <CAN_Polling+0x34>
    {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <CAN_Polling+0x36>
    }

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000cf8 	.word	0x20000cf8
 8001cdc:	20000ccc 	.word	0x20000ccc
 8001ce0:	20000cb0 	.word	0x20000cb0

08001ce4 <StartCanRxTask>:

void StartCanRxTask(void *argument)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
//	imuState state;
    char canMsg[50];
    BaseType_t ret;
    HAL_CAN_Start(&hcan1);
 8001cec:	486a      	ldr	r0, [pc, #424]	; (8001e98 <StartCanRxTask+0x1b4>)
 8001cee:	f002 fe6c 	bl	80049ca <HAL_CAN_Start>

    for (;;)
    {
        if (CAN_Polling() == HAL_OK)
 8001cf2:	f7ff ffd1 	bl	8001c98 <CAN_Polling>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1fa      	bne.n	8001cf2 <StartCanRxTask+0xe>
        {
            if (RxHeader.IDE == CAN_ID_EXT)
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <StartCanRxTask+0x1b8>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b04      	cmp	r3, #4
            {
                switch (RxHeader.ExtId)
                {}
            }
            if (RxHeader.IDE == CAN_ID_STD)
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <StartCanRxTask+0x1b8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f3      	bne.n	8001cf2 <StartCanRxTask+0xe>
            {
                switch (RxHeader.ExtId)
 8001d0a:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <StartCanRxTask+0x1b8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001d12:	f000 80ab 	beq.w	8001e6c <StartCanRxTask+0x188>
 8001d16:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001d1a:	f200 80bb 	bhi.w	8001e94 <StartCanRxTask+0x1b0>
 8001d1e:	2b69      	cmp	r3, #105	; 0x69
 8001d20:	f000 80a0 	beq.w	8001e64 <StartCanRxTask+0x180>
 8001d24:	2b69      	cmp	r3, #105	; 0x69
 8001d26:	f0c0 80b5 	bcc.w	8001e94 <StartCanRxTask+0x1b0>
 8001d2a:	2bb0      	cmp	r3, #176	; 0xb0
 8001d2c:	f200 80b2 	bhi.w	8001e94 <StartCanRxTask+0x1b0>
 8001d30:	2b88      	cmp	r3, #136	; 0x88
 8001d32:	f0c0 80af 	bcc.w	8001e94 <StartCanRxTask+0x1b0>
 8001d36:	3b88      	subs	r3, #136	; 0x88
 8001d38:	2b28      	cmp	r3, #40	; 0x28
 8001d3a:	f200 80ab 	bhi.w	8001e94 <StartCanRxTask+0x1b0>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <StartCanRxTask+0x60>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001de9 	.word	0x08001de9
 8001d48:	08001e95 	.word	0x08001e95
 8001d4c:	08001e95 	.word	0x08001e95
 8001d50:	08001e95 	.word	0x08001e95
 8001d54:	08001e95 	.word	0x08001e95
 8001d58:	08001e95 	.word	0x08001e95
 8001d5c:	08001e95 	.word	0x08001e95
 8001d60:	08001e95 	.word	0x08001e95
 8001d64:	08001e95 	.word	0x08001e95
 8001d68:	08001e95 	.word	0x08001e95
 8001d6c:	08001e95 	.word	0x08001e95
 8001d70:	08001e95 	.word	0x08001e95
 8001d74:	08001e95 	.word	0x08001e95
 8001d78:	08001e95 	.word	0x08001e95
 8001d7c:	08001e95 	.word	0x08001e95
 8001d80:	08001e95 	.word	0x08001e95
 8001d84:	08001e95 	.word	0x08001e95
 8001d88:	08001e95 	.word	0x08001e95
 8001d8c:	08001e95 	.word	0x08001e95
 8001d90:	08001e95 	.word	0x08001e95
 8001d94:	08001e95 	.word	0x08001e95
 8001d98:	08001e95 	.word	0x08001e95
 8001d9c:	08001e95 	.word	0x08001e95
 8001da0:	08001e95 	.word	0x08001e95
 8001da4:	08001e85 	.word	0x08001e85
 8001da8:	08001e95 	.word	0x08001e95
 8001dac:	08001e8d 	.word	0x08001e8d
 8001db0:	08001e95 	.word	0x08001e95
 8001db4:	08001e95 	.word	0x08001e95
 8001db8:	08001e95 	.word	0x08001e95
 8001dbc:	08001e75 	.word	0x08001e75
 8001dc0:	08001e95 	.word	0x08001e95
 8001dc4:	08001e95 	.word	0x08001e95
 8001dc8:	08001e95 	.word	0x08001e95
 8001dcc:	08001e95 	.word	0x08001e95
 8001dd0:	08001e95 	.word	0x08001e95
 8001dd4:	08001e95 	.word	0x08001e95
 8001dd8:	08001e95 	.word	0x08001e95
 8001ddc:	08001e95 	.word	0x08001e95
 8001de0:	08001e95 	.word	0x08001e95
 8001de4:	08001e7d 	.word	0x08001e7d
                {
                    case CAN_VCU_CAN_ID:
                        messageReceivedFromControlUnit("VCU");
 8001de8:	482d      	ldr	r0, [pc, #180]	; (8001ea0 <StartCanRxTask+0x1bc>)
 8001dea:	f7ff fee3 	bl	8001bb4 <messageReceivedFromControlUnit>
                        sprintf(canMsg, "Received a VCU message.\r\n");
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <StartCanRxTask+0x1c0>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 fca7 	bl	800b748 <siprintf>
                        HAL_USART_Transmit(&husart2, (uint8_t *)canMsg, strlen(canMsg), 10);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa10 	bl	8000224 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f107 010c 	add.w	r1, r7, #12
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	4826      	ldr	r0, [pc, #152]	; (8001ea8 <StartCanRxTask+0x1c4>)
 8001e10:	f005 f9fe 	bl	8007210 <HAL_USART_Transmit>
                        sprintf(canMsg, "%s", RxData);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4a24      	ldr	r2, [pc, #144]	; (8001eac <StartCanRxTask+0x1c8>)
 8001e1a:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <StartCanRxTask+0x1cc>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f009 fc93 	bl	800b748 <siprintf>
                        HAL_USART_Transmit(&husart2, (uint8_t *)canMsg, strlen(canMsg), 10);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe f9fc 	bl	8000224 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f107 010c 	add.w	r1, r7, #12
 8001e34:	230a      	movs	r3, #10
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <StartCanRxTask+0x1c4>)
 8001e38:	f005 f9ea 	bl	8007210 <HAL_USART_Transmit>
                        sprintf(canMsg, "\r\n");
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	491c      	ldr	r1, [pc, #112]	; (8001eb4 <StartCanRxTask+0x1d0>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 fc80 	bl	800b748 <siprintf>
                        HAL_USART_Transmit(&husart2, (uint8_t *)canMsg, strlen(canMsg), 10);
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe f9e9 	bl	8000224 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	f107 010c 	add.w	r1, r7, #12
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <StartCanRxTask+0x1c4>)
 8001e5e:	f005 f9d7 	bl	8007210 <HAL_USART_Transmit>
//                        ret = xQueueSendToBack(ACB_VCU_CAN_Queue, &RxHeader, pdMS_TO_TICKS(CAN_SUB_Q_DELAY_MS));
//                        if(ret != pdPASS){
//                            //qfull
//                            log_and_handle_error(ERROR_Q_FULL, NULL);
//                        }
                        break;
 8001e62:	e018      	b.n	8001e96 <StartCanRxTask+0x1b2>
                    case CAN_ACU_CAN_ID:
                        messageReceivedFromControlUnit("ACU");
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <StartCanRxTask+0x1d4>)
 8001e66:	f7ff fea5 	bl	8001bb4 <messageReceivedFromControlUnit>
                        break;
 8001e6a:	e014      	b.n	8001e96 <StartCanRxTask+0x1b2>
                    case CAN_SCU_CAN_ID:
                        messageReceivedFromControlUnit("SCU");
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <StartCanRxTask+0x1d8>)
 8001e6e:	f7ff fea1 	bl	8001bb4 <messageReceivedFromControlUnit>
                        break;
 8001e72:	e010      	b.n	8001e96 <StartCanRxTask+0x1b2>
                    case 0xAB:
                        //mc_process_faults(packetToProcess.Data);
                        break;

                    case 0xA6:
                        mc_process_current_can(RxData);
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <StartCanRxTask+0x1c8>)
 8001e76:	f001 f975 	bl	8003164 <mc_process_current_can>
                        break;
 8001e7a:	e00c      	b.n	8001e96 <StartCanRxTask+0x1b2>


                    case CAN_MC_RX_HIGHSPEED: //High speed message, 333Hz
                        mc_process_fast_can(RxData);
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <StartCanRxTask+0x1c8>)
 8001e7e:	f001 f8f7 	bl	8003070 <mc_process_fast_can>
                        break;
 8001e82:	e008      	b.n	8001e96 <StartCanRxTask+0x1b2>

                        //Motor Controller Messages
                    case CAN_MC_RX_TEMP1_ID: //IGBT temp readings
                        mc_process_temp1_can(RxData);
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <StartCanRxTask+0x1c8>)
 8001e86:	f001 f839 	bl	8002efc <mc_process_temp1_can>
                        break;
 8001e8a:	e004      	b.n	8001e96 <StartCanRxTask+0x1b2>

                    case CAN_MC_RX_TEMP3_ID: //Motor temp reading
                        mc_process_temp3_can(RxData);
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <StartCanRxTask+0x1c8>)
 8001e8e:	f001 f86b 	bl	8002f68 <mc_process_temp3_can>
                        break;
 8001e92:	e000      	b.n	8001e96 <StartCanRxTask+0x1b2>

                    default:
                        break;
 8001e94:	bf00      	nop
        if (CAN_Polling() == HAL_OK)
 8001e96:	e72c      	b.n	8001cf2 <StartCanRxTask+0xe>
 8001e98:	20000cf8 	.word	0x20000cf8
 8001e9c:	20000cb0 	.word	0x20000cb0
 8001ea0:	0800c960 	.word	0x0800c960
 8001ea4:	0800c9f0 	.word	0x0800c9f0
 8001ea8:	20000e28 	.word	0x20000e28
 8001eac:	20000ccc 	.word	0x20000ccc
 8001eb0:	0800ca0c 	.word	0x0800ca0c
 8001eb4:	0800ca10 	.word	0x0800ca10
 8001eb8:	0800c990 	.word	0x0800c990
 8001ebc:	0800c9c0 	.word	0x0800c9c0

08001ec0 <StartCanTxTask>:
            }
        }
    }
}

void StartCanTxTask(void *argument){
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    for(;;){
 8001ec8:	e7fe      	b.n	8001ec8 <StartCanTxTask+0x8>
	...

08001ecc <set_car_state>:
#include "car_state.h"

static enum CAR_STATE current_state= IDLE;

void set_car_state(enum CAR_STATE new_state){
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	if(new_state < NUM_CAR_STATES){
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d802      	bhi.n	8001ee2 <set_car_state+0x16>
		current_state = new_state;
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <set_car_state+0x24>)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	7013      	strb	r3, [r2, #0]
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000d20 	.word	0x20000d20

08001ef4 <get_car_state>:

enum CAR_STATE get_car_state(){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
	enum CAR_STATE state;
	state = current_state;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <get_car_state+0x1c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
	return state;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000d20 	.word	0x20000d20

08001f14 <dash_clear_all_leds>:


/*
 * ALL GPIO toggle stuff. Every human should be able to understand this
 */
void dash_clear_all_leds() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TSA_LED1_BLUE_GPIO_Port, TSA_LED1_BLUE_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <dash_clear_all_leds+0x30>)
 8001f1e:	f003 fd2b 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TSA_LED2_GREEN_GPIO_Port, TSA_LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2108      	movs	r1, #8
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <dash_clear_all_leds+0x30>)
 8001f28:	f003 fd26 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2104      	movs	r1, #4
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <dash_clear_all_leds+0x30>)
 8001f32:	f003 fd21 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	4802      	ldr	r0, [pc, #8]	; (8001f44 <dash_clear_all_leds+0x30>)
 8001f3c:	f003 fd1c 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <dash_set_all_leds>:

void dash_set_all_leds() {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TSA_LED1_BLUE_GPIO_Port, TSA_LED1_BLUE_Pin, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2120      	movs	r1, #32
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <dash_set_all_leds+0x30>)
 8001f52:	f003 fd11 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TSA_LED2_GREEN_GPIO_Port, TSA_LED2_GREEN_Pin, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	2108      	movs	r1, #8
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <dash_set_all_leds+0x30>)
 8001f5c:	f003 fd0c 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2104      	movs	r1, #4
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <dash_set_all_leds+0x30>)
 8001f66:	f003 fd07 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <dash_set_all_leds+0x30>)
 8001f70:	f003 fd02 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <dash_set_tsa_teal>:
}

/*
 * TSA
 */
void dash_set_tsa_teal() {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TSA_LED1_BLUE_GPIO_Port, TSA_LED1_BLUE_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2120      	movs	r1, #32
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <dash_set_tsa_teal+0x1c>)
 8001f86:	f003 fcf7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TSA_LED2_GREEN_GPIO_Port, TSA_LED2_GREEN_Pin, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2108      	movs	r1, #8
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <dash_set_tsa_teal+0x1c>)
 8001f90:	f003 fcf2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <dash_set_tsa_green>:

void dash_set_tsa_green() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TSA_LED1_BLUE_GPIO_Port, TSA_LED1_BLUE_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <dash_set_tsa_green+0x1c>)
 8001fa6:	f003 fce7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TSA_LED2_GREEN_GPIO_Port, TSA_LED2_GREEN_Pin, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2108      	movs	r1, #8
 8001fae:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <dash_set_tsa_green+0x1c>)
 8001fb0:	f003 fce2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000

08001fbc <dash_set_tsa_blue>:

void dash_set_tsa_blue() {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TSA_LED1_BLUE_GPIO_Port, TSA_LED1_BLUE_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <dash_set_tsa_blue+0x1c>)
 8001fc6:	f003 fcd7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TSA_LED2_GREEN_GPIO_Port, TSA_LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2108      	movs	r1, #8
 8001fce:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <dash_set_tsa_blue+0x1c>)
 8001fd0:	f003 fcd2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000

08001fdc <dash_set_rtd_green>:
}

/*
 * RTD
 */
void dash_set_rtd_green() {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <dash_set_rtd_green+0x1c>)
 8001fe6:	f003 fcc7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2110      	movs	r1, #16
 8001fee:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <dash_set_rtd_green+0x1c>)
 8001ff0:	f003 fcc2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000

08001ffc <dash_set_rtd_blue>:

void dash_set_rtd_blue() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	2104      	movs	r1, #4
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <dash_set_rtd_blue+0x1c>)
 8002006:	f003 fcb7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2110      	movs	r1, #16
 800200e:	4802      	ldr	r0, [pc, #8]	; (8002018 <dash_set_rtd_blue+0x1c>)
 8002010:	f003 fcb2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000

0800201c <dash_set_rtd_teal>:

void dash_set_rtd_teal() {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	2104      	movs	r1, #4
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <dash_set_rtd_teal+0x1c>)
 8002026:	f003 fca7 	bl	8005978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	2110      	movs	r1, #16
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <dash_set_rtd_teal+0x1c>)
 8002030:	f003 fca2 	bl	8005978 <HAL_GPIO_WritePin>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <vcu_debug_led>:
void dash_toggle_rtd_teal() {
	HAL_GPIO_TogglePin(RTD_LED2_BLUE_GPIO_Port, RTD_LED2_BLUE_Pin);
	HAL_GPIO_TogglePin(RTD_LED1_GREEN_GPIO_Port, RTD_LED1_GREEN_Pin);
}

void vcu_debug_led(enum debugLed led, bool on){
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState state = on ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	73fb      	strb	r3, [r7, #15]
    uint16_t pin;
    GPIO_TypeDef* port;

    switch(led){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d012      	beq.n	800207c <vcu_debug_led+0x40>
 8002056:	2b02      	cmp	r3, #2
 8002058:	dc16      	bgt.n	8002088 <vcu_debug_led+0x4c>
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <vcu_debug_led+0x28>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d006      	beq.n	8002070 <vcu_debug_led+0x34>
 8002062:	e011      	b.n	8002088 <vcu_debug_led+0x4c>
        case REDLED:
            port = VCU_LED_RED_GPIO_Port;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <vcu_debug_led+0x68>)
 8002066:	613b      	str	r3, [r7, #16]
            pin = VCU_LED_RED_Pin;
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	82fb      	strh	r3, [r7, #22]
            break;
 800206e:	e010      	b.n	8002092 <vcu_debug_led+0x56>
        case GREENLED:
            port = VCU_LED_GREEN_GPIO_Port;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <vcu_debug_led+0x68>)
 8002072:	613b      	str	r3, [r7, #16]
            pin = VCU_LED_GREEN_Pin;
 8002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002078:	82fb      	strh	r3, [r7, #22]
            break;
 800207a:	e00a      	b.n	8002092 <vcu_debug_led+0x56>
        case BLUELED:
            port = VCU_LED_BLUE_GPIO_Port;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <vcu_debug_led+0x68>)
 800207e:	613b      	str	r3, [r7, #16]
            pin = VCU_LED_BLUE_Pin;
 8002080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002084:	82fb      	strh	r3, [r7, #22]
            break;
 8002086:	e004      	b.n	8002092 <vcu_debug_led+0x56>
        default:
            logMessage("Bad argument to debug led", false);
 8002088:	2100      	movs	r1, #0
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <vcu_debug_led+0x6c>)
 800208c:	f000 fd58 	bl	8002b40 <logMessage>
            return;
 8002090:	e005      	b.n	800209e <vcu_debug_led+0x62>
    }

    HAL_GPIO_WritePin(port, pin, state);
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	4619      	mov	r1, r3
 8002098:	6938      	ldr	r0, [r7, #16]
 800209a:	f003 fc6d 	bl	8005978 <HAL_GPIO_WritePin>
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	0800ca14 	.word	0x0800ca14

080020ac <led_mgmt_set_error>:
static bool dash_state_flags[DASH_NUM_LED_STATES] = {false};


void hmi_mgmt_task(void * pvParameters);

void led_mgmt_set_error(dash_led_state_t state){
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
	dash_state_flags[state] = true;
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <led_mgmt_set_error+0x20>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	54d1      	strb	r1, [r2, r3]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000d24 	.word	0x20000d24

080020d0 <led_mgmt_clear_error>:

void led_mgmt_clear_error(dash_led_state_t state){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	dash_state_flags[state] = false;
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <led_mgmt_clear_error+0x20>)
 80020de:	2100      	movs	r1, #0
 80020e0:	54d1      	strb	r1, [r2, r3]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000d24 	.word	0x20000d24

080020f4 <StartDashboardLedTask>:
 * led_mgmt_task
 *
 * @Bried: This task manages the leds on the TSA and RTD buttons. Certain colours and flashing
 * are associated with different faults
 */
void StartDashboardLedTask(void *argument){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	dash_led_state_t prev_state = DASH_NO_ERROR;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73bb      	strb	r3, [r7, #14]
	dash_led_state_t cur_state = DASH_NO_ERROR;
 8002100:	2300      	movs	r3, #0
 8002102:	737b      	strb	r3, [r7, #13]

	for(;;){
		cur_state = DASH_NO_ERROR;
 8002104:	2300      	movs	r3, #0
 8002106:	737b      	strb	r3, [r7, #13]
		//determine highest priority error
		for(uint8_t i = 0; i < DASH_NUM_LED_STATES; i++){
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e009      	b.n	8002122 <StartDashboardLedTask+0x2e>
			if(true == dash_state_flags[i]){
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <StartDashboardLedTask+0xd4>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <StartDashboardLedTask+0x28>
				cur_state = i;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	737b      	strb	r3, [r7, #13]
		for(uint8_t i = 0; i < DASH_NUM_LED_STATES; i++){
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3301      	adds	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d9f2      	bls.n	800210e <StartDashboardLedTask+0x1a>
			}
		}

		//check battery voltage
		if(lv_battery_voltage() < 13){
 8002128:	f000 fd7a 	bl	8002c20 <lv_battery_voltage>
 800212c:	eef0 7a40 	vmov.f32	s15, s0
 8002130:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8002134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	d504      	bpl.n	8002148 <StartDashboardLedTask+0x54>
			//low battery situation
			logIndicator(true, LOW_BATTERY);
 800213e:	2102      	movs	r1, #2
 8002140:	2001      	movs	r0, #1
 8002142:	f000 fcd7 	bl	8002af4 <logIndicator>
 8002146:	e003      	b.n	8002150 <StartDashboardLedTask+0x5c>
			//go_idle();
		}
		else{
			logIndicator(false, LOW_BATTERY);
 8002148:	2102      	movs	r1, #2
 800214a:	2000      	movs	r0, #0
 800214c:	f000 fcd2 	bl	8002af4 <logIndicator>
		}

		//check saftey loop
		if(read_saftey_loop() && !dash_state_flags[DASH_SAFETY_LOOP_OPEN_ACB] ){
 8002150:	f001 ff2e 	bl	8003fb0 <read_saftey_loop>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
		else{
			//logIndicator(true, SAFETY_LOOP);
		}

		//overheat warnings
		if(mc_getAverageIGBTTemp() > 21000 || mc_getMotorTemp() > 14500){
 8002158:	f000 fe66 	bl	8002e28 <mc_getAverageIGBTTemp>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021cc <StartDashboardLedTask+0xd8>
 8002164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	dc0a      	bgt.n	8002184 <StartDashboardLedTask+0x90>
 800216e:	f000 fe83 	bl	8002e78 <mc_getMotorTemp>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80021d0 <StartDashboardLedTask+0xdc>
 800217a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	dd04      	ble.n	800218e <StartDashboardLedTask+0x9a>
			logIndicator(true, GENERAL_WARNING);
 8002184:	2101      	movs	r1, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f000 fcb4 	bl	8002af4 <logIndicator>
 800218c:	e003      	b.n	8002196 <StartDashboardLedTask+0xa2>
		}
		else{
			logIndicator(false, GENERAL_WARNING);
 800218e:	2101      	movs	r1, #1
 8002190:	2000      	movs	r0, #0
 8002192:	f000 fcaf 	bl	8002af4 <logIndicator>
		}

		//overall error
			//actual IGBT overheat,
		if(mc_getAverageIGBTTemp() > 23000){
 8002196:	f000 fe47 	bl	8002e28 <mc_getAverageIGBTTemp>
 800219a:	eef0 7a40 	vmov.f32	s15, s0
 800219e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80021d4 <StartDashboardLedTask+0xe0>
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd04      	ble.n	80021b6 <StartDashboardLedTask+0xc2>
			logIndicator(true, GENERAL_ERROR);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fca0 	bl	8002af4 <logIndicator>
 80021b4:	e003      	b.n	80021be <StartDashboardLedTask+0xca>
		}
		else{
			logIndicator(false, GENERAL_ERROR);
 80021b6:	2100      	movs	r1, #0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 fc9b 	bl	8002af4 <logIndicator>
//		}
//		else{
//			logIndicator(false, GENERAL_ERROR);
//		}

		HAL_Delay(250);
 80021be:	20fa      	movs	r0, #250	; 0xfa
 80021c0:	f002 f872 	bl	80042a8 <HAL_Delay>
		cur_state = DASH_NO_ERROR;
 80021c4:	e79e      	b.n	8002104 <StartDashboardLedTask+0x10>
 80021c6:	bf00      	nop
 80021c8:	20000d24 	.word	0x20000d24
 80021cc:	46a41000 	.word	0x46a41000
 80021d0:	46629000 	.word	0x46629000
 80021d4:	46b3b000 	.word	0x46b3b000

080021d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_DMA_Init+0x3c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <MX_DMA_Init+0x3c>)
 80021e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_DMA_Init+0x3c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2105      	movs	r1, #5
 80021fe:	2038      	movs	r0, #56	; 0x38
 8002200:	f002 fefa 	bl	8004ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002204:	2038      	movs	r0, #56	; 0x38
 8002206:	f002 ff13 	bl	8005030 <HAL_NVIC_EnableIRQ>

}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <log_and_handle_error>:
static uint8_t can2_fail_count = 0;
static uint8_t mc_rx_fail_count = 0;
static uint8_t q_full_fail_count = 0;
static uint8_t q_empty_fail_count = 0;

void log_and_handle_error(error_case_t error, void (*errorHandlerFcn)(void)){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
	if(errorHandlerFcn != NULL){
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <log_and_handle_error+0x16>
		errorHandlerFcn();
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	4798      	blx	r3
	}
	switch(error){
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	f200 808b 	bhi.w	800234c <log_and_handle_error+0x134>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <log_and_handle_error+0x24>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800227b 	.word	0x0800227b
 8002240:	08002271 	.word	0x08002271
 8002244:	08002285 	.word	0x08002285
 8002248:	0800228f 	.word	0x0800228f
 800224c:	08002299 	.word	0x08002299
 8002250:	0800234d 	.word	0x0800234d
 8002254:	080022a3 	.word	0x080022a3
 8002258:	080022ad 	.word	0x080022ad
 800225c:	080022b7 	.word	0x080022b7
 8002260:	080022d5 	.word	0x080022d5
 8002264:	080022f3 	.word	0x080022f3
 8002268:	08002311 	.word	0x08002311
 800226c:	0800232f 	.word	0x0800232f
	case ERROR_HEARTBEAT_DEAD:
		//set the led state
		//log to the sd card
		logMessage("ERROR: Failed To Recieve Heartbeat", false);
 8002270:	2100      	movs	r1, #0
 8002272:	483f      	ldr	r0, [pc, #252]	; (8002370 <log_and_handle_error+0x158>)
 8002274:	f000 fc64 	bl	8002b40 <logMessage>
		//setLedState(Pretty colours)
		break;
 8002278:	e076      	b.n	8002368 <log_and_handle_error+0x150>
	case ERROR_AIR_WELD:
		//set the led state
		//log to the sd card
		logMessage("ERROR: AIR WELDED CLOSED!!!", false);
 800227a:	2100      	movs	r1, #0
 800227c:	483d      	ldr	r0, [pc, #244]	; (8002374 <log_and_handle_error+0x15c>)
 800227e:	f000 fc5f 	bl	8002b40 <logMessage>
		//setLedState(Sad colours)
		break;
 8002282:	e071      	b.n	8002368 <log_and_handle_error+0x150>
	case ERROR_ACB_SAFETY_LOOP_OPEN:
		//set the led state
		//log to the sd card
		logMessage("ERROR: ACB Saftey Loop Open", false);
 8002284:	2100      	movs	r1, #0
 8002286:	483c      	ldr	r0, [pc, #240]	; (8002378 <log_and_handle_error+0x160>)
 8002288:	f000 fc5a 	bl	8002b40 <logMessage>
		//setLedState(Sad colours)
		break;
 800228c:	e06c      	b.n	8002368 <log_and_handle_error+0x150>
	case ERROR_AIR_FAIL_TO_CLOSE:
		logMessage("ERROR: Failed to close AIRS", false);
 800228e:	2100      	movs	r1, #0
 8002290:	483a      	ldr	r0, [pc, #232]	; (800237c <log_and_handle_error+0x164>)
 8002292:	f000 fc55 	bl	8002b40 <logMessage>
		//setLedState(Sad colours)
		break;
 8002296:	e067      	b.n	8002368 <log_and_handle_error+0x150>
	case ERROR_PRECHAGE_FAIL:
		logMessage("ERROR: Precharge failed", false);
 8002298:	2100      	movs	r1, #0
 800229a:	4839      	ldr	r0, [pc, #228]	; (8002380 <log_and_handle_error+0x168>)
 800229c:	f000 fc50 	bl	8002b40 <logMessage>
		//setLedState(Sad colours)
		break;
 80022a0:	e062      	b.n	8002368 <log_and_handle_error+0x150>
	case IWDG_ERROR:
		//set the led state
		//log to sd card
		logMessage("ERROR: Init IWDG", false);
 80022a2:	2100      	movs	r1, #0
 80022a4:	4837      	ldr	r0, [pc, #220]	; (8002384 <log_and_handle_error+0x16c>)
 80022a6:	f000 fc4b 	bl	8002b40 <logMessage>
		break;
 80022aa:	e05d      	b.n	8002368 <log_and_handle_error+0x150>
	case BAD_PEDAL_STRUCT:
		//in case a bad pointer is found in a pedal state struct

		logMessage("ERROR: Bad Pedal Struct", false);
 80022ac:	2100      	movs	r1, #0
 80022ae:	4836      	ldr	r0, [pc, #216]	; (8002388 <log_and_handle_error+0x170>)
 80022b0:	f000 fc46 	bl	8002b40 <logMessage>
		break;
 80022b4:	e058      	b.n	8002368 <log_and_handle_error+0x150>
	case ERROR_CAN_ONE_TX_FAIL:
		//set the led state
		//log to the sd card
		if(can1_fail_count < ERR_MAX_CAN_FAIL){
 80022b6:	4b35      	ldr	r3, [pc, #212]	; (800238c <log_and_handle_error+0x174>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d84b      	bhi.n	8002356 <log_and_handle_error+0x13e>
			logMessage("ERROR: CAN 1 TX Fail", false);
 80022be:	2100      	movs	r1, #0
 80022c0:	4833      	ldr	r0, [pc, #204]	; (8002390 <log_and_handle_error+0x178>)
 80022c2:	f000 fc3d 	bl	8002b40 <logMessage>
			can1_fail_count++;
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <log_and_handle_error+0x174>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <log_and_handle_error+0x174>)
 80022d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022d2:	e040      	b.n	8002356 <log_and_handle_error+0x13e>
	case ERROR_CAN_TWO_TX_FAIL:
		//set the led state
		//log to the sd card
		if(can2_fail_count < ERR_MAX_CAN_FAIL){
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <log_and_handle_error+0x17c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d83e      	bhi.n	800235a <log_and_handle_error+0x142>
			logMessage("ERROR: CAN 2 TX Fail", false);
 80022dc:	2100      	movs	r1, #0
 80022de:	482e      	ldr	r0, [pc, #184]	; (8002398 <log_and_handle_error+0x180>)
 80022e0:	f000 fc2e 	bl	8002b40 <logMessage>
			can2_fail_count++;
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <log_and_handle_error+0x17c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <log_and_handle_error+0x17c>)
 80022ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022f0:	e033      	b.n	800235a <log_and_handle_error+0x142>
	case ERROR_MC_CAN_RX_FAIL:
		//set the led state
		//log to the sd card
		if(mc_rx_fail_count < ERR_MAX_CAN_FAIL){
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <log_and_handle_error+0x184>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d831      	bhi.n	800235e <log_and_handle_error+0x146>
			logMessage("ERROR: MC CAN RX Fail", false);
 80022fa:	2100      	movs	r1, #0
 80022fc:	4828      	ldr	r0, [pc, #160]	; (80023a0 <log_and_handle_error+0x188>)
 80022fe:	f000 fc1f 	bl	8002b40 <logMessage>
			mc_rx_fail_count++;
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <log_and_handle_error+0x184>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <log_and_handle_error+0x184>)
 800230c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800230e:	e026      	b.n	800235e <log_and_handle_error+0x146>
	case ERROR_Q_FULL:
		//set the led state
		//log to the sd card
		if(q_full_fail_count < ERR_MAX_CAN_FAIL){
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <log_and_handle_error+0x18c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d824      	bhi.n	8002362 <log_and_handle_error+0x14a>
			logMessage("ERROR: RTOS Queue Full", false);
 8002318:	2100      	movs	r1, #0
 800231a:	4823      	ldr	r0, [pc, #140]	; (80023a8 <log_and_handle_error+0x190>)
 800231c:	f000 fc10 	bl	8002b40 <logMessage>
			q_full_fail_count++;
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <log_and_handle_error+0x18c>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <log_and_handle_error+0x18c>)
 800232a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800232c:	e019      	b.n	8002362 <log_and_handle_error+0x14a>
	case ERROR_Q_EMPTY:
			//set the led state
			//log to the sd card
			if(q_empty_fail_count < ERR_MAX_CAN_FAIL){
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <log_and_handle_error+0x194>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d817      	bhi.n	8002366 <log_and_handle_error+0x14e>
				logMessage("ERROR: RTOS Queue Empty", false);
 8002336:	2100      	movs	r1, #0
 8002338:	481d      	ldr	r0, [pc, #116]	; (80023b0 <log_and_handle_error+0x198>)
 800233a:	f000 fc01 	bl	8002b40 <logMessage>
				q_empty_fail_count++;
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <log_and_handle_error+0x194>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <log_and_handle_error+0x194>)
 8002348:	701a      	strb	r2, [r3, #0]
			}
			break;
 800234a:	e00c      	b.n	8002366 <log_and_handle_error+0x14e>
	default:
		logMessage("Unknown Error", false);
 800234c:	2100      	movs	r1, #0
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <log_and_handle_error+0x19c>)
 8002350:	f000 fbf6 	bl	8002b40 <logMessage>
		//setLedState(Other Pretty colours)
	}
}
 8002354:	e008      	b.n	8002368 <log_and_handle_error+0x150>
		break;
 8002356:	bf00      	nop
 8002358:	e006      	b.n	8002368 <log_and_handle_error+0x150>
		break;
 800235a:	bf00      	nop
 800235c:	e004      	b.n	8002368 <log_and_handle_error+0x150>
		break;
 800235e:	bf00      	nop
 8002360:	e002      	b.n	8002368 <log_and_handle_error+0x150>
		break;
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <log_and_handle_error+0x150>
			break;
 8002366:	bf00      	nop
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800ca30 	.word	0x0800ca30
 8002374:	0800ca54 	.word	0x0800ca54
 8002378:	0800ca70 	.word	0x0800ca70
 800237c:	0800ca8c 	.word	0x0800ca8c
 8002380:	0800caa8 	.word	0x0800caa8
 8002384:	0800cac0 	.word	0x0800cac0
 8002388:	0800cad4 	.word	0x0800cad4
 800238c:	20000d2b 	.word	0x20000d2b
 8002390:	0800caec 	.word	0x0800caec
 8002394:	20000d2c 	.word	0x20000d2c
 8002398:	0800cb04 	.word	0x0800cb04
 800239c:	20000d2d 	.word	0x20000d2d
 80023a0:	0800cb1c 	.word	0x0800cb1c
 80023a4:	20000d2e 	.word	0x20000d2e
 80023a8:	0800cb34 	.word	0x0800cb34
 80023ac:	20000d2f 	.word	0x20000d2f
 80023b0:	0800cb4c 	.word	0x0800cb4c
 80023b4:	0800cb64 	.word	0x0800cb64

080023b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <MX_FREERTOS_Init+0xb8>)
 80023be:	2100      	movs	r1, #0
 80023c0:	482c      	ldr	r0, [pc, #176]	; (8002474 <MX_FREERTOS_Init+0xbc>)
 80023c2:	f005 fb31 	bl	8007a28 <osThreadNew>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <MX_FREERTOS_Init+0xc0>)
 80023ca:	6013      	str	r3, [r2, #0]

  /* creation of dashLedTask */
  dashLedTaskHandle = osThreadNew(StartDashboardLedTask, NULL, &dashLedTask_attributes);
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <MX_FREERTOS_Init+0xc4>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	482b      	ldr	r0, [pc, #172]	; (8002480 <MX_FREERTOS_Init+0xc8>)
 80023d2:	f005 fb29 	bl	8007a28 <osThreadNew>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <MX_FREERTOS_Init+0xcc>)
 80023da:	6013      	str	r3, [r2, #0]

  /* creation of watchDogTask */
  watchDogTaskHandle = osThreadNew(StartWatchDogTask, NULL, &watchDogTask_attributes);
 80023dc:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <MX_FREERTOS_Init+0xd0>)
 80023de:	2100      	movs	r1, #0
 80023e0:	482a      	ldr	r0, [pc, #168]	; (800248c <MX_FREERTOS_Init+0xd4>)
 80023e2:	f005 fb21 	bl	8007a28 <osThreadNew>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <MX_FREERTOS_Init+0xd8>)
 80023ea:	6013      	str	r3, [r2, #0]

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &canTxTask_attributes);
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <MX_FREERTOS_Init+0xdc>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	4829      	ldr	r0, [pc, #164]	; (8002498 <MX_FREERTOS_Init+0xe0>)
 80023f2:	f005 fb19 	bl	8007a28 <osThreadNew>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <MX_FREERTOS_Init+0xe4>)
 80023fa:	6013      	str	r3, [r2, #0]

  /* creation of canRxTask */
  canRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &canRxTask_attributes);
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <MX_FREERTOS_Init+0xe8>)
 80023fe:	2100      	movs	r1, #0
 8002400:	4828      	ldr	r0, [pc, #160]	; (80024a4 <MX_FREERTOS_Init+0xec>)
 8002402:	f005 fb11 	bl	8007a28 <osThreadNew>
 8002406:	4603      	mov	r3, r0
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <MX_FREERTOS_Init+0xf0>)
 800240a:	6013      	str	r3, [r2, #0]

  /* creation of btDumpTask */
  btDumpTaskHandle = osThreadNew(StartBluetoothDumpTask, NULL, &btDumpTask_attributes);
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <MX_FREERTOS_Init+0xf4>)
 800240e:	2100      	movs	r1, #0
 8002410:	4827      	ldr	r0, [pc, #156]	; (80024b0 <MX_FREERTOS_Init+0xf8>)
 8002412:	f005 fb09 	bl	8007a28 <osThreadNew>
 8002416:	4603      	mov	r3, r0
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <MX_FREERTOS_Init+0xfc>)
 800241a:	6013      	str	r3, [r2, #0]

  /* creation of vcuStateTask */
  vcuStateTaskHandle = osThreadNew(StartVcuStateTask, NULL, &vcuStateTask_attributes);
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <MX_FREERTOS_Init+0x100>)
 800241e:	2100      	movs	r1, #0
 8002420:	4826      	ldr	r0, [pc, #152]	; (80024bc <MX_FREERTOS_Init+0x104>)
 8002422:	f005 fb01 	bl	8007a28 <osThreadNew>
 8002426:	4603      	mov	r3, r0
 8002428:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <MX_FREERTOS_Init+0x108>)
 800242a:	6013      	str	r3, [r2, #0]

  /* creation of mcHrtbeatTask */
  mcHrtbeatTaskHandle = osThreadNew(StartMcHeartbeatTask, NULL, &mcHrtbeatTask_attributes);
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <MX_FREERTOS_Init+0x10c>)
 800242e:	2100      	movs	r1, #0
 8002430:	4825      	ldr	r0, [pc, #148]	; (80024c8 <MX_FREERTOS_Init+0x110>)
 8002432:	f005 faf9 	bl	8007a28 <osThreadNew>
 8002436:	4603      	mov	r3, r0
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <MX_FREERTOS_Init+0x114>)
 800243a:	6013      	str	r3, [r2, #0]

  /* creation of acuHrtbeatTask */
  acuHrtbeatTaskHandle = osThreadNew(StartAcuHeartbeatTask, NULL, &acuHrtbeatTask_attributes);
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <MX_FREERTOS_Init+0x118>)
 800243e:	2100      	movs	r1, #0
 8002440:	4824      	ldr	r0, [pc, #144]	; (80024d4 <MX_FREERTOS_Init+0x11c>)
 8002442:	f005 faf1 	bl	8007a28 <osThreadNew>
 8002446:	4603      	mov	r3, r0
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <MX_FREERTOS_Init+0x120>)
 800244a:	6013      	str	r3, [r2, #0]

  /* creation of brakeProcTask */
  brakeProcTaskHandle = osThreadNew(StartBrakeProcessTask, NULL, &brakeProcTask_attributes);
 800244c:	4a23      	ldr	r2, [pc, #140]	; (80024dc <MX_FREERTOS_Init+0x124>)
 800244e:	2100      	movs	r1, #0
 8002450:	4823      	ldr	r0, [pc, #140]	; (80024e0 <MX_FREERTOS_Init+0x128>)
 8002452:	f005 fae9 	bl	8007a28 <osThreadNew>
 8002456:	4603      	mov	r3, r0
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <MX_FREERTOS_Init+0x12c>)
 800245a:	6013      	str	r3, [r2, #0]

  /* creation of appsProcTask */
  appsProcTaskHandle = osThreadNew(StartAppsProcessTask, NULL, &appsProcTask_attributes);
 800245c:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <MX_FREERTOS_Init+0x130>)
 800245e:	2100      	movs	r1, #0
 8002460:	4822      	ldr	r0, [pc, #136]	; (80024ec <MX_FREERTOS_Init+0x134>)
 8002462:	f005 fae1 	bl	8007a28 <osThreadNew>
 8002466:	4603      	mov	r3, r0
 8002468:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <MX_FREERTOS_Init+0x138>)
 800246a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0800cfa8 	.word	0x0800cfa8
 8002474:	080024f5 	.word	0x080024f5
 8002478:	20000d30 	.word	0x20000d30
 800247c:	0800cfcc 	.word	0x0800cfcc
 8002480:	080020f5 	.word	0x080020f5
 8002484:	20000d34 	.word	0x20000d34
 8002488:	0800cff0 	.word	0x0800cff0
 800248c:	08002a7d 	.word	0x08002a7d
 8002490:	20000d38 	.word	0x20000d38
 8002494:	0800d014 	.word	0x0800d014
 8002498:	08001ec1 	.word	0x08001ec1
 800249c:	20000d3c 	.word	0x20000d3c
 80024a0:	0800d038 	.word	0x0800d038
 80024a4:	08001ce5 	.word	0x08001ce5
 80024a8:	20000d40 	.word	0x20000d40
 80024ac:	0800d05c 	.word	0x0800d05c
 80024b0:	0800190d 	.word	0x0800190d
 80024b4:	20000d44 	.word	0x20000d44
 80024b8:	0800d080 	.word	0x0800d080
 80024bc:	08003cf5 	.word	0x08003cf5
 80024c0:	20000d48 	.word	0x20000d48
 80024c4:	0800d0a4 	.word	0x0800d0a4
 80024c8:	08002871 	.word	0x08002871
 80024cc:	20000d4c 	.word	0x20000d4c
 80024d0:	0800d0c8 	.word	0x0800d0c8
 80024d4:	08002765 	.word	0x08002765
 80024d8:	20000d50 	.word	0x20000d50
 80024dc:	0800d0ec 	.word	0x0800d0ec
 80024e0:	0800140d 	.word	0x0800140d
 80024e4:	20000d54 	.word	0x20000d54
 80024e8:	0800d110 	.word	0x0800d110
 80024ec:	080010cd 	.word	0x080010cd
 80024f0:	20000d58 	.word	0x20000d58

080024f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f005 fb73 	bl	8007be8 <osDelay>
 8002502:	e7fb      	b.n	80024fc <StartDefaultTask+0x8>

08002504 <MX_GPIO_Init>:
        * the Code Generation settings)
     PB5   ------> CAN2_RX
     PB6   ------> CAN2_TX
*/
void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <MX_GPIO_Init+0x244>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a89      	ldr	r2, [pc, #548]	; (8002748 <MX_GPIO_Init+0x244>)
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b87      	ldr	r3, [pc, #540]	; (8002748 <MX_GPIO_Init+0x244>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	4b83      	ldr	r3, [pc, #524]	; (8002748 <MX_GPIO_Init+0x244>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a82      	ldr	r2, [pc, #520]	; (8002748 <MX_GPIO_Init+0x244>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b80      	ldr	r3, [pc, #512]	; (8002748 <MX_GPIO_Init+0x244>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <MX_GPIO_Init+0x244>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a7b      	ldr	r2, [pc, #492]	; (8002748 <MX_GPIO_Init+0x244>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b79      	ldr	r3, [pc, #484]	; (8002748 <MX_GPIO_Init+0x244>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b75      	ldr	r3, [pc, #468]	; (8002748 <MX_GPIO_Init+0x244>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a74      	ldr	r2, [pc, #464]	; (8002748 <MX_GPIO_Init+0x244>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <MX_GPIO_Init+0x244>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <MX_GPIO_Init+0x244>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a6d      	ldr	r2, [pc, #436]	; (8002748 <MX_GPIO_Init+0x244>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <MX_GPIO_Init+0x244>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b67      	ldr	r3, [pc, #412]	; (8002748 <MX_GPIO_Init+0x244>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a66      	ldr	r2, [pc, #408]	; (8002748 <MX_GPIO_Init+0x244>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b64      	ldr	r3, [pc, #400]	; (8002748 <MX_GPIO_Init+0x244>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RTD_LED2_BLUE_Pin|TSA_LED2_GREEN_Pin|RTD_LED1_GREEN_Pin|TSA_LED1_BLUE_Pin
 80025c2:	2200      	movs	r2, #0
 80025c4:	f241 713c 	movw	r1, #5948	; 0x173c
 80025c8:	4860      	ldr	r0, [pc, #384]	; (800274c <MX_GPIO_Init+0x248>)
 80025ca:	f003 f9d5 	bl	8005978 <HAL_GPIO_WritePin>
                          |VCU_LED_BLUE_Pin|VCU_LED_GREEN_Pin|VCU_LED_RED_Pin|SHUTDOWN_CTL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LC_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	485f      	ldr	r0, [pc, #380]	; (8002750 <MX_GPIO_Init+0x24c>)
 80025d4:	f003 f9d0 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BT_TX_Pin|BT_RESET_Pin|BT_SW_BTN_Pin|BT_P2_4_Pin
 80025d8:	2200      	movs	r2, #0
 80025da:	f24e 5180 	movw	r1, #58752	; 0xe580
 80025de:	485d      	ldr	r0, [pc, #372]	; (8002754 <MX_GPIO_Init+0x250>)
 80025e0:	f003 f9ca 	bl	8005978 <HAL_GPIO_WritePin>
                          |BT_P2_0_Pin|BT_EAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RTD_LED2_BLUE_Pin|TSA_LED2_GREEN_Pin|RTD_LED1_GREEN_Pin|TSA_LED1_BLUE_Pin
 80025e4:	f241 733c 	movw	r3, #5948	; 0x173c
 80025e8:	61fb      	str	r3, [r7, #28]
                          |VCU_LED_BLUE_Pin|VCU_LED_GREEN_Pin|VCU_LED_RED_Pin|SHUTDOWN_CTL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	4853      	ldr	r0, [pc, #332]	; (800274c <MX_GPIO_Init+0x248>)
 80025fe:	f003 f80f 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE11 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13
 8002602:	f64e 03c3 	movw	r3, #59587	; 0xe8c3
 8002606:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	484d      	ldr	r0, [pc, #308]	; (800274c <MX_GPIO_Init+0x248>)
 8002618:	f003 f802 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3
                           PC4 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800261c:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8002620:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002622:	2303      	movs	r3, #3
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4849      	ldr	r0, [pc, #292]	; (8002758 <MX_GPIO_Init+0x254>)
 8002632:	f002 fff5 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002636:	2303      	movs	r3, #3
 8002638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263a:	2303      	movs	r3, #3
 800263c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4844      	ldr	r0, [pc, #272]	; (800275c <MX_GPIO_Init+0x258>)
 800264a:	f002 ffe9 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LC_LED_Pin|TC_LED_Pin;
 800264e:	2303      	movs	r3, #3
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	483a      	ldr	r0, [pc, #232]	; (8002750 <MX_GPIO_Init+0x24c>)
 8002666:	f002 ffdb 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRACTION_BTN_Pin;
 800266a:	2320      	movs	r3, #32
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRACTION_BTN_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	4836      	ldr	r0, [pc, #216]	; (8002758 <MX_GPIO_Init+0x254>)
 800267e:	f002 ffcf 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TSA_BTN_Pin|RTD_BTN_Pin|LAUNCH_BTN_Pin;
 8002682:	2307      	movs	r3, #7
 8002684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	4832      	ldr	r0, [pc, #200]	; (8002760 <MX_GPIO_Init+0x25c>)
 8002696:	f002 ffc3 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB15
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
 800269a:	f24b 4380 	movw	r3, #46208	; 0xb480
 800269e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	482c      	ldr	r0, [pc, #176]	; (8002760 <MX_GPIO_Init+0x25c>)
 80026b0:	f002 ffb6 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = BT_TX_Pin|BT_RESET_Pin|BT_SW_BTN_Pin|BT_P2_4_Pin
 80026b4:	f24e 5380 	movw	r3, #58752	; 0xe580
 80026b8:	61fb      	str	r3, [r7, #28]
                          |BT_P2_0_Pin|BT_EAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ba:	2301      	movs	r3, #1
 80026bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4821      	ldr	r0, [pc, #132]	; (8002754 <MX_GPIO_Init+0x250>)
 80026ce:	f002 ffa7 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BT_RX_Pin|BT_NCTS_Pin|BT_NRTS_Pin|SHUTDOWN_TAP_Pin;
 80026d2:	f44f 53d2 	mov.w	r3, #6720	; 0x1a40
 80026d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e0:	f107 031c 	add.w	r3, r7, #28
 80026e4:	4619      	mov	r1, r3
 80026e6:	481b      	ldr	r0, [pc, #108]	; (8002754 <MX_GPIO_Init+0x250>)
 80026e8:	f002 ff9a 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80026f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f2:	2303      	movs	r3, #3
 80026f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	4813      	ldr	r0, [pc, #76]	; (8002750 <MX_GPIO_Init+0x24c>)
 8002702:	f002 ff8d 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002706:	233f      	movs	r3, #63	; 0x3f
 8002708:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	480e      	ldr	r0, [pc, #56]	; (8002754 <MX_GPIO_Init+0x250>)
 800271a:	f002 ff81 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_CAN_RX_Pin|SENSOR_CAN_TX_Pin;
 800271e:	2360      	movs	r3, #96	; 0x60
 8002720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800272e:	2309      	movs	r3, #9
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <MX_GPIO_Init+0x25c>)
 800273a:	f002 ff71 	bl	8005620 <HAL_GPIO_Init>

}
 800273e:	bf00      	nop
 8002740:	3730      	adds	r7, #48	; 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40021000 	.word	0x40021000
 8002750:	40020000 	.word	0x40020000
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40020800 	.word	0x40020800
 800275c:	40021c00 	.word	0x40021c00
 8002760:	40020400 	.word	0x40020400

08002764 <StartAcuHeartbeatTask>:
 * heartbeat_master_task
 *
 * @Brief: This task is used to check if the ACB is reachable as well as send
 * heartbeat messages to the ACB
 */
void StartAcuHeartbeatTask(void *argument){
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

	BaseType_t retRTOS;
	uint32_t ulNotifiedValue = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
	acb_connection_state = HEARTBEAT_NONE;
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
	uint8_t misses = 0; //indicates how many cycles we have gone without detecting ACB
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

	for(;;){
		//send heartbeat message to ACB
		send_ACB_mesg(CAN_HEARTBEAT_REQUEST);
 800277a:	2008      	movs	r0, #8
 800277c:	f7fe fb24 	bl	8000dc8 <send_ACB_mesg>

		//Check if ACB has sent a message
		retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, HEARTBEAT_TASK_DELAY_MS);
 8002780:	f107 020c 	add.w	r2, r7, #12
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	2100      	movs	r1, #0
 8002788:	2000      	movs	r0, #0
 800278a:	f007 fbcb 	bl	8009f24 <xTaskNotifyWait>
 800278e:	6138      	str	r0, [r7, #16]

		//check if the ACB responded
		if(retRTOS == pdTRUE && ulNotifiedValue == HEARTBEAT_RESPONSE_NOTIFY){
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d119      	bne.n	80027ca <StartAcuHeartbeatTask+0x66>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d116      	bne.n	80027ca <StartAcuHeartbeatTask+0x66>
			//received notification from ACB

			//reset misses counter
			misses = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]

			//check if we have previously lost the ACB
			if(acb_connection_state == HEARTBEAT_LOST){
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d104      	bne.n	80027b2 <StartAcuHeartbeatTask+0x4e>
				logMessage("Heartbeat: ACB re-connection", true);
 80027a8:	2101      	movs	r1, #1
 80027aa:	482d      	ldr	r0, [pc, #180]	; (8002860 <StartAcuHeartbeatTask+0xfc>)
 80027ac:	f000 f9c8 	bl	8002b40 <logMessage>
 80027b0:	e007      	b.n	80027c2 <StartAcuHeartbeatTask+0x5e>
			}
			else if(acb_connection_state == HEARTBEAT_NONE){
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <StartAcuHeartbeatTask+0x5e>
				//connecting with acb for first time
				logMessage("Heartbeat: Made connection with ACB", true);
 80027ba:	2101      	movs	r1, #1
 80027bc:	4829      	ldr	r0, [pc, #164]	; (8002864 <StartAcuHeartbeatTask+0x100>)
 80027be:	f000 f9bf 	bl	8002b40 <logMessage>
			}

			//set state
			acb_connection_state = HEARTBEAT_PRESENT;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e02e      	b.n	8002828 <StartAcuHeartbeatTask+0xc4>
		}
		else{
			//did not receive notification from ACB
			if(acb_connection_state == HEARTBEAT_PRESENT){
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d111      	bne.n	80027f6 <StartAcuHeartbeatTask+0x92>

				if(misses < HEARTBEAT_MAX_MISSES){
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d806      	bhi.n	80027e6 <StartAcuHeartbeatTask+0x82>
					//losing ACB
					misses++;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	3301      	adds	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]

					//just for safety
					acb_connection_state = HEARTBEAT_PRESENT;
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e020      	b.n	8002828 <StartAcuHeartbeatTask+0xc4>
				}
				else{
					//lost ACB
					acb_connection_state = HEARTBEAT_LOST;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
					logMessage("Heartbeat: Lost Connection with ACB", true);
 80027ec:	2101      	movs	r1, #1
 80027ee:	481e      	ldr	r0, [pc, #120]	; (8002868 <StartAcuHeartbeatTask+0x104>)
 80027f0:	f000 f9a6 	bl	8002b40 <logMessage>
 80027f4:	e018      	b.n	8002828 <StartAcuHeartbeatTask+0xc4>
				}
			}
			else if(acb_connection_state == HEARTBEAT_NONE ){
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d111      	bne.n	8002822 <StartAcuHeartbeatTask+0xbe>
				if(misses < HEARTBEAT_MAX_MISSES){
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d806      	bhi.n	8002812 <StartAcuHeartbeatTask+0xae>
					//losing ACB
					misses++;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	3301      	adds	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]

					//just for safety
					acb_connection_state = HEARTBEAT_NONE;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e00a      	b.n	8002828 <StartAcuHeartbeatTask+0xc4>

				}
				else{
					//lost ACB
					acb_connection_state = HEARTBEAT_NONE;
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <StartAcuHeartbeatTask+0xf8>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
					logMessage("Heartbeat: Could not connect with ACB", true);
 8002818:	2101      	movs	r1, #1
 800281a:	4814      	ldr	r0, [pc, #80]	; (800286c <StartAcuHeartbeatTask+0x108>)
 800281c:	f000 f990 	bl	8002b40 <logMessage>
 8002820:	e002      	b.n	8002828 <StartAcuHeartbeatTask+0xc4>
				}
			}
			else{
				//acb_connection_state = HEARTBEAT_LOST_ACB;
				led_mgmt_set_error(DASH_NO_ACB);
 8002822:	2005      	movs	r0, #5
 8002824:	f7ff fc42 	bl	80020ac <led_mgmt_set_error>
			}
		}


		//do dash leds and indicators
		if(get_mc_heartbeat_State() == HEARTBEAT_PRESENT && get_acu_heartbeat_State()==HEARTBEAT_PRESENT){
 8002828:	f000 f882 	bl	8002930 <get_mc_heartbeat_State>
 800282c:	4603      	mov	r3, r0
 800282e:	2b02      	cmp	r3, #2
 8002830:	d10c      	bne.n	800284c <StartAcuHeartbeatTask+0xe8>
 8002832:	f000 f871 	bl	8002918 <get_acu_heartbeat_State>
 8002836:	4603      	mov	r3, r0
 8002838:	2b02      	cmp	r3, #2
 800283a:	d107      	bne.n	800284c <StartAcuHeartbeatTask+0xe8>
		  //heartbeat all good
      logIndicator(false, NO_ACB);
 800283c:	2103      	movs	r1, #3
 800283e:	2000      	movs	r0, #0
 8002840:	f000 f958 	bl	8002af4 <logIndicator>
      led_mgmt_clear_error(DASH_NO_ACB);
 8002844:	2005      	movs	r0, #5
 8002846:	f7ff fc43 	bl	80020d0 <led_mgmt_clear_error>
 800284a:	e006      	b.n	800285a <StartAcuHeartbeatTask+0xf6>
		}
		else{
		  //heartbeat sadness
		  led_mgmt_set_error(DASH_NO_ACB);
 800284c:	2005      	movs	r0, #5
 800284e:	f7ff fc2d 	bl	80020ac <led_mgmt_set_error>
		  logIndicator(true, NO_ACB);
 8002852:	2103      	movs	r1, #3
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f94d 	bl	8002af4 <logIndicator>
		send_ACB_mesg(CAN_HEARTBEAT_REQUEST);
 800285a:	e78e      	b.n	800277a <StartAcuHeartbeatTask+0x16>
 800285c:	20000d5c 	.word	0x20000d5c
 8002860:	0800cc10 	.word	0x0800cc10
 8002864:	0800cc30 	.word	0x0800cc30
 8002868:	0800cc54 	.word	0x0800cc54
 800286c:	0800cc78 	.word	0x0800cc78

08002870 <StartMcHeartbeatTask>:
 * heartbeat_master_task
 *
 * @Brief: This task is used to check if the Motor Controller is reachable as well as send
 * heartbeat messages to the Motor Controller
 */
void StartMcHeartbeatTask(void *argument){
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  BaseType_t retRTOS;
  uint32_t ulNotifiedValue = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  mc_connection_state = HEARTBEAT_NONE;
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <StartMcHeartbeatTask+0x98>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
  uint8_t misses = 0; //indicates how many cycles we have gone without detecting ACB
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  for(;;){

    //Check if MC has sent a message
    retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, HEARTBEAT_TASK_DELAY_MS);
 8002886:	f107 020c 	add.w	r2, r7, #12
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	2100      	movs	r1, #0
 800288e:	2000      	movs	r0, #0
 8002890:	f007 fb48 	bl	8009f24 <xTaskNotifyWait>
 8002894:	6138      	str	r0, [r7, #16]
    if(retRTOS == pdPASS){
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d116      	bne.n	80028ca <StartMcHeartbeatTask+0x5a>
      misses = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]

      //log connection
      if(mc_connection_state == HEARTBEAT_NONE){
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <StartMcHeartbeatTask+0x42>
        logMessage("HEARTBEAT: Connected with MC", false);
 80028a8:	2100      	movs	r1, #0
 80028aa:	4818      	ldr	r0, [pc, #96]	; (800290c <StartMcHeartbeatTask+0x9c>)
 80028ac:	f000 f948 	bl	8002b40 <logMessage>
 80028b0:	e007      	b.n	80028c2 <StartMcHeartbeatTask+0x52>
      }
      else if(mc_connection_state == HEARTBEAT_LOST){
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d103      	bne.n	80028c2 <StartMcHeartbeatTask+0x52>
        logMessage("HEARTBEAT: Reconnected with MC", false);
 80028ba:	2100      	movs	r1, #0
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <StartMcHeartbeatTask+0xa0>)
 80028be:	f000 f93f 	bl	8002b40 <logMessage>
      }

      //set connection state
      mc_connection_state = HEARTBEAT_PRESENT;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e7dd      	b.n	8002886 <StartMcHeartbeatTask+0x16>

    }
    else{
      if(misses < HEARTBEAT_MAX_MISSES){
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d803      	bhi.n	80028d8 <StartMcHeartbeatTask+0x68>
        misses++;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	3301      	adds	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
 80028d6:	e7d6      	b.n	8002886 <StartMcHeartbeatTask+0x16>
      }
      else if(misses >= HEARTBEAT_MAX_MISSES){
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d9d3      	bls.n	8002886 <StartMcHeartbeatTask+0x16>

        //log loss of mc if was just lost
        if(mc_connection_state == HEARTBEAT_PRESENT){
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d103      	bne.n	80028ee <StartMcHeartbeatTask+0x7e>
          logMessage("HEARTBEAT: LOST MC", false);
 80028e6:	2100      	movs	r1, #0
 80028e8:	480a      	ldr	r0, [pc, #40]	; (8002914 <StartMcHeartbeatTask+0xa4>)
 80028ea:	f000 f929 	bl	8002b40 <logMessage>
        }


        if(mc_connection_state == HEARTBEAT_NONE){
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <StartMcHeartbeatTask+0x8e>
          mc_connection_state = HEARTBEAT_NONE; //still haven't connected yet
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <StartMcHeartbeatTask+0x98>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e7c3      	b.n	8002886 <StartMcHeartbeatTask+0x16>
        }
        else{
          //was previously connected to MC
          mc_connection_state = HEARTBEAT_LOST;
 80028fe:	4b02      	ldr	r3, [pc, #8]	; (8002908 <StartMcHeartbeatTask+0x98>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, HEARTBEAT_TASK_DELAY_MS);
 8002904:	e7bf      	b.n	8002886 <StartMcHeartbeatTask+0x16>
 8002906:	bf00      	nop
 8002908:	20000d5d 	.word	0x20000d5d
 800290c:	0800cca0 	.word	0x0800cca0
 8002910:	0800ccc0 	.word	0x0800ccc0
 8002914:	0800cce0 	.word	0x0800cce0

08002918 <get_acu_heartbeat_State>:
/*
 * get_acu_hearbeat_State
 *
 * @Brief: This method is used to get the current state of heartbeat
 */
heatbeat_state_t get_acu_heartbeat_State(){
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
	return acb_connection_state;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <get_acu_heartbeat_State+0x14>)
 800291e:	781b      	ldrb	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000d5c 	.word	0x20000d5c

08002930 <get_mc_heartbeat_State>:
/*
 * get_mc_hearbeat_State
 *
 * @Brief: This method is used to get the current state of heartbeat
 */
heatbeat_state_t get_mc_heartbeat_State(){
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return mc_connection_state;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <get_mc_heartbeat_State+0x14>)
 8002936:	781b      	ldrb	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000d5d 	.word	0x20000d5d

08002948 <heartbeat_MC_get_task>:

osThreadId_t heartbeat_ACU_get_task(){
    return acuHrtbeatTaskHandle;
}

osThreadId_t heartbeat_MC_get_task(){
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
    return mcHrtbeatTaskHandle;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <heartbeat_MC_get_task+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000d4c 	.word	0x20000d4c

08002960 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_IWDG_Init+0x30>)
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <MX_IWDG_Init+0x34>)
 8002968:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_IWDG_Init+0x30>)
 800296c:	2206      	movs	r2, #6
 800296e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 500;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <MX_IWDG_Init+0x30>)
 8002972:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002976:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_IWDG_Init+0x30>)
 800297a:	f003 f816 	bl	80059aa <HAL_IWDG_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002984:	f000 fa3c 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  initWdEventGroup();
 8002988:	f000 f806 	bl	8002998 <initWdEventGroup>

  /* USER CODE END IWDG_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000d64 	.word	0x20000d64
 8002994:	40003000 	.word	0x40003000

08002998 <initWdEventGroup>:
/*
 * initWdEventGroup
 *
 * @brief this function sets up the watchdog event group. This event group is used for monitoring critical tasks
 */
static void initWdEventGroup(){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
    configASSERT(wdEvGroup == NULL);
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <initWdEventGroup+0x48>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <initWdEventGroup+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <initWdEventGroup+0x22>
    wdEvGroup = xEventGroupCreate();
 80029bc:	f005 f964 	bl	8007c88 <xEventGroupCreate>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <initWdEventGroup+0x48>)
 80029c4:	6013      	str	r3, [r2, #0]

    /* Was the event group created successfully? */
    if( wdEvGroup == NULL )
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <initWdEventGroup+0x48>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <initWdEventGroup+0x3e>
    {
        /* The event group was not created because there was insufficient FreeRTOS heap available. */
        log_and_handle_error(IWDG_ERROR, wdErrorHandler);
 80029ce:	4905      	ldr	r1, [pc, #20]	; (80029e4 <initWdEventGroup+0x4c>)
 80029d0:	2006      	movs	r0, #6
 80029d2:	f7ff fc21 	bl	8002218 <log_and_handle_error>
    }
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000d60 	.word	0x20000d60
 80029e4:	08002a69 	.word	0x08002a69

080029e8 <wd_criticalTaskKick>:
 * @brief this function is used for allowing critical tasks to notify the watchdog that they have not hanged yet
 *
 * @WD_CRITICALTASK the critical task notifying the watchdog that it has not hung yet
 *
 */
void wd_criticalTaskKick(enum WD_CRITICALTASK task){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
    configASSERT(wdEvGroup != NULL);
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <wd_criticalTaskKick+0x44>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <wd_criticalTaskKick+0x28>
	__asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	60fb      	str	r3, [r7, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <wd_criticalTaskKick+0x26>
    xEventGroupSetBits(wdEvGroup, 1<<task);
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <wd_criticalTaskKick+0x44>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f005 fa1a 	bl	8007e58 <xEventGroupSetBits>
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000d60 	.word	0x20000d60

08002a30 <startFromIWDG>:
 *
 * @return returns true if the system started due to a watchdog reset otherwise false
 *
 * @brief used for checking on reset if the system is starting from a watchdog reset
 */
bool startFromIWDG() {
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0

    bool startFromWD = false; //true if we started from watchdog reset
 8002a36:	2300      	movs	r3, #0
 8002a38:	71fb      	strb	r3, [r7, #7]

    /* Check if the system has resumed from IWDG reset */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) {
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <startFromIWDG+0x34>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <startFromIWDG+0x26>

        startFromWD = true;
 8002a46:	2301      	movs	r3, #1
 8002a48:	71fb      	strb	r3, [r7, #7]

        /* Clear reset flags */
        __HAL_RCC_CLEAR_RESET_FLAGS();
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <startFromIWDG+0x34>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <startFromIWDG+0x34>)
 8002a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a54:	6753      	str	r3, [r2, #116]	; 0x74
    }

    return startFromWD;
 8002a56:	79fb      	ldrb	r3, [r7, #7]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40023800 	.word	0x40023800

08002a68 <wdErrorHandler>:
/*
 * wdErrorHandler
 *
 *@brief this function tries to fix the watchdog error handler
 */
void wdErrorHandler() {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
    logMessage("Failed to create IWDG task", true);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4802      	ldr	r0, [pc, #8]	; (8002a78 <wdErrorHandler+0x10>)
 8002a70:	f000 f866 	bl	8002b40 <logMessage>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	0800ccf4 	.word	0x0800ccf4

08002a7c <StartWatchDogTask>:
/*
 * wdTask
 *
 * @brief RTOS task for periodically kicking the watchdog
 */
void StartWatchDogTask(void *argument) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	6078      	str	r0, [r7, #4]
    while (1) {

        //kick the watchdog
        HAL_IWDG_Refresh(&hiwdg);
 8002a84:	4808      	ldr	r0, [pc, #32]	; (8002aa8 <StartWatchDogTask+0x2c>)
 8002a86:	f002 ffd2 	bl	8005a2e <HAL_IWDG_Refresh>

        //testIWDGReset(); //comment this out when not testing

        //wait a bit then wait for syncing
        HAL_Delay(WDPERIOD);
 8002a8a:	2032      	movs	r0, #50	; 0x32
 8002a8c:	f001 fc0c 	bl	80042a8 <HAL_Delay>
        //((1<<wd_NumCriticalTasks)-1) this will give us all the bits for all the critical tasks
        xEventGroupWaitBits(wdEvGroup, ((1<<wd_NumCriticalTasks)-1), pdTRUE, pdTRUE, 500);//wait for all the critical tasks to kick
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <StartWatchDogTask+0x30>)
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2107      	movs	r1, #7
 8002aa0:	f005 f90c 	bl	8007cbc <xEventGroupWaitBits>
        HAL_IWDG_Refresh(&hiwdg);
 8002aa4:	e7ee      	b.n	8002a84 <StartWatchDogTask+0x8>
 8002aa6:	bf00      	nop
 8002aa8:	20000d64 	.word	0x20000d64
 8002aac:	20000d60 	.word	0x20000d60

08002ab0 <logInitialize>:
/*
 * logInitialize()
 *
 * Initializes the SD card and readies the Bluetooth packet
 */
bool logInitialize() {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	//Ensures it isn't already initialized, and initializes the SD and BT
	if(!LOGGING_INITIALIZED) {
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <logInitialize+0x3c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <logInitialize+0x34>
		//On success, set the bool flag and return true
		LOGGING_INITIALIZED = true;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <logInitialize+0x3c>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
        if(!btInitialize()) {
 8002ac8:	f7fe fd2c 	bl	8001524 <btInitialize>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <logInitialize+0x30>
            logMessage("Failed to initialize BT", false);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <logInitialize+0x40>)
 8002adc:	f000 f830 	bl	8002b40 <logMessage>
        }
		return true;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <logInitialize+0x36>
	}
	//Return false on any init failures
	return false;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000d70 	.word	0x20000d70
 8002af0:	0800cd10 	.word	0x0800cd10

08002af4 <logIndicator>:
 * Log a indicator value to be added to the Bluetooth packet
 *
 * value = Bool value of the indicator
 * indc = An indicator that has been defined in the enum typedef in logger.h
 */
void logIndicator(bool value, INDICATOR indc) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	460a      	mov	r2, r1
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71bb      	strb	r3, [r7, #6]
	if(LOGGING_INITIALIZED) {
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <logIndicator+0x30>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <logIndicator+0x28>
		btUpdateData((void *)&value, NUM_OF_SENSORS+indc);
 8002b0c:	79bb      	ldrb	r3, [r7, #6]
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fd4e 	bl	80015b8 <btUpdateData>
	}
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000d70 	.word	0x20000d70

08002b28 <enableVCULogging>:

/**
 * Enables the VCU to start the logging process
 */
void enableVCULogging() {
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
	VCU_loggingReady = 1;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <enableVCULogging+0x14>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000d74 	.word	0x20000d74

08002b40 <logMessage>:
 * Log a diagnostics message, by sending it to the ACB in 8 byte chunks
 *
 * data = Char array (String) that contains the message
 * critical = Boolean flag on if the message is critical, bypassing the log buffer
 */
void logMessage(char *data, bool critical) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
	if (VCU_loggingReady && LOGGING_INITIALIZED) {
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <logMessage+0xa4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d042      	beq.n	8002bda <logMessage+0x9a>
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <logMessage+0xa8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03e      	beq.n	8002bda <logMessage+0x9a>
		int sliceAmount = strlen(data - 1) / 8 + 1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fb5f 	bl	8000224 <strlen>
 8002b66:	4603      	mov	r3, r0
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]

		int letterCounter = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
		int exit = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
		char slicedMesg[8];
		int i = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]

		//Loop for each slice, breaking it down into chunks of 8
		for (int slice = 0; slice < sliceAmount && !exit; slice++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e025      	b.n	8002bcc <logMessage+0x8c>
			//Go through 1 of the chunks
			for (i = 0; i < 8 && !exit; i++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e019      	b.n	8002bba <logMessage+0x7a>
				exit = (data[letterCounter] == '\0');
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	623b      	str	r3, [r7, #32]
				slicedMesg[i] = data[letterCounter];
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	7819      	ldrb	r1, [r3, #0]
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	460a      	mov	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
				letterCounter++;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
			for (i = 0; i < 8 && !exit; i++) {
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	dc02      	bgt.n	8002bc6 <logMessage+0x86>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0df      	beq.n	8002b86 <logMessage+0x46>
		for (int slice = 0; slice < sliceAmount && !exit; slice++) {
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	da02      	bge.n	8002bda <logMessage+0x9a>
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0d2      	beq.n	8002b80 <logMessage+0x40>
			}
			//Send the chunk of the message over CAN
			//sendCan(CAN1, slicedMesg, i, CAN_VCU_CAN_ID, CAN_NO_EXT, CAN_NO_EXT);
		}
	}
}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000d74 	.word	0x20000d74
 8002be8:	20000d70 	.word	0x20000d70

08002bec <logSensor>:
 * Log a sensor value to the SD card and Bluetooth packet
 *
 * value = Float value of the sensor
 * sens = A sensor that has been defined in the enum typedef in logger.h
 */
void logSensor(float value, SENSOR sens) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	70fb      	strb	r3, [r7, #3]
	if(LOGGING_INITIALIZED) {
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <logSensor+0x2c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <logSensor+0x22>
        btUpdateData((void *)&value, sens);
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fcd5 	bl	80015b8 <btUpdateData>
	}
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000d70 	.word	0x20000d70
 8002c1c:	00000000 	.word	0x00000000

08002c20 <lv_battery_voltage>:
 * lv_battery_voltage
 * This function polls the low voltage battery voltage
 *
 * @return returns the low voltage battery voltage in [Volts]
 */
float lv_battery_voltage(){
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
	uint32_t myVal = ADC_get_val(ADC_VBATT);
 8002c26:	2003      	movs	r0, #3
 8002c28:	f7fe fa00 	bl	800102c <ADC_get_val>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	607b      	str	r3, [r7, #4]


	return VOLTAGE_RATIO*Vsupply*(((float)ADC_get_val(ADC_VBATT)) / MAX_ADC_VAL);
 8002c30:	a118      	add	r1, pc, #96	; (adr r1, 8002c94 <lv_battery_voltage+0x74>)
 8002c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c36:	a319      	add	r3, pc, #100	; (adr r3, 8002c9c <lv_battery_voltage+0x7c>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fb50 	bl	80002e0 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f7fe f9ef 	bl	800102c <ADC_get_val>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c58:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c90 <lv_battery_voltage+0x70>
 8002c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c60:	ee16 0a90 	vmov	r0, s13
 8002c64:	f7fd fdca 	bl	80007fc <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fb36 	bl	80002e0 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd febe 	bl	80009fc <__aeabi_d2f>
 8002c80:	4603      	mov	r3, r0
 8002c82:	ee07 3a90 	vmov	s15, r3
}
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	457ff000 	.word	0x457ff000
 8002c94:	e147ae14 	.word	0xe147ae14
 8002c98:	400a147a 	.word	0x400a147a
 8002c9c:	66666666 	.word	0x66666666
 8002ca0:	40146666 	.word	0x40146666

08002ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca8:	f001 fabc 	bl	8004224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cac:	f000 f834 	bl	8002d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cb0:	f7ff fc28 	bl	8002504 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cb4:	f7ff fa90 	bl	80021d8 <MX_DMA_Init>
  MX_CAN1_Init();
 8002cb8:	f7fe fe58 	bl	800196c <MX_CAN1_Init>
  MX_USART2_Init();
 8002cbc:	f000 ffa6 	bl	8003c0c <MX_USART2_Init>
  MX_TIM12_Init();
 8002cc0:	f000 fef0 	bl	8003aa4 <MX_TIM12_Init>
  MX_IWDG_Init();
 8002cc4:	f7ff fe4c 	bl	8002960 <MX_IWDG_Init>
  MX_ADC1_Init();
 8002cc8:	f7fe f896 	bl	8000df8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    dash_set_all_leds();
 8002ccc:	f7ff f93c 	bl	8001f48 <dash_set_all_leds>

    if(!logInitialize()){
 8002cd0:	f7ff feee 	bl	8002ab0 <logInitialize>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <main+0x44>
        vcu_debug_led(REDLED, true);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff f9aa 	bl	800203c <vcu_debug_led>
    }

    checkStartupCondition();
 8002ce8:	f000 fcce 	bl	8003688 <checkStartupCondition>
    enableVCULogging();
 8002cec:	f7ff ff1c 	bl	8002b28 <enableVCULogging>

    dash_clear_all_leds();
 8002cf0:	f7ff f910 	bl	8001f14 <dash_clear_all_leds>

    vcu_debug_led(GREENLED, true);
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f7ff f9a0 	bl	800203c <vcu_debug_led>
    logMessage("INIT: Starting Scheduler", true);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <main+0x70>)
 8002d00:	f7ff ff1e 	bl	8002b40 <logMessage>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002d04:	f004 fe46 	bl	8007994 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002d08:	f7ff fb56 	bl	80023b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d0c:	f004 fe66 	bl	80079dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <main+0x6c>
 8002d12:	bf00      	nop
 8002d14:	0800cd28 	.word	0x0800cd28

08002d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b094      	sub	sp, #80	; 0x50
 8002d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	2234      	movs	r2, #52	; 0x34
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f008 fd71 	bl	800b80e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <SystemClock_Config+0xbc>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <SystemClock_Config+0xbc>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <SystemClock_Config+0xbc>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <SystemClock_Config+0xc0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d64:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <SystemClock_Config+0xc0>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <SystemClock_Config+0xc0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d78:	230a      	movs	r3, #10
 8002d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d80:	2310      	movs	r3, #16
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d84:	2301      	movs	r3, #1
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 f953 	bl	800603c <HAL_RCC_OscConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002d9c:	f000 f830 	bl	8002e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da0:	230f      	movs	r3, #15
 8002da2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fe48 	bl	8005a50 <HAL_RCC_ClockConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002dc6:	f000 f81b 	bl	8002e00 <Error_Handler>
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40007000 	.word	0x40007000

08002ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dee:	f001 fa3b 	bl	8004268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40014400 	.word	0x40014400

08002e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
  //TODO LEDs
  //TODO Error Handling
  __disable_irq();
  while (1)
  {
      HAL_USART_Transmit(&husart2, (uint8_t*) "ERROR\r\n\0", 10, 10);
 8002e08:	230a      	movs	r3, #10
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	4904      	ldr	r1, [pc, #16]	; (8002e20 <Error_Handler+0x20>)
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <Error_Handler+0x24>)
 8002e10:	f004 f9fe 	bl	8007210 <HAL_USART_Transmit>
      HAL_Delay(500);
 8002e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e18:	f001 fa46 	bl	80042a8 <HAL_Delay>
      HAL_USART_Transmit(&husart2, (uint8_t*) "ERROR\r\n\0", 10, 10);
 8002e1c:	e7f4      	b.n	8002e08 <Error_Handler+0x8>
 8002e1e:	bf00      	nop
 8002e20:	0800cd44 	.word	0x0800cd44
 8002e24:	20000e28 	.word	0x20000e28

08002e28 <mc_getAverageIGBTTemp>:

/*
 * GETTERS
 */

float mc_getAverageIGBTTemp() {
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
	return (mc_igbtA_temp + mc_igbtB_temp + mc_igbtC_temp) / 30;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <mc_getAverageIGBTTemp+0x40>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <mc_getAverageIGBTTemp+0x44>)
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <mc_getAverageIGBTTemp+0x48>)
 8002e3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e42:	4413      	add	r3, r2
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <mc_getAverageIGBTTemp+0x4c>)
 8002e46:	fb82 1203 	smull	r1, r2, r2, r3
 8002e4a:	441a      	add	r2, r3
 8002e4c:	1112      	asrs	r2, r2, #4
 8002e4e:	17db      	asrs	r3, r3, #31
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000d82 	.word	0x20000d82
 8002e6c:	20000d84 	.word	0x20000d84
 8002e70:	20000d86 	.word	0x20000d86
 8002e74:	88888889 	.word	0x88888889

08002e78 <mc_getMotorTemp>:

float mc_getIGBTCTemp() {
	return mc_igbtA_temp / 10;
}

float mc_getMotorTemp() {
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	return mc_motor_temp / 10;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <mc_getMotorTemp+0x2c>)
 8002e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <mc_getMotorTemp+0x30>)
 8002e84:	fb82 1203 	smull	r1, r2, r2, r3
 8002e88:	1092      	asrs	r2, r2, #2
 8002e8a:	17db      	asrs	r3, r3, #31
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	20000d88 	.word	0x20000d88
 8002ea8:	66666667 	.word	0x66666667

08002eac <mc_getBusCurrent>:

float mc_getBusVoltage() {
	return bus_voltage / 10;
}

float mc_getBusCurrent() {
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
	return bus_current * 10;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <mc_getBusCurrent+0x28>)
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	20000d7a 	.word	0x20000d7a

08002ed8 <mc_set_inverter_enable>:

/**
 * @brief Function to enable or disable inverter.
 * @param setEnable: 0x00 is disabled, 0x01 is enabled
 */
void mc_set_inverter_enable(uint8_t setEnable) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
	mc_enable_inverter = setEnable;
 8002ee2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <mc_set_inverter_enable+0x20>)
 8002ee8:	701a      	strb	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000d90 	.word	0x20000d90

08002efc <mc_process_temp1_can>:

/**
 * PACKET PROCESSING
 */

void mc_process_temp1_can(uint8_t * data) {
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	mc_igbtA_temp = (data[1] << 8) | data[0];
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3301      	adds	r3, #1
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b21a      	sxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b21a      	sxth	r2, r3
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <mc_process_temp1_can+0x60>)
 8002f1a:	801a      	strh	r2, [r3, #0]
	mc_igbtB_temp = (data[3] << 8) | data[2];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b21a      	sxth	r2, r3
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <mc_process_temp1_can+0x64>)
 8002f34:	801a      	strh	r2, [r3, #0]
	mc_igbtC_temp = (data[5] << 8) | data[4];
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3305      	adds	r3, #5
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <mc_process_temp1_can+0x68>)
 8002f4e:	801a      	strh	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	20000d82 	.word	0x20000d82
 8002f60:	20000d84 	.word	0x20000d84
 8002f64:	20000d86 	.word	0x20000d86

08002f68 <mc_process_temp3_can>:

void mc_process_temp3_can(uint8_t * data) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	mc_motor_temp = (data[5] << 8) | data[4];
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3305      	adds	r3, #5
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <mc_process_temp3_can+0x30>)
 8002f88:	801a      	strh	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000d88 	.word	0x20000d88

08002f9c <fixFaults>:

void fixFaults() {
 8002f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	466b      	mov	r3, sp
 8002fa6:	4698      	mov	r8, r3
	uint8_t len = 8;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	73fb      	strb	r3, [r7, #15]
	uint8_t data[len];
 8002fac:	7bfe      	ldrb	r6, [r7, #15]
 8002fae:	4633      	mov	r3, r6
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	b2f3      	uxtb	r3, r6
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	461c      	mov	r4, r3
 8002fba:	4615      	mov	r5, r2
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	00eb      	lsls	r3, r5, #3
 8002fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fca:	00e2      	lsls	r2, r4, #3
 8002fcc:	b2f3      	uxtb	r3, r6
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	00cb      	lsls	r3, r1, #3
 8002fde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fe2:	00c2      	lsls	r2, r0, #3
 8002fe4:	4633      	mov	r3, r6
 8002fe6:	3307      	adds	r3, #7
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	ebad 0d03 	sub.w	sp, sp, r3
 8002ff0:	ab02      	add	r3, sp, #8
 8002ff2:	3300      	adds	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
	uint8_t dest = 0xC1;
 8002ff6:	23c1      	movs	r3, #193	; 0xc1
 8002ff8:	70fb      	strb	r3, [r7, #3]

	uint8_t ret = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	70bb      	strb	r3, [r7, #2]

	data[0] = 20;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2214      	movs	r2, #20
 8003002:	701a      	strb	r2, [r3, #0]
	data[1] = 0;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	705a      	strb	r2, [r3, #1]
	data[2] = 1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	709a      	strb	r2, [r3, #2]
	data[3] = 0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	70da      	strb	r2, [r3, #3]
	data[4] = 0;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	711a      	strb	r2, [r3, #4]
	data[5] = 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	715a      	strb	r2, [r3, #5]
	data[6] = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	719a      	strb	r2, [r3, #6]
	data[7] = 0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	71da      	strb	r2, [r3, #7]

	ret = sendCan(CAN1, data, len, dest, CAN_NO_RTR, CAN_NO_EXT);
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2100      	movs	r1, #0
 8003034:	9101      	str	r1, [sp, #4]
 8003036:	2100      	movs	r1, #0
 8003038:	9100      	str	r1, [sp, #0]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	480a      	ldr	r0, [pc, #40]	; (8003068 <fixFaults+0xcc>)
 800303e:	f7fe fd11 	bl	8001a64 <sendCan>
 8003042:	4603      	mov	r3, r0
 8003044:	70bb      	strb	r3, [r7, #2]
	if (ret != 0) {
 8003046:	78bb      	ldrb	r3, [r7, #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <fixFaults+0xc0>
		//can error, log it
		log_and_handle_error(ERROR_CAN_ONE_TX_FAIL, NULL);
 800304c:	2100      	movs	r1, #0
 800304e:	2008      	movs	r0, #8
 8003050:	f7ff f8e2 	bl	8002218 <log_and_handle_error>
		logMessage("MC: Failed to send MC command CAN packet\n", false); //should be critical??
 8003054:	2100      	movs	r1, #0
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <fixFaults+0xd0>)
 8003058:	f7ff fd72 	bl	8002b40 <logMessage>
 800305c:	46c5      	mov	sp, r8
	}
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	40006400 	.word	0x40006400
 800306c:	0800cd70 	.word	0x0800cd70

08003070 <mc_process_fast_can>:
		return;

	}
}

void mc_process_fast_can(uint8_t * data) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
#ifdef VCU
	update_heartbeat();
 8003078:	f000 f979 	bl	800336e <update_heartbeat>
#endif
	mc_torque_command = (data[1] << 8) | data[0];
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3301      	adds	r3, #1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	b21a      	sxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	b21b      	sxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b21a      	sxth	r2, r3
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <mc_process_fast_can+0xe0>)
 8003092:	801a      	strh	r2, [r3, #0]
	mc_torque_feedback = (data[3] << 8) | data[2];
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3303      	adds	r3, #3
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	b21a      	sxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3302      	adds	r3, #2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21a      	sxth	r2, r3
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <mc_process_fast_can+0xe4>)
 80030ac:	801a      	strh	r2, [r3, #0]
	mc_rpm = (data[5] << 8) | data[4];
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3305      	adds	r3, #5
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b21b      	sxth	r3, r3
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b21a      	sxth	r2, r3
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <mc_process_fast_can+0xe8>)
 80030c6:	801a      	strh	r2, [r3, #0]
	bus_voltage = (data[7] << 8) | data[6];
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3307      	adds	r3, #7
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3306      	adds	r3, #6
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	4313      	orrs	r3, r2
 80030dc:	b21a      	sxth	r2, r3
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <mc_process_fast_can+0xec>)
 80030e0:	801a      	strh	r2, [r3, #0]
	logSensor((float) bus_voltage / 10, MC_BUS_VOLTAGE_LOG);
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <mc_process_fast_can+0xec>)
 80030e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030f8:	2015      	movs	r0, #21
 80030fa:	eeb0 0a47 	vmov.f32	s0, s14
 80030fe:	f7ff fd75 	bl	8002bec <logSensor>
	logSensor((float) (mc_rpm * 117.97) / 5500, MC_ACUAL_SPEED_REG_LOG);
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <mc_process_fast_can+0xe8>)
 8003104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fb65 	bl	80007d8 <__aeabi_i2d>
 800310e:	a30e      	add	r3, pc, #56	; (adr r3, 8003148 <mc_process_fast_can+0xd8>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f7fd f8e4 	bl	80002e0 <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7fd fc6c 	bl	80009fc <__aeabi_d2f>
 8003124:	ee06 0a90 	vmov	s13, r0
 8003128:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003160 <mc_process_fast_can+0xf0>
 800312c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003130:	2003      	movs	r0, #3
 8003132:	eeb0 0a67 	vmov.f32	s0, s15
 8003136:	f7ff fd59 	bl	8002bec <logSensor>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	f3af 8000 	nop.w
 8003148:	7ae147ae 	.word	0x7ae147ae
 800314c:	405d7e14 	.word	0x405d7e14
 8003150:	20000d8c 	.word	0x20000d8c
 8003154:	20000d8e 	.word	0x20000d8e
 8003158:	20000d8a 	.word	0x20000d8a
 800315c:	20000d78 	.word	0x20000d78
 8003160:	45abe000 	.word	0x45abe000

08003164 <mc_process_current_can>:
	mc_rpm = (data[3] << 8) | data[2];
}

#endif

void mc_process_current_can(uint8_t * data) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	mc_currentA = (data[1] << 8) | data[0];
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3301      	adds	r3, #1
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	b21a      	sxth	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21a      	sxth	r2, r3
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <mc_process_current_can+0x90>)
 8003182:	801a      	strh	r2, [r3, #0]
	mc_currentB = (data[3] << 8) | data[2];
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3303      	adds	r3, #3
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3302      	adds	r3, #2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b21b      	sxth	r3, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	b21a      	sxth	r2, r3
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <mc_process_current_can+0x94>)
 800319c:	801a      	strh	r2, [r3, #0]
	mc_currentC = (data[5] << 8) | data[4];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3305      	adds	r3, #5
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <mc_process_current_can+0x98>)
 80031b6:	801a      	strh	r2, [r3, #0]
	bus_current = (data[7] << 8) | data[6];
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3307      	adds	r3, #7
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3306      	adds	r3, #6
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b21b      	sxth	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <mc_process_current_can+0x9c>)
 80031d0:	801a      	strh	r2, [r3, #0]
	logSensor((float) bus_current, MC_I_ACTUAL_LOG);
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <mc_process_current_can+0x9c>)
 80031d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e0:	200d      	movs	r0, #13
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	f7ff fd01 	bl	8002bec <logSensor>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000d7c 	.word	0x20000d7c
 80031f8:	20000d7e 	.word	0x20000d7e
 80031fc:	20000d80 	.word	0x20000d80
 8003200:	20000d7a 	.word	0x20000d7a

08003204 <sendTorque>:
	}
	return;

}

void sendTorque(int16_t torque) {
 8003204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003208:	b089      	sub	sp, #36	; 0x24
 800320a:	af02      	add	r7, sp, #8
 800320c:	4603      	mov	r3, r0
 800320e:	80fb      	strh	r3, [r7, #6]
 8003210:	466b      	mov	r3, sp
 8003212:	461e      	mov	r6, r3
	uint8_t len = 8; // DLC MUST be 8 for command message, this is the sendCan bug
 8003214:	2308      	movs	r3, #8
 8003216:	75fb      	strb	r3, [r7, #23]
		uint8_t data[len];
 8003218:	7df9      	ldrb	r1, [r7, #23]
 800321a:	460b      	mov	r3, r1
 800321c:	3b01      	subs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	b2cb      	uxtb	r3, r1
 8003222:	2200      	movs	r2, #0
 8003224:	4698      	mov	r8, r3
 8003226:	4691      	mov	r9, r2
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003234:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003238:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323c:	b2cb      	uxtb	r3, r1
 800323e:	2200      	movs	r2, #0
 8003240:	461c      	mov	r4, r3
 8003242:	4615      	mov	r5, r2
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	00eb      	lsls	r3, r5, #3
 800324e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003252:	00e2      	lsls	r2, r4, #3
 8003254:	460b      	mov	r3, r1
 8003256:	3307      	adds	r3, #7
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	ebad 0d03 	sub.w	sp, sp, r3
 8003260:	ab02      	add	r3, sp, #8
 8003262:	3300      	adds	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
		uint8_t dest = 0xC0;
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	72fb      	strb	r3, [r7, #11]

		uint8_t ret = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	72bb      	strb	r3, [r7, #10]

		data[0] = torque & 0xFF;
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	701a      	strb	r2, [r3, #0]
		data[1] = (torque >> 8) & 0xFF;
 8003276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327a:	121b      	asrs	r3, r3, #8
 800327c:	b21b      	sxth	r3, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	70da      	strb	r2, [r3, #3]
		data[4] = mc_direction;
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <sendTorque+0xec>)
 8003292:	f993 3000 	ldrsb.w	r3, [r3]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	711a      	strb	r2, [r3, #4]
		data[5] = mc_enable_inverter;
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <sendTorque+0xf0>)
 800329e:	f993 3000 	ldrsb.w	r3, [r3]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	715a      	strb	r2, [r3, #5]
		data[6] = 0x00;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	719a      	strb	r2, [r3, #6]
		data[7] = 0x00;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	71da      	strb	r2, [r3, #7]

		ret = sendCan(CAN1, data, len, dest, CAN_NO_RTR, CAN_NO_EXT);
 80032b4:	7dfa      	ldrb	r2, [r7, #23]
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	2100      	movs	r1, #0
 80032ba:	9101      	str	r1, [sp, #4]
 80032bc:	2100      	movs	r1, #0
 80032be:	9100      	str	r1, [sp, #0]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	480d      	ldr	r0, [pc, #52]	; (80032f8 <sendTorque+0xf4>)
 80032c4:	f7fe fbce 	bl	8001a64 <sendCan>
 80032c8:	4603      	mov	r3, r0
 80032ca:	72bb      	strb	r3, [r7, #10]
		if (ret != 0) {
 80032cc:	7abb      	ldrb	r3, [r7, #10]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <sendTorque+0xde>
			//can error, log it
			log_and_handle_error(ERROR_CAN_ONE_TX_FAIL, NULL);
 80032d2:	2100      	movs	r1, #0
 80032d4:	2008      	movs	r0, #8
 80032d6:	f7fe ff9f 	bl	8002218 <log_and_handle_error>
			logMessage("MC: Failed to send MC command CAN packet\n", false); //should be critical??
 80032da:	2100      	movs	r1, #0
 80032dc:	4807      	ldr	r0, [pc, #28]	; (80032fc <sendTorque+0xf8>)
 80032de:	f7ff fc2f 	bl	8002b40 <logMessage>
		}
		return;
 80032e2:	bf00      	nop
 80032e4:	46b5      	mov	sp, r6
 80032e6:	bf00      	nop
}
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032f0:	200000e3 	.word	0x200000e3
 80032f4:	20000d90 	.word	0x20000d90
 80032f8:	40006400 	.word	0x40006400
 80032fc:	0800cd70 	.word	0x0800cd70

08003300 <mc_send_param_command_message>:
 * @param param_address: the address for the specific kind of command message (Page 39)
 * @param RW: Read/Write. 0x1 -> write, 0x0 -> read.
 * @param Data: data to be sent, length must be 2 bytes. Data[0] goes to byte 4, Data[1] goes to byte 5.
 */
void mc_send_param_command_message(uint8_t param_address, uint8_t RW,
		uint8_t * Data) {
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	603a      	str	r2, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	460b      	mov	r3, r1
 800330e:	71bb      	strb	r3, [r7, #6]
	uint8_t len = 8;
 8003310:	2308      	movs	r3, #8
 8003312:	75fb      	strb	r3, [r7, #23]
	uint8_t data[8];
	uint8_t dest = MC_PARAM_COMMAND_MSG;
 8003314:	23c1      	movs	r3, #193	; 0xc1
 8003316:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	757b      	strb	r3, [r7, #21]

	//Referencing page 19, disabling the periodic can messages we want
	data[0] = param_address;
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 8003320:	2300      	movs	r3, #0
 8003322:	737b      	strb	r3, [r7, #13]
	data[2] = RW;
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	73bb      	strb	r3, [r7, #14]
	data[3] = 0x00; 	//Reserved
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
	data[4] = Data[1];
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	743b      	strb	r3, [r7, #16]
	data[5] = Data[2];
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	789b      	ldrb	r3, [r3, #2]
 8003336:	747b      	strb	r3, [r7, #17]
	data[6] = 0x00;		//Reserved
 8003338:	2300      	movs	r3, #0
 800333a:	74bb      	strb	r3, [r7, #18]
	data[7] = 0x00;		//Reserved
 800333c:	2300      	movs	r3, #0
 800333e:	74fb      	strb	r3, [r7, #19]
		//can error, log it

		//log_and_handle_error(ERROR_CAN_ONE_TX_FAIL, NULL);
		//logMessage("MC: Failed to send parameter MC CAN packet\n", false);
	//}
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <mc_enable_broadcast_msgs>:

void sendZeroTorque() {
	mc_set_torque(0);
}

void mc_enable_broadcast_msgs() {
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
	uint8_t data[2];
	data[0] = MC_ENABLE_BYTE_4;
 8003352:	23e5      	movs	r3, #229	; 0xe5
 8003354:	713b      	strb	r3, [r7, #4]
	data[1] = MC_ENABLE_BYTE_5;
 8003356:	2300      	movs	r3, #0
 8003358:	717b      	strb	r3, [r7, #5]
	mc_send_param_command_message(CAN_MC_ACTIVE_MESSAGES, MC_COMMAND_WRITE,
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	461a      	mov	r2, r3
 800335e:	2101      	movs	r1, #1
 8003360:	20c1      	movs	r0, #193	; 0xc1
 8003362:	f7ff ffcd 	bl	8003300 <mc_send_param_command_message>
			data);
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <update_heartbeat>:
 *
 *
 * @Brief: this function updates the heartbeat task to the presence of the
 * motor controller
 */
void update_heartbeat() {
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
	TaskHandle_t task = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	607b      	str	r3, [r7, #4]
	task = heartbeat_MC_get_task();
 8003378:	f7ff fae6 	bl	8002948 <heartbeat_MC_get_task>
 800337c:	6078      	str	r0, [r7, #4]
	if (task != NULL) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <update_heartbeat+0x2a>
		xTaskNotify(task, 0, eNoAction);
 8003384:	2300      	movs	r3, #0
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f006 fe2a 	bl	8009fe4 <xTaskGenericNotify>
        osThreadFlagsSet(task, 0x01);
 8003390:	2101      	movs	r1, #1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f004 fbda 	bl	8007b4c <osThreadFlagsSet>
	}
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <EnableMC>:

void EnableMC() {
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	mc_enable_inverter = 1;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <EnableMC+0x14>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20000d90 	.word	0x20000d90

080033b8 <DisableMC>:

void DisableMC() {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
	mc_enable_inverter = 0;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <DisableMC+0x14>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000d90 	.word	0x20000d90

080033d0 <detectPedal>:
 * only makes sense with the Throttles that have inverted gains and not
 * the half gain style
 *
 *	throttle_1
 */
bool detectPedal(uint16_t petal_1, uint16_t petal_2, pedal_state_t * state) {
 80033d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	603a      	str	r2, [r7, #0]
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	460b      	mov	r3, r1
 80033e0:	80bb      	strh	r3, [r7, #4]
 80033e2:	466b      	mov	r3, sp
 80033e4:	461e      	mov	r6, r3

	bool hasPetal = false; 	//true if we etect a pedal
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
	const uint8_t BUFFLEN = 40; //length of buffer
 80033ea:	2328      	movs	r3, #40	; 0x28
 80033ec:	73bb      	strb	r3, [r7, #14]
	char buff[BUFFLEN];			//string buffer
 80033ee:	7bbb      	ldrb	r3, [r7, #14]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	2200      	movs	r2, #0
 80033f8:	4698      	mov	r8, r3
 80033fa:	4691      	mov	r9, r2
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003408:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2200      	movs	r2, #0
 8003414:	461c      	mov	r4, r3
 8003416:	4615      	mov	r5, r2
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	00eb      	lsls	r3, r5, #3
 8003422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003426:	00e2      	lsls	r2, r4, #3
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	3307      	adds	r3, #7
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	ebad 0d03 	sub.w	sp, sp, r3
 8003434:	466b      	mov	r3, sp
 8003436:	3300      	adds	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

	//check that we dont get a bad pointer
	if (state == NULL || state->name == NULL) {
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <detectPedal+0x78>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3321      	adds	r3, #33	; 0x21
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <detectPedal+0x84>
		log_and_handle_error(BAD_PEDAL_STRUCT, &bad_pedal_struct_err_handler);
 8003448:	4921      	ldr	r1, [pc, #132]	; (80034d0 <detectPedal+0x100>)
 800344a:	2007      	movs	r0, #7
 800344c:	f7fe fee4 	bl	8002218 <log_and_handle_error>
				logMessage(buff, false);
			}
		}
	}

	return hasPetal;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	e036      	b.n	80034c2 <detectPedal+0xf2>
		if(petal_1 < 100 && petal_2 < 100) {
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b63      	cmp	r3, #99	; 0x63
 8003458:	d804      	bhi.n	8003464 <detectPedal+0x94>
 800345a:	88bb      	ldrh	r3, [r7, #4]
 800345c:	2b63      	cmp	r3, #99	; 0x63
 800345e:	d801      	bhi.n	8003464 <detectPedal+0x94>
			return true;
 8003460:	2301      	movs	r3, #1
 8003462:	e02e      	b.n	80034c2 <detectPedal+0xf2>
		if(abs((2 * petal_1) - petal_2) <= (1.2 * petal_1)) {
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	005a      	lsls	r2, r3, #1
 8003468:	88bb      	ldrh	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	bfb8      	it	lt
 8003470:	425b      	neglt	r3, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f9b0 	bl	80007d8 <__aeabi_i2d>
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f9aa 	bl	80007d8 <__aeabi_i2d>
 8003484:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <detectPedal+0x104>)
 800348a:	f7fc ff29 	bl	80002e0 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fd fa73 	bl	8000980 <__aeabi_dcmple>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <detectPedal+0xd8>
			state->gone_count = 0;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	805a      	strh	r2, [r3, #2]
 80034a6:	e005      	b.n	80034b4 <detectPedal+0xe4>
			state->gone_count++;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	885b      	ldrh	r3, [r3, #2]
 80034ac:	3301      	adds	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	805a      	strh	r2, [r3, #2]
		if(state->gone_count > 20) {
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	885b      	ldrh	r3, [r3, #2]
 80034b8:	2b14      	cmp	r3, #20
 80034ba:	d901      	bls.n	80034c0 <detectPedal+0xf0>
			return false;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <detectPedal+0xf2>
			return true;
 80034c0:	2301      	movs	r3, #1
 80034c2:	46b5      	mov	sp, r6
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034ce:	bf00      	nop
 80034d0:	08003679 	.word	0x08003679
 80034d4:	3ff33333 	.word	0x3ff33333

080034d8 <sensAgreement_990>:
 * throttle_2: 0.25 - 2.25
 * throttle_1: 0.5 - 4.5
 * returns true if the throttle sensors agree otherwise false
 */
bool sensAgreement_990(uint16_t sens_1, uint16_t sens_2, pedal_state_t * state)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	603a      	str	r2, [r7, #0]
 80034e2:	80fb      	strh	r3, [r7, #6]
 80034e4:	460b      	mov	r3, r1
 80034e6:	80bb      	strh	r3, [r7, #4]

	bool agrees = false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	767b      	strb	r3, [r7, #25]
	uint16_t normalized_sens_1;
	uint16_t normalized_sens_2;
	uint16_t sens_agree_range_max;
	uint16_t sens_agree_range_min;
	uint32_t agreement_range_size = (state->high_max) * PEDAL_AGREEMENT_PERCENT; //(state->high_max - state->high_min) * PEDAL_AGREEMENT_PERCENT;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	8a5b      	ldrh	r3, [r3, #18]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd f971 	bl	80007d8 <__aeabi_i2d>
 80034f6:	a35e      	add	r3, pc, #376	; (adr r3, 8003670 <sensAgreement_990+0x198>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fc fef0 	bl	80002e0 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fa58 	bl	80009bc <__aeabi_d2uiz>
 800350c:	4603      	mov	r3, r0
 800350e:	617b      	str	r3, [r7, #20]

	normalized_sens_2 = sens_2 * state->gain; //(sens_2 - state->low_zero) * state->gain;
 8003510:	88bb      	ldrh	r3, [r7, #4]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003528:	ee17 3a90 	vmov	r3, s15
 800352c:	83bb      	strh	r3, [r7, #28]
	normalized_sens_1 = sens_1; //sens_1 - state->high_zero;
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	83fb      	strh	r3, [r7, #30]

	if(normalized_sens_2 > 0xfff){
 8003532:	8bbb      	ldrh	r3, [r7, #28]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d301      	bcc.n	800353e <sensAgreement_990+0x66>
		normalized_sens_2 = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	83bb      	strh	r3, [r7, #28]
	}

	if(normalized_sens_1 > 0xfff){
 800353e:	8bfb      	ldrh	r3, [r7, #30]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d301      	bcc.n	800354a <sensAgreement_990+0x72>
		normalized_sens_1 = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	83fb      	strh	r3, [r7, #30]
	}


	if (normalized_sens_1 < agreement_range_size)
 800354a:	8bfb      	ldrh	r3, [r7, #30]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	429a      	cmp	r2, r3
 8003550:	d902      	bls.n	8003558 <sensAgreement_990+0x80>
	{
		sens_agree_range_min = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	837b      	strh	r3, [r7, #26]
 8003556:	e004      	b.n	8003562 <sensAgreement_990+0x8a>
	}
	else {
		sens_agree_range_min = normalized_sens_1 - agreement_range_size;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	b29b      	uxth	r3, r3
 800355c:	8bfa      	ldrh	r2, [r7, #30]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	837b      	strh	r3, [r7, #26]
		//sens_agree_range_min = normalized_sens_1 - agreement_range_size;
	}
	//double check underflow

	if(sens_agree_range_min > normalized_sens_1){
 8003562:	8b7a      	ldrh	r2, [r7, #26]
 8003564:	8bfb      	ldrh	r3, [r7, #30]
 8003566:	429a      	cmp	r2, r3
 8003568:	d90a      	bls.n	8003580 <sensAgreement_990+0xa8>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60fb      	str	r3, [r7, #12]
}
 800357c:	bf00      	nop
		//TODO: handle proper
		//throttle underflow
		configASSERT(0);
 800357e:	e7fe      	b.n	800357e <sensAgreement_990+0xa6>
	}
	//no overflows here unless TR_MAX_ERROR >> max throttle value, impossisble
	sens_agree_range_max = normalized_sens_1 + agreement_range_size;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	b29a      	uxth	r2, r3
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	4413      	add	r3, r2
 8003588:	827b      	strh	r3, [r7, #18]
	//sens_agree_range_max = normalized_sens_1 + agreement_range_size;

	//check overflow anyway	//cant overflow on high end because only using 12 bits of 16bit int, watch lowend

	if (sens_agree_range_max < normalized_sens_1) {
 800358a:	8a7a      	ldrh	r2, [r7, #18]
 800358c:	8bfb      	ldrh	r3, [r7, #30]
 800358e:	429a      	cmp	r2, r3
 8003590:	d20a      	bcs.n	80035a8 <sensAgreement_990+0xd0>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60bb      	str	r3, [r7, #8]
}
 80035a4:	bf00      	nop
		//TODO: handle proper
		//throttle overflow
		configASSERT(0);
 80035a6:	e7fe      	b.n	80035a6 <sensAgreement_990+0xce>
	}
	if (state->possibility == PEDAL_POSSIBLE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d127      	bne.n	8003600 <sensAgreement_990+0x128>
	{
		if (normalized_sens_2 >= sens_agree_range_min
 80035b0:	8bba      	ldrh	r2, [r7, #28]
 80035b2:	8b7b      	ldrh	r3, [r7, #26]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d307      	bcc.n	80035c8 <sensAgreement_990+0xf0>
				&& normalized_sens_2 < sens_agree_range_max) {
 80035b8:	8bba      	ldrh	r2, [r7, #28]
 80035ba:	8a7b      	ldrh	r3, [r7, #18]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d203      	bcs.n	80035c8 <sensAgreement_990+0xf0>
			state->impos_count = 0;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	80da      	strh	r2, [r3, #6]
 80035c6:	e005      	b.n	80035d4 <sensAgreement_990+0xfc>
		}
		else {
			state->impos_count++;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	88db      	ldrh	r3, [r3, #6]
 80035cc:	3301      	adds	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	80da      	strh	r2, [r3, #6]
		}
		if (state->impos_count < state->impos_limit) {
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	88da      	ldrh	r2, [r3, #6]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	895b      	ldrh	r3, [r3, #10]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d202      	bcs.n	80035e6 <sensAgreement_990+0x10e>
			agrees = true;
 80035e0:	2301      	movs	r3, #1
 80035e2:	767b      	strb	r3, [r7, #25]
 80035e4:	e038      	b.n	8003658 <sensAgreement_990+0x180>
		}
		else {
			agrees = false;
 80035e6:	2300      	movs	r3, #0
 80035e8:	767b      	strb	r3, [r7, #25]
			//state->impos_count = 0;
			state->possible_count = 0;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	811a      	strh	r2, [r3, #8]
			state->possibility = PEDAL_IMPOSSIBLE;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
			//handleImpossiblilty();
			logMessage("APPS/BRAKE: Sensor Disagreement", false);
 80035f6:	2100      	movs	r1, #0
 80035f8:	481b      	ldr	r0, [pc, #108]	; (8003668 <sensAgreement_990+0x190>)
 80035fa:	f7ff faa1 	bl	8002b40 <logMessage>
 80035fe:	e02b      	b.n	8003658 <sensAgreement_990+0x180>
		}
	}
	else {
		agrees = false;
 8003600:	2300      	movs	r3, #0
 8003602:	767b      	strb	r3, [r7, #25]

		//try to recover from impossible state, ambiguous in rules
		if (normalized_sens_2 >= sens_agree_range_min
 8003604:	8bba      	ldrh	r2, [r7, #28]
 8003606:	8b7b      	ldrh	r3, [r7, #26]
 8003608:	429a      	cmp	r2, r3
 800360a:	d30a      	bcc.n	8003622 <sensAgreement_990+0x14a>
				&& normalized_sens_2 < sens_agree_range_max) {
 800360c:	8bba      	ldrh	r2, [r7, #28]
 800360e:	8a7b      	ldrh	r3, [r7, #18]
 8003610:	429a      	cmp	r2, r3
 8003612:	d206      	bcs.n	8003622 <sensAgreement_990+0x14a>
			state->possible_count++;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	891b      	ldrh	r3, [r3, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	811a      	strh	r2, [r3, #8]
 8003620:	e002      	b.n	8003628 <sensAgreement_990+0x150>
		}
		else {
			state->possible_count = 0;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	811a      	strh	r2, [r3, #8]
		}
		if (state->possible_count < (state->impos_limit )) {
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	891a      	ldrh	r2, [r3, #8]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	895b      	ldrh	r3, [r3, #10]
 8003630:	429a      	cmp	r2, r3
 8003632:	d202      	bcs.n	800363a <sensAgreement_990+0x162>
			agrees = false;
 8003634:	2300      	movs	r3, #0
 8003636:	767b      	strb	r3, [r7, #25]
 8003638:	e00e      	b.n	8003658 <sensAgreement_990+0x180>
		}
		else {
			agrees = true;
 800363a:	2301      	movs	r3, #1
 800363c:	767b      	strb	r3, [r7, #25]
			state->impos_count = 0;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	80da      	strh	r2, [r3, #6]
			state->possible_count = 0;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	811a      	strh	r2, [r3, #8]
			state->possibility = PEDAL_POSSIBLE;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
			logMessage("APPS/BRAKE: Sensors have reached an agreement", false);
 8003650:	2100      	movs	r1, #0
 8003652:	4806      	ldr	r0, [pc, #24]	; (800366c <sensAgreement_990+0x194>)
 8003654:	f7ff fa74 	bl	8002b40 <logMessage>
		}

	}
	return true;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	f3af 8000 	nop.w
 8003668:	0800cd9c 	.word	0x0800cd9c
 800366c:	0800cdbc 	.word	0x0800cdbc
 8003670:	9999999a 	.word	0x9999999a
 8003674:	3fb99999 	.word	0x3fb99999

08003678 <bad_pedal_struct_err_handler>:

/*
 * Error handler for bad pedal struct
 */
void bad_pedal_struct_err_handler() {
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
	//do nothing :(
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <checkStartupCondition>:
 * checkStartupCondition
 *
 * @Brief This method checks under what condition the processor started and logs it
 * @Note: This function makes logs to the sd card so sdInitialize should already have been called
 */
void checkStartupCondition(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	//check startup condition
	if(startFromIWDG()){
 800368c:	f7ff f9d0 	bl	8002a30 <startFromIWDG>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <checkStartupCondition+0x1e>
		logMessage("IWDG reset", false);
 8003696:	2100      	movs	r1, #0
 8003698:	4829      	ldr	r0, [pc, #164]	; (8003740 <checkStartupCondition+0xb8>)
 800369a:	f7ff fa51 	bl	8002b40 <logMessage>
		vcu_debug_led(REDLED, true);//turn on red debug led
 800369e:	2101      	movs	r1, #1
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fe fccb 	bl	800203c <vcu_debug_led>
	}
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET){//check for power on reset
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <checkStartupCondition+0xbc>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <checkStartupCondition+0x34>
		logMessage("Power on reset", false);
 80036b2:	2100      	movs	r1, #0
 80036b4:	4824      	ldr	r0, [pc, #144]	; (8003748 <checkStartupCondition+0xc0>)
 80036b6:	f7ff fa43 	bl	8002b40 <logMessage>
 80036ba:	e038      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET){
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <checkStartupCondition+0xbc>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <checkStartupCondition+0x4a>
		logMessage("Pin reset", false);
 80036c8:	2100      	movs	r1, #0
 80036ca:	4820      	ldr	r0, [pc, #128]	; (800374c <checkStartupCondition+0xc4>)
 80036cc:	f7ff fa38 	bl	8002b40 <logMessage>
 80036d0:	e02d      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET){
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <checkStartupCondition+0xbc>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <checkStartupCondition+0x60>
		logMessage("Brown out reset", false);
 80036de:	2100      	movs	r1, #0
 80036e0:	481b      	ldr	r0, [pc, #108]	; (8003750 <checkStartupCondition+0xc8>)
 80036e2:	f7ff fa2d 	bl	8002b40 <logMessage>
 80036e6:	e022      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET){
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <checkStartupCondition+0xbc>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <checkStartupCondition+0x76>
		logMessage("Software reset", false);
 80036f4:	2100      	movs	r1, #0
 80036f6:	4817      	ldr	r0, [pc, #92]	; (8003754 <checkStartupCondition+0xcc>)
 80036f8:	f7ff fa22 	bl	8002b40 <logMessage>
 80036fc:	e017      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET){
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <checkStartupCondition+0xbc>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	2b00      	cmp	r3, #0
 8003704:	da04      	bge.n	8003710 <checkStartupCondition+0x88>
		logMessage("Low power reset", false);
 8003706:	2100      	movs	r1, #0
 8003708:	4813      	ldr	r0, [pc, #76]	; (8003758 <checkStartupCondition+0xd0>)
 800370a:	f7ff fa19 	bl	8002b40 <logMessage>
 800370e:	e00e      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET){
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <checkStartupCondition+0xbc>)
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <checkStartupCondition+0x9e>
		logMessage("Window watchdog reset", false);
 800371c:	2100      	movs	r1, #0
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <checkStartupCondition+0xd4>)
 8003720:	f7ff fa0e 	bl	8002b40 <logMessage>
 8003724:	e003      	b.n	800372e <checkStartupCondition+0xa6>
	}
	else{
		logMessage("Unknown startup condition", false);
 8003726:	2100      	movs	r1, #0
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <checkStartupCondition+0xd8>)
 800372a:	f7ff fa09 	bl	8002b40 <logMessage>
	}

	/* Clear reset flags */
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <checkStartupCondition+0xbc>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	4a04      	ldr	r2, [pc, #16]	; (8003744 <checkStartupCondition+0xbc>)
 8003734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003738:	6753      	str	r3, [r2, #116]	; 0x74
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	0800cdec 	.word	0x0800cdec
 8003744:	40023800 	.word	0x40023800
 8003748:	0800cdf8 	.word	0x0800cdf8
 800374c:	0800ce08 	.word	0x0800ce08
 8003750:	0800ce14 	.word	0x0800ce14
 8003754:	0800ce24 	.word	0x0800ce24
 8003758:	0800ce34 	.word	0x0800ce34
 800375c:	0800ce44 	.word	0x0800ce44
 8003760:	0800ce5c 	.word	0x0800ce5c

08003764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_MspInit+0x54>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_MspInit+0x54>)
 8003774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_MspInit+0x54>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_MspInit+0x54>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_MspInit+0x54>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_MspInit+0x54>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	210f      	movs	r1, #15
 80037a6:	f06f 0001 	mvn.w	r0, #1
 80037aa:	f001 fc25 	bl	8004ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	; 0x30
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <HAL_InitTick+0xd0>)
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	4a2d      	ldr	r2, [pc, #180]	; (800388c <HAL_InitTick+0xd0>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037da:	6453      	str	r3, [r2, #68]	; 0x44
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_InitTick+0xd0>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037e8:	f107 020c 	add.w	r2, r7, #12
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f002 fa46 	bl	8005c84 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037f8:	f002 fa30 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 80037fc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_InitTick+0xd4>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	3b01      	subs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_InitTick+0xd8>)
 800380e:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_InitTick+0xdc>)
 8003810:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_InitTick+0xd8>)
 8003814:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003818:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_InitTick+0xd8>)
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_InitTick+0xd8>)
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_InitTick+0xd8>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_InitTick+0xd8>)
 800382e:	2200      	movs	r2, #0
 8003830:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003832:	4818      	ldr	r0, [pc, #96]	; (8003894 <HAL_InitTick+0xd8>)
 8003834:	f002 fea0 	bl	8006578 <HAL_TIM_Base_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800383e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11b      	bne.n	800387e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003846:	4813      	ldr	r0, [pc, #76]	; (8003894 <HAL_InitTick+0xd8>)
 8003848:	f002 fef0 	bl	800662c <HAL_TIM_Base_Start_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003856:	2b00      	cmp	r3, #0
 8003858:	d111      	bne.n	800387e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800385a:	2019      	movs	r0, #25
 800385c:	f001 fbe8 	bl	8005030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d808      	bhi.n	8003878 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003866:	2200      	movs	r2, #0
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	2019      	movs	r0, #25
 800386c:	f001 fbc4 	bl	8004ff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_InitTick+0xe0>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e002      	b.n	800387e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800387e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003882:	4618      	mov	r0, r3
 8003884:	3730      	adds	r7, #48	; 0x30
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	431bde83 	.word	0x431bde83
 8003894:	20000d94 	.word	0x20000d94
 8003898:	40014400 	.word	0x40014400
 800389c:	200000e8 	.word	0x200000e8

080038a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038a4:	e7fe      	b.n	80038a4 <NMI_Handler+0x4>

080038a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <HardFault_Handler+0x4>

080038ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <MemManage_Handler+0x4>

080038b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <UsageFault_Handler+0x4>

080038be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038d2:	f002 ff6a 	bl	80067aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000d94 	.word	0x20000d94

080038e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <DMA2_Stream0_IRQHandler+0x10>)
 80038e6:	f001 fc5f 	bl	80051a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200001c4 	.word	0x200001c4

080038f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return 1;
 80038f8:	2301      	movs	r3, #1
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_kill>:

int _kill(int pid, int sig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800390e:	f008 f845 	bl	800b99c <__errno>
 8003912:	4603      	mov	r3, r0
 8003914:	2216      	movs	r2, #22
 8003916:	601a      	str	r2, [r3, #0]
  return -1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_exit>:

void _exit (int status)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ffe7 	bl	8003904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003936:	e7fe      	b.n	8003936 <_exit+0x12>

08003938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e00a      	b.n	8003960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800394a:	f3af 8000 	nop.w
 800394e:	4601      	mov	r1, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	60ba      	str	r2, [r7, #8]
 8003956:	b2ca      	uxtb	r2, r1
 8003958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3301      	adds	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	dbf0      	blt.n	800394a <_read+0x12>
  }

  return len;
 8003968:	687b      	ldr	r3, [r7, #4]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e009      	b.n	8003998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	60ba      	str	r2, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	dbf1      	blt.n	8003984 <_write+0x12>
  }
  return len;
 80039a0:	687b      	ldr	r3, [r7, #4]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_close>:

int _close(int file)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039d2:	605a      	str	r2, [r3, #4]
  return 0;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_isatty>:

int _isatty(int file)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a1c:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <_sbrk+0x5c>)
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <_sbrk+0x60>)
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <_sbrk+0x64>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <_sbrk+0x64>)
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <_sbrk+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a44:	f007 ffaa 	bl	800b99c <__errno>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e009      	b.n	8003a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <_sbrk+0x64>)
 8003a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20020000 	.word	0x20020000
 8003a74:	00000400 	.word	0x00000400
 8003a78:	20000ddc 	.word	0x20000ddc
 8003a7c:	20006bd8 	.word	0x20006bd8

08003a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <SystemInit+0x20>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <SystemInit+0x20>)
 8003a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <MX_TIM12_Init>:

TIM_HandleTypeDef htim12;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
 8003ab8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <MX_TIM12_Init+0xd4>)
 8003aca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ade:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8003aec:	4821      	ldr	r0, [pc, #132]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003aee:	f002 fe0d 	bl	800670c <HAL_TIM_IC_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8003af8:	f7ff f982 	bl	8002e00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003afc:	2304      	movs	r3, #4
 8003afe:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003b00:	2350      	movs	r3, #80	; 0x50
 8003b02:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	4817      	ldr	r0, [pc, #92]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003b18:	f002 ffd3 	bl	8006ac2 <HAL_TIM_SlaveConfigSynchro>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8003b22:	f7ff f96d 	bl	8002e00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	480d      	ldr	r0, [pc, #52]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003b3e:	f002 ff24 	bl	800698a <HAL_TIM_IC_ConfigChannel>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8003b48:	f7ff f95a 	bl	8002e00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003b50:	2302      	movs	r3, #2
 8003b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	2204      	movs	r2, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4806      	ldr	r0, [pc, #24]	; (8003b74 <MX_TIM12_Init+0xd0>)
 8003b5c:	f002 ff15 	bl	800698a <HAL_TIM_IC_ConfigChannel>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8003b66:	f7ff f94b 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000de0 	.word	0x20000de0
 8003b78:	40001800 	.word	0x40001800

08003b7c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM12)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_TIM_IC_MspInit+0x84>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d12c      	bne.n	8003bf8 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_TIM_IC_MspInit+0x88>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003be8:	2309      	movs	r3, #9
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <HAL_TIM_IC_MspInit+0x8c>)
 8003bf4:	f001 fd14 	bl	8005620 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3728      	adds	r7, #40	; 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40001800 	.word	0x40001800
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020400 	.word	0x40020400

08003c0c <MX_USART2_Init>:

USART_HandleTypeDef husart2;

/* USART2 init function */
void MX_USART2_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <MX_USART2_Init+0x54>)
 8003c14:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c1c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c32:	220c      	movs	r2, #12
 8003c34:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <MX_USART2_Init+0x50>)
 8003c4a:	f003 faa0 	bl	800718e <HAL_USART_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8003c54:	f7ff f8d4 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000e28 	.word	0x20000e28
 8003c60:	40004400 	.word	0x40004400

08003c64 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_USART_MspInit+0x84>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d12b      	bne.n	8003cde <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_USART_MspInit+0x88>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003cbe:	231c      	movs	r3, #28
 8003cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cce:	2307      	movs	r3, #7
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <HAL_USART_MspInit+0x8c>)
 8003cda:	f001 fca1 	bl	8005620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3728      	adds	r7, #40	; 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020000 	.word	0x40020000

08003cf4 <StartVcuStateTask>:

/**
 * @brief  handle the startup routine
 * @retval never return from a freeRTOS task, kills task if infinite task ends
 */
void StartVcuStateTask(void *argument){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b090      	sub	sp, #64	; 0x40
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(500)); //allow mc to start before harassing it
 8003cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d00:	f005 fa40 	bl	8009184 <vTaskDelay>

	//Keep user led on to simulate LV key is on
	BaseType_t retRTOS = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
	char strBuff[40]; //buffer for making 'nice' logs
	enum CAR_STATE state;
	for(;;){

		//kick watchdog
		wd_criticalTaskKick(wd_STARTUP_CTask);
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fe fe6d 	bl	80029e8 <wd_criticalTaskKick>

		state = get_car_state();
 8003d0e:	f7fe f8f1 	bl	8001ef4 <get_car_state>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		switch(state){
 8003d18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f000 80eb 	beq.w	8003ef8 <StartVcuStateTask+0x204>
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	f300 8124 	bgt.w	8003f70 <StartVcuStateTask+0x27c>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <StartVcuStateTask+0x3e>
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d06e      	beq.n	8003e0e <StartVcuStateTask+0x11a>
					go_idle();
				}
			}
			break;
		default:
			break;
 8003d30:	e11e      	b.n	8003f70 <StartVcuStateTask+0x27c>
			retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, 0);
 8003d32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003d36:	2300      	movs	r3, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f006 f8f2 	bl	8009f24 <xTaskNotifyWait>
 8003d40:	63f8      	str	r0, [r7, #60]	; 0x3c
			if(retRTOS == pdTRUE){
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10c      	bne.n	8003d62 <StartVcuStateTask+0x6e>
				sprintf(strBuff, "Received ACB notification: %lu", ulNotifiedValue);
 8003d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4a:	f107 030c 	add.w	r3, r7, #12
 8003d4e:	498e      	ldr	r1, [pc, #568]	; (8003f88 <StartVcuStateTask+0x294>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f007 fcf9 	bl	800b748 <siprintf>
				logMessage(strBuff,false);
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe feef 	bl	8002b40 <logMessage>
			if(read_saftey_loop() || DISABLE_SAFETY_LOOP_CHECK){  //check if safety loop is closed
 8003d62:	f000 f925 	bl	8003fb0 <read_saftey_loop>
				led_mgmt_clear_error(DASH_SAFETY_LOOP_OPEN_VCU);
 8003d66:	2002      	movs	r0, #2
 8003d68:	f7fe f9b2 	bl	80020d0 <led_mgmt_clear_error>
				if(isButtonPressed(TSA_BTN_GPIO_Port, TSA_BTN_Pin)){ //Check if TSA Button is pressed
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4887      	ldr	r0, [pc, #540]	; (8003f8c <StartVcuStateTask+0x298>)
 8003d70:	f000 f951 	bl	8004016 <isButtonPressed>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80fc 	beq.w	8003f74 <StartVcuStateTask+0x280>
					dash_set_tsa_teal();
 8003d7c:	f7fe f8fe 	bl	8001f7c <dash_set_tsa_teal>
					if(brakePressed() || DISABLE_BRAKE_CHECK){  //Check if Brake is pressed enough
 8003d80:	f7fd fba7 	bl	80014d2 <brakePressed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03d      	beq.n	8003e06 <StartVcuStateTask+0x112>
						if((get_acu_heartbeat_State() == HEARTBEAT_PRESENT && get_mc_heartbeat_State() == HEARTBEAT_PRESENT) || DISABLE_HEARTBEAT_CHECK){
 8003d8a:	f7fe fdc5 	bl	8002918 <get_acu_heartbeat_State>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d130      	bne.n	8003df6 <StartVcuStateTask+0x102>
 8003d94:	f7fe fdcc 	bl	8002930 <get_mc_heartbeat_State>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d12b      	bne.n	8003df6 <StartVcuStateTask+0x102>
							set_car_state(TRACTIVE_SYSTEM_ACTIVE);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7fe f894 	bl	8001ecc <set_car_state>
							set_ACB_State(TRACTIVE_SYSTEM_ACTIVE);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f7fc fff7 	bl	8000d98 <set_ACB_State>
							DisableMC();
 8003daa:	f7ff fb05 	bl	80033b8 <DisableMC>
							mc_enable_broadcast_msgs();
 8003dae:	f7ff facd 	bl	800334c <mc_enable_broadcast_msgs>
								retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, TSA_ACK_TIMEOUT + MC_STARTUP_DELAY);
 8003db2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003db6:	f242 3328 	movw	r3, #9000	; 0x2328
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f006 f8b1 	bl	8009f24 <xTaskNotifyWait>
 8003dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
								if(ulNotifiedValue != ACB_TSA_ACK){	//nack
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d00e      	beq.n	8003de8 <StartVcuStateTask+0xf4>
									go_idle();	//reset VCU state
 8003dca:	f000 f901 	bl	8003fd0 <go_idle>
									if(ulNotifiedValue != GO_IDLE_REQ_FROM_ACB){
 8003dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d002      	beq.n	8003dda <StartVcuStateTask+0xe6>
										set_ACB_State(IDLE);	//reset ACU state
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7fc ffdf 	bl	8000d98 <set_ACB_State>
									logMessage("ACB failed to ack TSA Request", true);
 8003dda:	2101      	movs	r1, #1
 8003ddc:	486c      	ldr	r0, [pc, #432]	; (8003f90 <StartVcuStateTask+0x29c>)
 8003dde:	f7fe feaf 	bl	8002b40 <logMessage>
									fail_pulse();
 8003de2:	f000 f906 	bl	8003ff2 <fail_pulse>
							if(!DISABLE_ACU_ACK) {
 8003de6:	e00d      	b.n	8003e04 <StartVcuStateTask+0x110>
									dash_set_tsa_green();
 8003de8:	f7fe f8d8 	bl	8001f9c <dash_set_tsa_green>
									logMessage("Went TSA!", false);
 8003dec:	2100      	movs	r1, #0
 8003dee:	4869      	ldr	r0, [pc, #420]	; (8003f94 <StartVcuStateTask+0x2a0>)
 8003df0:	f7fe fea6 	bl	8002b40 <logMessage>
							if(!DISABLE_ACU_ACK) {
 8003df4:	e006      	b.n	8003e04 <StartVcuStateTask+0x110>
							logMessage("Failed to go TSA due to lack of heartbeat", false);
 8003df6:	2100      	movs	r1, #0
 8003df8:	4867      	ldr	r0, [pc, #412]	; (8003f98 <StartVcuStateTask+0x2a4>)
 8003dfa:	f7fe fea1 	bl	8002b40 <logMessage>
							fail_pulse();
 8003dfe:	f000 f8f8 	bl	8003ff2 <fail_pulse>
						if((get_acu_heartbeat_State() == HEARTBEAT_PRESENT && get_mc_heartbeat_State() == HEARTBEAT_PRESENT) || DISABLE_HEARTBEAT_CHECK){
 8003e02:	e003      	b.n	8003e0c <StartVcuStateTask+0x118>
 8003e04:	e002      	b.n	8003e0c <StartVcuStateTask+0x118>
						fail_pulse();
 8003e06:	f000 f8f4 	bl	8003ff2 <fail_pulse>
			break;
 8003e0a:	e0b3      	b.n	8003f74 <StartVcuStateTask+0x280>
 8003e0c:	e0b2      	b.n	8003f74 <StartVcuStateTask+0x280>
			if(isButtonPressed(RTD_BTN_GPIO_Port, RTD_BTN_Pin)){
 8003e0e:	2102      	movs	r1, #2
 8003e10:	485e      	ldr	r0, [pc, #376]	; (8003f8c <StartVcuStateTask+0x298>)
 8003e12:	f000 f900 	bl	8004016 <isButtonPressed>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d044      	beq.n	8003ea6 <StartVcuStateTask+0x1b2>
					if((get_acu_heartbeat_State() == HEARTBEAT_PRESENT && get_mc_heartbeat_State() == HEARTBEAT_PRESENT) || DISABLE_HEARTBEAT_CHECK){ //RTD Button Check and break press
 8003e1c:	f7fe fd7c 	bl	8002918 <get_acu_heartbeat_State>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d13d      	bne.n	8003ea2 <StartVcuStateTask+0x1ae>
 8003e26:	f7fe fd83 	bl	8002930 <get_mc_heartbeat_State>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d138      	bne.n	8003ea2 <StartVcuStateTask+0x1ae>
						dash_set_rtd_teal();
 8003e30:	f7fe f8f4 	bl	800201c <dash_set_rtd_teal>
						if(brakePressed() || DISABLE_BRAKE_CHECK){ //Check brake pressure
 8003e34:	f7fd fb4d 	bl	80014d2 <brakePressed>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d033      	beq.n	8003ea6 <StartVcuStateTask+0x1b2>
							dash_set_rtd_teal();
 8003e3e:	f7fe f8ed 	bl	800201c <dash_set_rtd_teal>
							set_car_state(READY_TO_DRIVE);
 8003e42:	2002      	movs	r0, #2
 8003e44:	f7fe f842 	bl	8001ecc <set_car_state>
							set_ACB_State(READY_TO_DRIVE);
 8003e48:	2002      	movs	r0, #2
 8003e4a:	f7fc ffa5 	bl	8000d98 <set_ACB_State>
								retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, RTD_ACK_TIMEOUT);
 8003e4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e52:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003e56:	2100      	movs	r1, #0
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f006 f863 	bl	8009f24 <xTaskNotifyWait>
 8003e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
								EnableMC();
 8003e60:	f7ff fa9e 	bl	80033a0 <EnableMC>
								if(retRTOS != pdPASS || ulNotifiedValue != ACB_RTD_ACK){
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <StartVcuStateTask+0x17c>
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d00e      	beq.n	8003e8e <StartVcuStateTask+0x19a>
									logMessage("ACB failed to ack RTD Request", false);
 8003e70:	2100      	movs	r1, #0
 8003e72:	484a      	ldr	r0, [pc, #296]	; (8003f9c <StartVcuStateTask+0x2a8>)
 8003e74:	f7fe fe64 	bl	8002b40 <logMessage>
									go_idle();
 8003e78:	f000 f8aa 	bl	8003fd0 <go_idle>
									if(ulNotifiedValue != GO_IDLE_REQ_FROM_ACB){
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d002      	beq.n	8003e88 <StartVcuStateTask+0x194>
										set_ACB_State(IDLE);
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7fc ff88 	bl	8000d98 <set_ACB_State>
									fail_pulse();
 8003e88:	f000 f8b3 	bl	8003ff2 <fail_pulse>
						if(brakePressed() || DISABLE_BRAKE_CHECK){ //Check brake pressure
 8003e8c:	e00b      	b.n	8003ea6 <StartVcuStateTask+0x1b2>
									dash_set_rtd_green();
 8003e8e:	f7fe f8a5 	bl	8001fdc <dash_set_rtd_green>
									mc_set_inverter_enable(1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7ff f820 	bl	8002ed8 <mc_set_inverter_enable>
									logMessage("Went RTD!", false);
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4841      	ldr	r0, [pc, #260]	; (8003fa0 <StartVcuStateTask+0x2ac>)
 8003e9c:	f7fe fe50 	bl	8002b40 <logMessage>
						if(brakePressed() || DISABLE_BRAKE_CHECK){ //Check brake pressure
 8003ea0:	e001      	b.n	8003ea6 <StartVcuStateTask+0x1b2>
						fail_pulse();
 8003ea2:	f000 f8a6 	bl	8003ff2 <fail_pulse>
			if(isButtonPressed(TSA_BTN_GPIO_Port, TSA_BTN_Pin)) {
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4838      	ldr	r0, [pc, #224]	; (8003f8c <StartVcuStateTask+0x298>)
 8003eaa:	f000 f8b4 	bl	8004016 <isButtonPressed>
			retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, 0);
 8003eae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f006 f834 	bl	8009f24 <xTaskNotifyWait>
 8003ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
			if(retRTOS == pdTRUE && ulNotifiedValue == GO_IDLE_REQ_FROM_ACB){
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <StartVcuStateTask+0x1e2>
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d105      	bne.n	8003ed6 <StartVcuStateTask+0x1e2>
				logMessage("ACB request IDLE state change", true);
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4835      	ldr	r0, [pc, #212]	; (8003fa4 <StartVcuStateTask+0x2b0>)
 8003ece:	f7fe fe37 	bl	8002b40 <logMessage>
				go_idle();
 8003ed2:	f000 f87d 	bl	8003fd0 <go_idle>
				if((get_acu_heartbeat_State() != HEARTBEAT_PRESENT || get_mc_heartbeat_State() != HEARTBEAT_PRESENT)){//make sure we have ACB heartbeat
 8003ed6:	f7fe fd1f 	bl	8002918 <get_acu_heartbeat_State>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d104      	bne.n	8003eea <StartVcuStateTask+0x1f6>
 8003ee0:	f7fe fd26 	bl	8002930 <get_mc_heartbeat_State>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d046      	beq.n	8003f78 <StartVcuStateTask+0x284>
					logMessage("Going Idle due to lack of ACB", true);
 8003eea:	2101      	movs	r1, #1
 8003eec:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <StartVcuStateTask+0x2b4>)
 8003eee:	f7fe fe27 	bl	8002b40 <logMessage>
					go_idle();
 8003ef2:	f000 f86d 	bl	8003fd0 <go_idle>
			break;
 8003ef6:	e03f      	b.n	8003f78 <StartVcuStateTask+0x284>
			EnableMC();
 8003ef8:	f7ff fa52 	bl	80033a0 <EnableMC>
			if(isButtonPressed(RTD_BTN_GPIO_Port, RTD_BTN_Pin) || isButtonPressed(TSA_BTN_GPIO_Port, TSA_BTN_Pin)){
 8003efc:	2102      	movs	r1, #2
 8003efe:	4823      	ldr	r0, [pc, #140]	; (8003f8c <StartVcuStateTask+0x298>)
 8003f00:	f000 f889 	bl	8004016 <isButtonPressed>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <StartVcuStateTask+0x224>
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	481f      	ldr	r0, [pc, #124]	; (8003f8c <StartVcuStateTask+0x298>)
 8003f0e:	f000 f882 	bl	8004016 <isButtonPressed>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <StartVcuStateTask+0x232>
				set_ACB_State(IDLE);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fc ff3d 	bl	8000d98 <set_ACB_State>
				logMessage("RTD or VCU Button Pressed, going IDLE", false);
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4822      	ldr	r0, [pc, #136]	; (8003fac <StartVcuStateTask+0x2b8>)
 8003f22:	f7fe fe0d 	bl	8002b40 <logMessage>
			retRTOS = xTaskNotifyWait(0x00,0x00, &ulNotifiedValue, 0);
 8003f26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f005 fff8 	bl	8009f24 <xTaskNotifyWait>
 8003f34:	63f8      	str	r0, [r7, #60]	; 0x3c
			if(retRTOS == pdTRUE && ulNotifiedValue == GO_IDLE_REQ_FROM_ACB){
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d108      	bne.n	8003f4e <StartVcuStateTask+0x25a>
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d105      	bne.n	8003f4e <StartVcuStateTask+0x25a>
				logMessage("ACB request IDLE state change", true);
 8003f42:	2101      	movs	r1, #1
 8003f44:	4817      	ldr	r0, [pc, #92]	; (8003fa4 <StartVcuStateTask+0x2b0>)
 8003f46:	f7fe fdfb 	bl	8002b40 <logMessage>
				go_idle();
 8003f4a:	f000 f841 	bl	8003fd0 <go_idle>
				if((get_acu_heartbeat_State() != HEARTBEAT_PRESENT || get_mc_heartbeat_State() != HEARTBEAT_PRESENT)){//make sure we have ACB heartbeat
 8003f4e:	f7fe fce3 	bl	8002918 <get_acu_heartbeat_State>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d104      	bne.n	8003f62 <StartVcuStateTask+0x26e>
 8003f58:	f7fe fcea 	bl	8002930 <get_mc_heartbeat_State>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d00c      	beq.n	8003f7c <StartVcuStateTask+0x288>
					logMessage("Going Idle due to lack of ACB", true);
 8003f62:	2101      	movs	r1, #1
 8003f64:	4810      	ldr	r0, [pc, #64]	; (8003fa8 <StartVcuStateTask+0x2b4>)
 8003f66:	f7fe fdeb 	bl	8002b40 <logMessage>
					go_idle();
 8003f6a:	f000 f831 	bl	8003fd0 <go_idle>
			break;
 8003f6e:	e005      	b.n	8003f7c <StartVcuStateTask+0x288>
			break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <StartVcuStateTask+0x28a>
			break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <StartVcuStateTask+0x28a>
			break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <StartVcuStateTask+0x28a>
			break;
 8003f7c:	bf00      	nop
		}
		vTaskDelay(pdMS_TO_TICKS(STARTUP_TASK_DELAY));
 8003f7e:	2064      	movs	r0, #100	; 0x64
 8003f80:	f005 f900 	bl	8009184 <vTaskDelay>
		wd_criticalTaskKick(wd_STARTUP_CTask);
 8003f84:	e6c0      	b.n	8003d08 <StartVcuStateTask+0x14>
 8003f86:	bf00      	nop
 8003f88:	0800ce78 	.word	0x0800ce78
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	0800ce98 	.word	0x0800ce98
 8003f94:	0800ceb8 	.word	0x0800ceb8
 8003f98:	0800cec4 	.word	0x0800cec4
 8003f9c:	0800cef0 	.word	0x0800cef0
 8003fa0:	0800cf10 	.word	0x0800cf10
 8003fa4:	0800cf1c 	.word	0x0800cf1c
 8003fa8:	0800cf3c 	.word	0x0800cf3c
 8003fac:	0800cf5c 	.word	0x0800cf5c

08003fb0 <read_saftey_loop>:
 * @Brief: This method checks the satus of the saftey loop at the VCU
 *
 * @Return: returns true if there is voltage on the safety loop at the VCU
 * otherwise returns false
 */
bool read_saftey_loop(){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SAFETY_LOOP_GPIO_Port, SAFETY_LOOP_Pin) == GPIO_PIN_SET){
 8003fb4:	2140      	movs	r1, #64	; 0x40
 8003fb6:	4805      	ldr	r0, [pc, #20]	; (8003fcc <read_saftey_loop+0x1c>)
 8003fb8:	f001 fcc6 	bl	8005948 <HAL_GPIO_ReadPin>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <read_saftey_loop+0x16>
		return true;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <read_saftey_loop+0x18>
	}
	else{
		return false;
 8003fc6:	2300      	movs	r3, #0
	}
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40020c00 	.word	0x40020c00

08003fd0 <go_idle>:
/*
 * go_idle
 *
 * @Brief: This function is used to bring the entire car into the idle state
 */
void go_idle(){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	dash_clear_all_leds();
 8003fd4:	f7fd ff9e 	bl	8001f14 <dash_clear_all_leds>
	DisableMC();
 8003fd8:	f7ff f9ee 	bl	80033b8 <DisableMC>
	mc_set_inverter_enable(0);
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f7fe ff7b 	bl	8002ed8 <mc_set_inverter_enable>
	set_car_state(IDLE);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fd ff72 	bl	8001ecc <set_car_state>
	set_ACB_State(IDLE);
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f7fc fed5 	bl	8000d98 <set_ACB_State>
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <fail_pulse>:
 * fail_pulse
 *
 * @Brief: This function is used to flash the dash lights to indicate that something has gone wrong.
 * This function delays and must be called from a running task
 */
static void fail_pulse(){
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	af00      	add	r7, sp, #0
	go_idle();
 8003ff6:	f7ff ffeb 	bl	8003fd0 <go_idle>
	dash_set_rtd_blue();
 8003ffa:	f7fd ffff 	bl	8001ffc <dash_set_rtd_blue>
	dash_set_tsa_blue();
 8003ffe:	f7fd ffdd 	bl	8001fbc <dash_set_tsa_blue>
	vTaskDelay(pdMS_TO_TICKS(FAIL_FLASH_LEN));
 8004002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004006:	f005 f8bd 	bl	8009184 <vTaskDelay>
	dash_clear_all_leds();
 800400a:	f7fd ff83 	bl	8001f14 <dash_clear_all_leds>
	DisableMC();
 800400e:	f7ff f9d3 	bl	80033b8 <DisableMC>
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}

08004016 <isButtonPressed>:
 * @Brief: This function is used to check if a button is pressed
 * @Param: port is the GPIO port of the button
 * @Param: pin is the GPIO pin of the button
 * @Return: returns true if the button is pressed, otherwise returns false
 */
bool isButtonPressed(GPIO_TypeDef* port, uint16_t pin){
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
    return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET);
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f001 fc8e 	bl	8005948 <HAL_GPIO_ReadPin>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004044:	f7ff fd1c 	bl	8003a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	; (800407c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	; (8004080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800406e:	f007 fc9b 	bl	800b9a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004072:	f7fe fe17 	bl	8002ca4 <main>
  bx  lr    
 8004076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8004084:	0800d1f8 	.word	0x0800d1f8
  ldr r2, =_sbss
 8004088:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 800408c:	20006bd8 	.word	0x20006bd8

08004090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC_IRQHandler>

08004092 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80040a0:	b672      	cpsid	i
}
 80040a2:	bf00      	nop
 80040a4:	f7fe feac 	bl	8002e00 <Error_Handler>
 80040a8:	e7fe      	b.n	80040a8 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e007      	b.n	80040c0 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	2100      	movs	r1, #0
 80040b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d9f4      	bls.n	80040b0 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	721a      	strb	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80040e2:	b672      	cpsid	i
}
 80040e4:	bf00      	nop
 80040e6:	f7fe fe8b 	bl	8002e00 <Error_Handler>
 80040ea:	e7fe      	b.n	80040ea <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7a1b      	ldrb	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d904      	bls.n	80040fe <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80040f4:	b672      	cpsid	i
}
 80040f6:	bf00      	nop
 80040f8:	f7fe fe82 	bl	8002e00 <Error_Handler>
 80040fc:	e7fe      	b.n	80040fc <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7a1b      	ldrb	r3, [r3, #8]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	b2d1      	uxtb	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	7211      	strb	r1, [r2, #8]
 800410a:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800410c:	f3ef 8211 	mrs	r2, BASEPRI
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fa      	str	r2, [r7, #12]
 8004122:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004142:	b672      	cpsid	i
}
 8004144:	bf00      	nop
 8004146:	f7fe fe5b 	bl	8002e00 <Error_Handler>
 800414a:	e7fe      	b.n	800414a <stm32_lock_release+0x16>
  lock->nesting_level--;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7a1b      	ldrb	r3, [r3, #8]
 8004150:	3b01      	subs	r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7a1b      	ldrb	r3, [r3, #8]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d904      	bls.n	800416a <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8004160:	b672      	cpsid	i
}
 8004162:	bf00      	nop
 8004164:	f7fe fe4c 	bl	8002e00 <Error_Handler>
 8004168:	e7fe      	b.n	8004168 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7a1b      	ldrb	r3, [r3, #8]
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004176:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800417e:	bf00      	nop
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8004196:	f007 fc01 	bl	800b99c <__errno>
 800419a:	4603      	mov	r3, r0
 800419c:	2216      	movs	r2, #22
 800419e:	601a      	str	r2, [r3, #0]
    return;
 80041a0:	e015      	b.n	80041ce <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80041a2:	200c      	movs	r0, #12
 80041a4:	f007 f8d2 	bl	800b34c <malloc>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff68 	bl	8004092 <stm32_lock_init>
    return;
 80041c2:	e004      	b.n	80041ce <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80041c4:	b672      	cpsid	i
}
 80041c6:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80041c8:	f7fe fe1a 	bl	8002e00 <Error_Handler>
 80041cc:	e7fe      	b.n	80041cc <__retarget_lock_init_recursive+0x44>
}
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80041e2:	b672      	cpsid	i
}
 80041e4:	bf00      	nop
 80041e6:	f7fe fe0b 	bl	8002e00 <Error_Handler>
 80041ea:	e7fe      	b.n	80041ea <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ff70 	bl	80040d4 <stm32_lock_acquire>
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800420a:	b672      	cpsid	i
}
 800420c:	bf00      	nop
 800420e:	f7fe fdf7 	bl	8002e00 <Error_Handler>
 8004212:	e7fe      	b.n	8004212 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff8c 	bl	8004134 <stm32_lock_release>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_Init+0x40>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_Init+0x40>)
 800422e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_Init+0x40>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <HAL_Init+0x40>)
 800423a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_Init+0x40>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_Init+0x40>)
 8004246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800424c:	2003      	movs	r0, #3
 800424e:	f000 fec8 	bl	8004fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004252:	200f      	movs	r0, #15
 8004254:	f7ff fab2 	bl	80037bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004258:	f7ff fa84 	bl	8003764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00

08004268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_IncTick+0x20>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_IncTick+0x24>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4413      	add	r3, r2
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_IncTick+0x24>)
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	200000ec 	.word	0x200000ec
 800428c:	20000e84 	.word	0x20000e84

08004290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return uwTick;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_GetTick+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000e84 	.word	0x20000e84

080042a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b0:	f7ff ffee 	bl	8004290 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d005      	beq.n	80042ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_Delay+0x44>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ce:	bf00      	nop
 80042d0:	f7ff ffde 	bl	8004290 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d8f7      	bhi.n	80042d0 <HAL_Delay+0x28>
  {
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200000ec 	.word	0x200000ec

080042f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e033      	b.n	800436e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc fdee 	bl	8000ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004336:	f023 0302 	bic.w	r3, r3, #2
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f94a 	bl	80045dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
 800435e:	e001      	b.n	8004364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1c>
 8004390:	2302      	movs	r3, #2
 8004392:	e113      	b.n	80045bc <HAL_ADC_ConfigChannel+0x244>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d925      	bls.n	80043f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68d9      	ldr	r1, [r3, #12]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	3b1e      	subs	r3, #30
 80043ba:	2207      	movs	r2, #7
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	400a      	ands	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68d9      	ldr	r1, [r3, #12]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4618      	mov	r0, r3
 80043dc:	4603      	mov	r3, r0
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4403      	add	r3, r0
 80043e2:	3b1e      	subs	r3, #30
 80043e4:	409a      	lsls	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e022      	b.n	8004436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6919      	ldr	r1, [r3, #16]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	2207      	movs	r2, #7
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43da      	mvns	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	400a      	ands	r2, r1
 8004412:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	4603      	mov	r3, r0
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4403      	add	r3, r0
 800442c:	409a      	lsls	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d824      	bhi.n	8004488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3b05      	subs	r3, #5
 8004450:	221f      	movs	r2, #31
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	400a      	ands	r2, r1
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	4618      	mov	r0, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b05      	subs	r3, #5
 800447a:	fa00 f203 	lsl.w	r2, r0, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	635a      	str	r2, [r3, #52]	; 0x34
 8004486:	e04c      	b.n	8004522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d824      	bhi.n	80044da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b23      	subs	r3, #35	; 0x23
 80044a2:	221f      	movs	r2, #31
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4618      	mov	r0, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b23      	subs	r3, #35	; 0x23
 80044cc:	fa00 f203 	lsl.w	r2, r0, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
 80044d8:	e023      	b.n	8004522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	3b41      	subs	r3, #65	; 0x41
 80044ec:	221f      	movs	r2, #31
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	400a      	ands	r2, r1
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	4618      	mov	r0, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	3b41      	subs	r3, #65	; 0x41
 8004516:	fa00 f203 	lsl.w	r2, r0, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_ADC_ConfigChannel+0x250>)
 8004524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a28      	ldr	r2, [pc, #160]	; (80045cc <HAL_ADC_ConfigChannel+0x254>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10f      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1d8>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b12      	cmp	r3, #18
 8004536:	d10b      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_ADC_ConfigChannel+0x254>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d12b      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <HAL_ADC_ConfigChannel+0x258>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <HAL_ADC_ConfigChannel+0x1f4>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b11      	cmp	r3, #17
 800456a:	d122      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <HAL_ADC_ConfigChannel+0x258>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_ADC_ConfigChannel+0x25c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <HAL_ADC_ConfigChannel+0x260>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0c9a      	lsrs	r2, r3, #18
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045a4:	e002      	b.n	80045ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f9      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012300 	.word	0x40012300
 80045cc:	40012000 	.word	0x40012000
 80045d0:	10000012 	.word	0x10000012
 80045d4:	200000e4 	.word	0x200000e4
 80045d8:	431bde83 	.word	0x431bde83

080045dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e4:	4b79      	ldr	r3, [pc, #484]	; (80047cc <ADC_Init+0x1f0>)
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	021a      	lsls	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <ADC_Init+0x1f4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	e00f      	b.n	80046da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0202 	bic.w	r2, r2, #2
 80046e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7e1b      	ldrb	r3, [r3, #24]
 80046f4:	005a      	lsls	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004716:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	3b01      	subs	r3, #1
 8004734:	035a      	lsls	r2, r3, #13
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e007      	b.n	8004750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	3b01      	subs	r3, #1
 800476c:	051a      	lsls	r2, r3, #20
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004792:	025a      	lsls	r2, r3, #9
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	029a      	lsls	r2, r3, #10
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40012300 	.word	0x40012300
 80047d0:	0f000001 	.word	0x0f000001

080047d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0ed      	b.n	80049c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd f8ee 	bl	80019d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004808:	f7ff fd42 	bl	8004290 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800480e:	e012      	b.n	8004836 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004810:	f7ff fd3e 	bl	8004290 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b0a      	cmp	r3, #10
 800481c:	d90b      	bls.n	8004836 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2205      	movs	r2, #5
 800482e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0c5      	b.n	80049c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0e5      	beq.n	8004810 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0202 	bic.w	r2, r2, #2
 8004852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004854:	f7ff fd1c 	bl	8004290 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800485a:	e012      	b.n	8004882 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800485c:	f7ff fd18 	bl	8004290 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b0a      	cmp	r3, #10
 8004868:	d90b      	bls.n	8004882 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2205      	movs	r2, #5
 800487a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e09f      	b.n	80049c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7e1b      	ldrb	r3, [r3, #24]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d108      	bne.n	80048aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e007      	b.n	80048ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7e5b      	ldrb	r3, [r3, #25]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d108      	bne.n	80048d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e007      	b.n	80048e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7e9b      	ldrb	r3, [r3, #26]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d108      	bne.n	80048fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0220 	orr.w	r2, r2, #32
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0220 	bic.w	r2, r2, #32
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7edb      	ldrb	r3, [r3, #27]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0210 	bic.w	r2, r2, #16
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e007      	b.n	8004938 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0210 	orr.w	r2, r2, #16
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7f1b      	ldrb	r3, [r3, #28]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d108      	bne.n	8004952 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e007      	b.n	8004962 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0208 	bic.w	r2, r2, #8
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	7f5b      	ldrb	r3, [r3, #29]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d108      	bne.n	800497c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0204 	orr.w	r2, r2, #4
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e007      	b.n	800498c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	ea42 0103 	orr.w	r1, r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	1e5a      	subs	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d12e      	bne.n	8004a3c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049f6:	f7ff fc4b 	bl	8004290 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049fc:	e012      	b.n	8004a24 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049fe:	f7ff fc47 	bl	8004290 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b0a      	cmp	r3, #10
 8004a0a:	d90b      	bls.n	8004a24 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e012      	b.n	8004a4a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e006      	b.n	8004a4a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b089      	sub	sp, #36	; 0x24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a70:	7ffb      	ldrb	r3, [r7, #31]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d003      	beq.n	8004a7e <HAL_CAN_AddTxMessage+0x2c>
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	f040 80ad 	bne.w	8004bd8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8095 	beq.w	8004bc8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	0e1b      	lsrs	r3, r3, #24
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	409a      	lsls	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	3318      	adds	r3, #24
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	440b      	add	r3, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e00f      	b.n	8004af6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ae0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004aea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3318      	adds	r3, #24
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	440b      	add	r3, r1
 8004af4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	3318      	adds	r3, #24
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	440b      	add	r3, r1
 8004b06:	3304      	adds	r3, #4
 8004b08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	7d1b      	ldrb	r3, [r3, #20]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d111      	bne.n	8004b36 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3304      	adds	r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	440b      	add	r3, r1
 8004b32:	3304      	adds	r3, #4
 8004b34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3307      	adds	r3, #7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	061a      	lsls	r2, r3, #24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3306      	adds	r3, #6
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3305      	adds	r3, #5
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	4313      	orrs	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	3204      	adds	r2, #4
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	4610      	mov	r0, r2
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6811      	ldr	r1, [r2, #0]
 8004b5e:	ea43 0200 	orr.w	r2, r3, r0
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	440b      	add	r3, r1
 8004b68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004b6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3303      	adds	r3, #3
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	061a      	lsls	r2, r3, #24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	4610      	mov	r0, r2
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	6811      	ldr	r1, [r2, #0]
 8004b94:	ea43 0200 	orr.w	r2, r3, r0
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004ba2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3318      	adds	r3, #24
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	4413      	add	r3, r2
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	440b      	add	r3, r1
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e00e      	b.n	8004be6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e006      	b.n	8004be6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d003      	beq.n	8004c16 <HAL_CAN_GetRxMessage+0x24>
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f040 8103 	bne.w	8004e1c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10e      	bne.n	8004c3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d116      	bne.n	8004c58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0f7      	b.n	8004e2a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d107      	bne.n	8004c58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0e8      	b.n	8004e2a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	331b      	adds	r3, #27
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4413      	add	r3, r2
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0204 	and.w	r2, r3, #4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	331b      	adds	r3, #27
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	4413      	add	r3, r2
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0d5b      	lsrs	r3, r3, #21
 8004c86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	331b      	adds	r3, #27
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	4413      	add	r3, r2
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	08db      	lsrs	r3, r3, #3
 8004ca0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	331b      	adds	r3, #27
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	4413      	add	r3, r2
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0202 	and.w	r2, r3, #2
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	331b      	adds	r3, #27
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	611a      	str	r2, [r3, #16]
 8004cdc:	e00b      	b.n	8004cf6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	331b      	adds	r3, #27
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4413      	add	r3, r2
 8004cea:	3304      	adds	r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	331b      	adds	r3, #27
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	331b      	adds	r3, #27
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4413      	add	r3, r2
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0a1a      	lsrs	r2, r3, #8
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0c1a      	lsrs	r2, r3, #16
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	0e1a      	lsrs	r2, r3, #24
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	3303      	adds	r3, #3
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0a1a      	lsrs	r2, r3, #8
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	3305      	adds	r3, #5
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0c1a      	lsrs	r2, r3, #16
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	3306      	adds	r3, #6
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	0e1a      	lsrs	r2, r3, #24
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	3307      	adds	r3, #7
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0220 	orr.w	r2, r2, #32
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e007      	b.n	8004e18 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0220 	orr.w	r2, r2, #32
 8004e16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e006      	b.n	8004e2a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d002      	beq.n	8004e58 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004e52:	7afb      	ldrb	r3, [r7, #11]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d10f      	bne.n	8004e78 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e005      	b.n	8004e78 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <__NVIC_SetPriorityGrouping+0x44>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <__NVIC_SetPriorityGrouping+0x44>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	60d3      	str	r3, [r2, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	f003 0307 	and.w	r3, r3, #7
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	db0b      	blt.n	8004f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	f003 021f 	and.w	r2, r3, #31
 8004f04:	4907      	ldr	r1, [pc, #28]	; (8004f24 <__NVIC_EnableIRQ+0x38>)
 8004f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	e000e100 	.word	0xe000e100

08004f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6039      	str	r1, [r7, #0]
 8004f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db0a      	blt.n	8004f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	490c      	ldr	r1, [pc, #48]	; (8004f74 <__NVIC_SetPriority+0x4c>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f50:	e00a      	b.n	8004f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <__NVIC_SetPriority+0x50>)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	0112      	lsls	r2, r2, #4
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	440b      	add	r3, r1
 8004f66:	761a      	strb	r2, [r3, #24]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000e100 	.word	0xe000e100
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f1c3 0307 	rsb	r3, r3, #7
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	bf28      	it	cs
 8004f9a:	2304      	movcs	r3, #4
 8004f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d902      	bls.n	8004fac <NVIC_EncodePriority+0x30>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3b03      	subs	r3, #3
 8004faa:	e000      	b.n	8004fae <NVIC_EncodePriority+0x32>
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	43d9      	mvns	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd4:	4313      	orrs	r3, r2
         );
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff4c 	bl	8004e88 <__NVIC_SetPriorityGrouping>
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800500a:	f7ff ff61 	bl	8004ed0 <__NVIC_GetPriorityGrouping>
 800500e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	6978      	ldr	r0, [r7, #20]
 8005016:	f7ff ffb1 	bl	8004f7c <NVIC_EncodePriority>
 800501a:	4602      	mov	r2, r0
 800501c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff ff80 	bl	8004f28 <__NVIC_SetPriority>
}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff54 	bl	8004eec <__NVIC_EnableIRQ>
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005058:	f7ff f91a 	bl	8004290 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e099      	b.n	800519c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005088:	e00f      	b.n	80050aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800508a:	f7ff f901 	bl	8004290 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b05      	cmp	r3, #5
 8005096:	d908      	bls.n	80050aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2203      	movs	r2, #3
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e078      	b.n	800519c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e8      	bne.n	800508a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4b38      	ldr	r3, [pc, #224]	; (80051a4 <HAL_DMA_Init+0x158>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b04      	cmp	r3, #4
 8005102:	d107      	bne.n	8005114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4313      	orrs	r3, r2
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b04      	cmp	r3, #4
 800513c:	d117      	bne.n	800516e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f9e9 	bl	8005528 <DMA_CheckFifoParam>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2240      	movs	r2, #64	; 0x40
 8005160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800516a:	2301      	movs	r3, #1
 800516c:	e016      	b.n	800519c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9a0 	bl	80054bc <DMA_CalcBaseAndBitshift>
 800517c:	4603      	mov	r3, r0
 800517e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	223f      	movs	r2, #63	; 0x3f
 8005186:	409a      	lsls	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	f010803f 	.word	0xf010803f

080051a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051b4:	4b8e      	ldr	r3, [pc, #568]	; (80053f0 <HAL_DMA_IRQHandler+0x248>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a8e      	ldr	r2, [pc, #568]	; (80053f4 <HAL_DMA_IRQHandler+0x24c>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	2208      	movs	r2, #8
 80051d4:	409a      	lsls	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01a      	beq.n	8005214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d013      	beq.n	8005214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005200:	2208      	movs	r2, #8
 8005202:	409a      	lsls	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	2201      	movs	r2, #1
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	2201      	movs	r2, #1
 8005238:	409a      	lsls	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f043 0202 	orr.w	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524e:	2204      	movs	r2, #4
 8005250:	409a      	lsls	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526c:	2204      	movs	r2, #4
 800526e:	409a      	lsls	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f043 0204 	orr.w	r2, r3, #4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	2210      	movs	r2, #16
 8005286:	409a      	lsls	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d043      	beq.n	8005318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d03c      	beq.n	8005318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	2210      	movs	r2, #16
 80052a4:	409a      	lsls	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d018      	beq.n	80052ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d024      	beq.n	8005318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	e01f      	b.n	8005318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
 80052e8:	e016      	b.n	8005318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d107      	bne.n	8005308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0208 	bic.w	r2, r2, #8
 8005306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	2220      	movs	r2, #32
 800531e:	409a      	lsls	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 808f 	beq.w	8005448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8087 	beq.w	8005448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533e:	2220      	movs	r2, #32
 8005340:	409a      	lsls	r2, r3
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b05      	cmp	r3, #5
 8005350:	d136      	bne.n	80053c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0216 	bic.w	r2, r2, #22
 8005360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_DMA_IRQHandler+0x1da>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	223f      	movs	r2, #63	; 0x3f
 8005398:	409a      	lsls	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d07e      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
        }
        return;
 80053be:	e079      	b.n	80054b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d031      	beq.n	8005448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
 80053ec:	e02c      	b.n	8005448 <HAL_DMA_IRQHandler+0x2a0>
 80053ee:	bf00      	nop
 80053f0:	200000e4 	.word	0x200000e4
 80053f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d023      	beq.n	8005448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
 8005408:	e01e      	b.n	8005448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0210 	bic.w	r2, r2, #16
 8005426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	2b00      	cmp	r3, #0
 800544e:	d032      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d022      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2205      	movs	r2, #5
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	3301      	adds	r3, #1
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	429a      	cmp	r2, r3
 800547e:	d307      	bcc.n	8005490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f2      	bne.n	8005474 <HAL_DMA_IRQHandler+0x2cc>
 800548e:	e000      	b.n	8005492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
 80054b2:	e000      	b.n	80054b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80054b4:	bf00      	nop
    }
  }
}
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	3b10      	subs	r3, #16
 80054cc:	4a14      	ldr	r2, [pc, #80]	; (8005520 <DMA_CalcBaseAndBitshift+0x64>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <DMA_CalcBaseAndBitshift+0x68>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d909      	bls.n	80054fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	659a      	str	r2, [r3, #88]	; 0x58
 80054fc:	e007      	b.n	800550e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	aaaaaaab 	.word	0xaaaaaaab
 8005524:	0800d14c 	.word	0x0800d14c

08005528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11f      	bne.n	8005582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d856      	bhi.n	80055f6 <DMA_CheckFifoParam+0xce>
 8005548:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <DMA_CheckFifoParam+0x28>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	08005561 	.word	0x08005561
 8005554:	08005573 	.word	0x08005573
 8005558:	08005561 	.word	0x08005561
 800555c:	080055f7 	.word	0x080055f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d046      	beq.n	80055fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005570:	e043      	b.n	80055fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800557a:	d140      	bne.n	80055fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005580:	e03d      	b.n	80055fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558a:	d121      	bne.n	80055d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d837      	bhi.n	8005602 <DMA_CheckFifoParam+0xda>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <DMA_CheckFifoParam+0x70>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055af 	.word	0x080055af
 80055a0:	080055a9 	.word	0x080055a9
 80055a4:	080055c1 	.word	0x080055c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e030      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d025      	beq.n	8005606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055be:	e022      	b.n	8005606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055c8:	d11f      	bne.n	800560a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055ce:	e01c      	b.n	800560a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d903      	bls.n	80055de <DMA_CheckFifoParam+0xb6>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d003      	beq.n	80055e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055dc:	e018      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      break;
 80055e2:	e015      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e00b      	b.n	800560e <DMA_CheckFifoParam+0xe6>
      break;
 80055f6:	bf00      	nop
 80055f8:	e00a      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;
 80055fa:	bf00      	nop
 80055fc:	e008      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;
 80055fe:	bf00      	nop
 8005600:	e006      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;
 8005602:	bf00      	nop
 8005604:	e004      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;   
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
    }
  } 
  
  return status; 
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop

08005620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	; 0x24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	e165      	b.n	8005908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800563c:	2201      	movs	r2, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	f040 8154 	bne.w	8005902 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d005      	beq.n	8005672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566e:	2b02      	cmp	r3, #2
 8005670:	d130      	bne.n	80056d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	2203      	movs	r2, #3
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056a8:	2201      	movs	r2, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 0201 	and.w	r2, r3, #1
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d017      	beq.n	8005710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d123      	bne.n	8005764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	08da      	lsrs	r2, r3, #3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3208      	adds	r2, #8
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	220f      	movs	r2, #15
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	08da      	lsrs	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3208      	adds	r2, #8
 800575e:	69b9      	ldr	r1, [r7, #24]
 8005760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	2203      	movs	r2, #3
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0203 	and.w	r2, r3, #3
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80ae 	beq.w	8005902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	4b5d      	ldr	r3, [pc, #372]	; (8005920 <HAL_GPIO_Init+0x300>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	4a5c      	ldr	r2, [pc, #368]	; (8005920 <HAL_GPIO_Init+0x300>)
 80057b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b4:	6453      	str	r3, [r2, #68]	; 0x44
 80057b6:	4b5a      	ldr	r3, [pc, #360]	; (8005920 <HAL_GPIO_Init+0x300>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c2:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_GPIO_Init+0x304>)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3302      	adds	r3, #2
 80057ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	220f      	movs	r2, #15
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43db      	mvns	r3, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a4f      	ldr	r2, [pc, #316]	; (8005928 <HAL_GPIO_Init+0x308>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d025      	beq.n	800583a <HAL_GPIO_Init+0x21a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a4e      	ldr	r2, [pc, #312]	; (800592c <HAL_GPIO_Init+0x30c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01f      	beq.n	8005836 <HAL_GPIO_Init+0x216>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a4d      	ldr	r2, [pc, #308]	; (8005930 <HAL_GPIO_Init+0x310>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d019      	beq.n	8005832 <HAL_GPIO_Init+0x212>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a4c      	ldr	r2, [pc, #304]	; (8005934 <HAL_GPIO_Init+0x314>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <HAL_GPIO_Init+0x20e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4b      	ldr	r2, [pc, #300]	; (8005938 <HAL_GPIO_Init+0x318>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00d      	beq.n	800582a <HAL_GPIO_Init+0x20a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a4a      	ldr	r2, [pc, #296]	; (800593c <HAL_GPIO_Init+0x31c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <HAL_GPIO_Init+0x206>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a49      	ldr	r2, [pc, #292]	; (8005940 <HAL_GPIO_Init+0x320>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_GPIO_Init+0x202>
 800581e:	2306      	movs	r3, #6
 8005820:	e00c      	b.n	800583c <HAL_GPIO_Init+0x21c>
 8005822:	2307      	movs	r3, #7
 8005824:	e00a      	b.n	800583c <HAL_GPIO_Init+0x21c>
 8005826:	2305      	movs	r3, #5
 8005828:	e008      	b.n	800583c <HAL_GPIO_Init+0x21c>
 800582a:	2304      	movs	r3, #4
 800582c:	e006      	b.n	800583c <HAL_GPIO_Init+0x21c>
 800582e:	2303      	movs	r3, #3
 8005830:	e004      	b.n	800583c <HAL_GPIO_Init+0x21c>
 8005832:	2302      	movs	r3, #2
 8005834:	e002      	b.n	800583c <HAL_GPIO_Init+0x21c>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_GPIO_Init+0x21c>
 800583a:	2300      	movs	r3, #0
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	f002 0203 	and.w	r2, r2, #3
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	4093      	lsls	r3, r2
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800584c:	4935      	ldr	r1, [pc, #212]	; (8005924 <HAL_GPIO_Init+0x304>)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	089b      	lsrs	r3, r3, #2
 8005852:	3302      	adds	r3, #2
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_GPIO_Init+0x324>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800587e:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_GPIO_Init+0x324>)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005884:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_GPIO_Init+0x324>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <HAL_GPIO_Init+0x324>)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ae:	4b25      	ldr	r3, [pc, #148]	; (8005944 <HAL_GPIO_Init+0x324>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_GPIO_Init+0x324>)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_GPIO_Init+0x324>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058fc:	4a11      	ldr	r2, [pc, #68]	; (8005944 <HAL_GPIO_Init+0x324>)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	f67f ae96 	bls.w	800563c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3724      	adds	r7, #36	; 0x24
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	40013800 	.word	0x40013800
 8005928:	40020000 	.word	0x40020000
 800592c:	40020400 	.word	0x40020400
 8005930:	40020800 	.word	0x40020800
 8005934:	40020c00 	.word	0x40020c00
 8005938:	40021000 	.word	0x40021000
 800593c:	40021400 	.word	0x40021400
 8005940:	40021800 	.word	0x40021800
 8005944:	40013c00 	.word	0x40013c00

08005948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	887b      	ldrh	r3, [r7, #2]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e001      	b.n	800596a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
 8005984:	4613      	mov	r3, r2
 8005986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005988:	787b      	ldrb	r3, [r7, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005994:	e003      	b.n	800599e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	041a      	lsls	r2, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	619a      	str	r2, [r3, #24]
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e034      	b.n	8005a26 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80059c4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f245 5255 	movw	r2, #21845	; 0x5555
 80059ce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6852      	ldr	r2, [r2, #4]
 80059d8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6892      	ldr	r2, [r2, #8]
 80059e2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80059e4:	f7fe fc54 	bl	8004290 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059ea:	e00f      	b.n	8005a0c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80059ec:	f7fe fc50 	bl	8004290 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b31      	cmp	r3, #49	; 0x31
 80059f8:	d908      	bls.n	8005a0c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e00c      	b.n	8005a26 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e8      	bne.n	80059ec <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0cc      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a64:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d90c      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b65      	ldr	r3, [pc, #404]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	4b63      	ldr	r3, [pc, #396]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0b8      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa4:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4a58      	ldr	r2, [pc, #352]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005abc:	4b53      	ldr	r3, [pc, #332]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4a52      	ldr	r2, [pc, #328]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac8:	4b50      	ldr	r3, [pc, #320]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	494d      	ldr	r1, [pc, #308]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d044      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aee:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d119      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e07f      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d003      	beq.n	8005b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0e:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e06f      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e067      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f023 0203 	bic.w	r2, r3, #3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4934      	ldr	r1, [pc, #208]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b40:	f7fe fba6 	bl	8004290 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b48:	f7fe fba2 	bl	8004290 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e04f      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	4b2b      	ldr	r3, [pc, #172]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 020c 	and.w	r2, r3, #12
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1eb      	bne.n	8005b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20c      	bcs.n	8005b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e032      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4916      	ldr	r1, [pc, #88]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	490e      	ldr	r1, [pc, #56]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bd6:	f000 f887 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	490a      	ldr	r1, [pc, #40]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005be8:	5ccb      	ldrb	r3, [r1, r3]
 8005bea:	fa22 f303 	lsr.w	r3, r2, r3
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd fde0 	bl	80037bc <HAL_InitTick>

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40023c00 	.word	0x40023c00
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	0800d134 	.word	0x0800d134
 8005c14:	200000e4 	.word	0x200000e4
 8005c18:	200000e8 	.word	0x200000e8

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200000e4 	.word	0x200000e4

08005c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c38:	f7ff fff0 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4903      	ldr	r1, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023800 	.word	0x40023800
 8005c58:	0800d144 	.word	0x0800d144

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c60:	f7ff ffdc 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0b5b      	lsrs	r3, r3, #13
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800d144 	.word	0x0800d144

08005c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	220f      	movs	r2, #15
 8005c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0203 	and.w	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <HAL_RCC_GetClockConfig+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40023c00 	.word	0x40023c00

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b0a6      	sub	sp, #152	; 0x98
 8005cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0e:	4bc8      	ldr	r3, [pc, #800]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b0c      	cmp	r3, #12
 8005d18:	f200 817e 	bhi.w	8006018 <HAL_RCC_GetSysClockFreq+0x330>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08006019 	.word	0x08006019
 8005d2c:	08006019 	.word	0x08006019
 8005d30:	08006019 	.word	0x08006019
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	08006019 	.word	0x08006019
 8005d3c:	08006019 	.word	0x08006019
 8005d40:	08006019 	.word	0x08006019
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08006019 	.word	0x08006019
 8005d4c:	08006019 	.word	0x08006019
 8005d50:	08006019 	.word	0x08006019
 8005d54:	08005ed3 	.word	0x08005ed3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d58:	4bb6      	ldr	r3, [pc, #728]	; (8006034 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005d5e:	e15f      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d60:	4bb5      	ldr	r3, [pc, #724]	; (8006038 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005d66:	e15b      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d68:	4bb1      	ldr	r3, [pc, #708]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d74:	4bae      	ldr	r3, [pc, #696]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d031      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d80:	4bab      	ldr	r3, [pc, #684]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	2200      	movs	r2, #0
 8005d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	663b      	str	r3, [r7, #96]	; 0x60
 8005d94:	2300      	movs	r3, #0
 8005d96:	667b      	str	r3, [r7, #100]	; 0x64
 8005d98:	4ba7      	ldr	r3, [pc, #668]	; (8006038 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005d9e:	462a      	mov	r2, r5
 8005da0:	fb03 f202 	mul.w	r2, r3, r2
 8005da4:	2300      	movs	r3, #0
 8005da6:	4621      	mov	r1, r4
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	4aa2      	ldr	r2, [pc, #648]	; (8006038 <HAL_RCC_GetSysClockFreq+0x350>)
 8005db0:	4621      	mov	r1, r4
 8005db2:	fba1 1202 	umull	r1, r2, r1, r2
 8005db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005db8:	460a      	mov	r2, r1
 8005dba:	67ba      	str	r2, [r7, #120]	; 0x78
 8005dbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005dbe:	4413      	add	r3, r2
 8005dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005dcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005dd4:	f7fa fe62 	bl	8000a9c <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4613      	mov	r3, r2
 8005dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005de2:	e064      	b.n	8005eae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de4:	4b92      	ldr	r3, [pc, #584]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	099b      	lsrs	r3, r3, #6
 8005dea:	2200      	movs	r2, #0
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
 8005dee:	657a      	str	r2, [r7, #84]	; 0x54
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df8:	2300      	movs	r3, #0
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005e00:	4622      	mov	r2, r4
 8005e02:	462b      	mov	r3, r5
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	0159      	lsls	r1, r3, #5
 8005e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e12:	0150      	lsls	r0, r2, #5
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4621      	mov	r1, r4
 8005e1a:	1a51      	subs	r1, r2, r1
 8005e1c:	6139      	str	r1, [r7, #16]
 8005e1e:	4629      	mov	r1, r5
 8005e20:	eb63 0301 	sbc.w	r3, r3, r1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e32:	4659      	mov	r1, fp
 8005e34:	018b      	lsls	r3, r1, #6
 8005e36:	4651      	mov	r1, sl
 8005e38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	018a      	lsls	r2, r1, #6
 8005e40:	4651      	mov	r1, sl
 8005e42:	ebb2 0801 	subs.w	r8, r2, r1
 8005e46:	4659      	mov	r1, fp
 8005e48:	eb63 0901 	sbc.w	r9, r3, r1
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e60:	4690      	mov	r8, r2
 8005e62:	4699      	mov	r9, r3
 8005e64:	4623      	mov	r3, r4
 8005e66:	eb18 0303 	adds.w	r3, r8, r3
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	eb49 0303 	adc.w	r3, r9, r3
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e80:	4629      	mov	r1, r5
 8005e82:	028b      	lsls	r3, r1, #10
 8005e84:	4621      	mov	r1, r4
 8005e86:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	028a      	lsls	r2, r1, #10
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e96:	2200      	movs	r2, #0
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ea0:	f7fa fdfc 	bl	8000a9c <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eae:	4b60      	ldr	r3, [pc, #384]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005ec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ed0:	e0a6      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed2:	4b57      	ldr	r3, [pc, #348]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ede:	4b54      	ldr	r3, [pc, #336]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02a      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b51      	ldr	r3, [pc, #324]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005efc:	2100      	movs	r1, #0
 8005efe:	4b4e      	ldr	r3, [pc, #312]	; (8006038 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f00:	fb03 f201 	mul.w	r2, r3, r1
 8005f04:	2300      	movs	r3, #0
 8005f06:	fb00 f303 	mul.w	r3, r0, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4a4a      	ldr	r2, [pc, #296]	; (8006038 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f12:	677a      	str	r2, [r7, #116]	; 0x74
 8005f14:	460a      	mov	r2, r1
 8005f16:	673a      	str	r2, [r7, #112]	; 0x70
 8005f18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f1a:	4413      	add	r3, r2
 8005f1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f22:	2200      	movs	r2, #0
 8005f24:	633b      	str	r3, [r7, #48]	; 0x30
 8005f26:	637a      	str	r2, [r7, #52]	; 0x34
 8005f28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005f30:	f7fa fdb4 	bl	8000a9c <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4613      	mov	r3, r2
 8005f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f3e:	e05b      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	099b      	lsrs	r3, r3, #6
 8005f46:	2200      	movs	r2, #0
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	f04f 0000 	mov.w	r0, #0
 8005f64:	f04f 0100 	mov.w	r1, #0
 8005f68:	0159      	lsls	r1, r3, #5
 8005f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f6e:	0150      	lsls	r0, r2, #5
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4641      	mov	r1, r8
 8005f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f94:	ebb2 040a 	subs.w	r4, r2, sl
 8005f98:	eb63 050b 	sbc.w	r5, r3, fp
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	00eb      	lsls	r3, r5, #3
 8005fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005faa:	00e2      	lsls	r2, r4, #3
 8005fac:	4614      	mov	r4, r2
 8005fae:	461d      	mov	r5, r3
 8005fb0:	4643      	mov	r3, r8
 8005fb2:	18e3      	adds	r3, r4, r3
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	eb45 0303 	adc.w	r3, r5, r3
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fca:	4629      	mov	r1, r5
 8005fcc:	028b      	lsls	r3, r1, #10
 8005fce:	4621      	mov	r1, r4
 8005fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	028a      	lsls	r2, r1, #10
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	61fa      	str	r2, [r7, #28]
 8005fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fea:	f7fa fd57 	bl	8000a9c <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	0f1b      	lsrs	r3, r3, #28
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800600a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006016:	e003      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_GetSysClockFreq+0x34c>)
 800601a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800601e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006024:	4618      	mov	r0, r3
 8006026:	3798      	adds	r7, #152	; 0x98
 8006028:	46bd      	mov	sp, r7
 800602a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800
 8006034:	00f42400 	.word	0x00f42400
 8006038:	017d7840 	.word	0x017d7840

0800603c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e28d      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8083 	beq.w	8006162 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800605c:	4b94      	ldr	r3, [pc, #592]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 030c 	and.w	r3, r3, #12
 8006064:	2b04      	cmp	r3, #4
 8006066:	d019      	beq.n	800609c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006068:	4b91      	ldr	r3, [pc, #580]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006070:	2b08      	cmp	r3, #8
 8006072:	d106      	bne.n	8006082 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006074:	4b8e      	ldr	r3, [pc, #568]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006080:	d00c      	beq.n	800609c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006082:	4b8b      	ldr	r3, [pc, #556]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d112      	bne.n	80060b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800608e:	4b88      	ldr	r3, [pc, #544]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609a:	d10b      	bne.n	80060b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609c:	4b84      	ldr	r3, [pc, #528]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05b      	beq.n	8006160 <HAL_RCC_OscConfig+0x124>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d157      	bne.n	8006160 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e25a      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060bc:	d106      	bne.n	80060cc <HAL_RCC_OscConfig+0x90>
 80060be:	4b7c      	ldr	r3, [pc, #496]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a7b      	ldr	r2, [pc, #492]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e01d      	b.n	8006108 <HAL_RCC_OscConfig+0xcc>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d4:	d10c      	bne.n	80060f0 <HAL_RCC_OscConfig+0xb4>
 80060d6:	4b76      	ldr	r3, [pc, #472]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a75      	ldr	r2, [pc, #468]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b73      	ldr	r3, [pc, #460]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a72      	ldr	r2, [pc, #456]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e00b      	b.n	8006108 <HAL_RCC_OscConfig+0xcc>
 80060f0:	4b6f      	ldr	r3, [pc, #444]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6e      	ldr	r2, [pc, #440]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b6c      	ldr	r3, [pc, #432]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a6b      	ldr	r2, [pc, #428]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d013      	beq.n	8006138 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fe f8be 	bl	8004290 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006118:	f7fe f8ba 	bl	8004290 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b64      	cmp	r3, #100	; 0x64
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e21f      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	4b61      	ldr	r3, [pc, #388]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0xdc>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fe f8aa 	bl	8004290 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006140:	f7fe f8a6 	bl	8004290 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e20b      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	4b57      	ldr	r3, [pc, #348]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0x104>
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d06f      	beq.n	800624e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800616e:	4b50      	ldr	r3, [pc, #320]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b00      	cmp	r3, #0
 8006178:	d017      	beq.n	80061aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800617a:	4b4d      	ldr	r3, [pc, #308]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006182:	2b08      	cmp	r3, #8
 8006184:	d105      	bne.n	8006192 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006186:	4b4a      	ldr	r3, [pc, #296]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006192:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d11c      	bne.n	80061d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800619e:	4b44      	ldr	r3, [pc, #272]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d116      	bne.n	80061d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061aa:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_RCC_OscConfig+0x186>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d001      	beq.n	80061c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e1d3      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c2:	4b3b      	ldr	r3, [pc, #236]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4937      	ldr	r1, [pc, #220]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d6:	e03a      	b.n	800624e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061e0:	4b34      	ldr	r3, [pc, #208]	; (80062b4 <HAL_RCC_OscConfig+0x278>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fe f853 	bl	8004290 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ee:	f7fe f84f 	bl	8004290 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e1b4      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620c:	4b28      	ldr	r3, [pc, #160]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4925      	ldr	r1, [pc, #148]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]
 8006220:	e015      	b.n	800624e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006222:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <HAL_RCC_OscConfig+0x278>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fe f832 	bl	8004290 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006230:	f7fe f82e 	bl	8004290 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e193      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d036      	beq.n	80062c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <HAL_RCC_OscConfig+0x27c>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006268:	f7fe f812 	bl	8004290 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006270:	f7fe f80e 	bl	8004290 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e173      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_OscConfig+0x274>)
 8006284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0x234>
 800628e:	e01b      	b.n	80062c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_OscConfig+0x27c>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006296:	f7fd fffb 	bl	8004290 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800629c:	e00e      	b.n	80062bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800629e:	f7fd fff7 	bl	8004290 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d907      	bls.n	80062bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e15c      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
 80062b0:	40023800 	.word	0x40023800
 80062b4:	42470000 	.word	0x42470000
 80062b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062bc:	4b8a      	ldr	r3, [pc, #552]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80062be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1ea      	bne.n	800629e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8097 	beq.w	8006404 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062da:	4b83      	ldr	r3, [pc, #524]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10f      	bne.n	8006306 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	4b7f      	ldr	r3, [pc, #508]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	4a7e      	ldr	r2, [pc, #504]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f4:	6413      	str	r3, [r2, #64]	; 0x40
 80062f6:	4b7c      	ldr	r3, [pc, #496]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fe:	60bb      	str	r3, [r7, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006306:	4b79      	ldr	r3, [pc, #484]	; (80064ec <HAL_RCC_OscConfig+0x4b0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d118      	bne.n	8006344 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006312:	4b76      	ldr	r3, [pc, #472]	; (80064ec <HAL_RCC_OscConfig+0x4b0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a75      	ldr	r2, [pc, #468]	; (80064ec <HAL_RCC_OscConfig+0x4b0>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800631c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800631e:	f7fd ffb7 	bl	8004290 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006326:	f7fd ffb3 	bl	8004290 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e118      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	4b6c      	ldr	r3, [pc, #432]	; (80064ec <HAL_RCC_OscConfig+0x4b0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d106      	bne.n	800635a <HAL_RCC_OscConfig+0x31e>
 800634c:	4b66      	ldr	r3, [pc, #408]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	4a65      	ldr	r2, [pc, #404]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
 8006358:	e01c      	b.n	8006394 <HAL_RCC_OscConfig+0x358>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b05      	cmp	r3, #5
 8006360:	d10c      	bne.n	800637c <HAL_RCC_OscConfig+0x340>
 8006362:	4b61      	ldr	r3, [pc, #388]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a60      	ldr	r2, [pc, #384]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006368:	f043 0304 	orr.w	r3, r3, #4
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	4b5e      	ldr	r3, [pc, #376]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	4a5d      	ldr	r2, [pc, #372]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	6713      	str	r3, [r2, #112]	; 0x70
 800637a:	e00b      	b.n	8006394 <HAL_RCC_OscConfig+0x358>
 800637c:	4b5a      	ldr	r3, [pc, #360]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a59      	ldr	r2, [pc, #356]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006382:	f023 0301 	bic.w	r3, r3, #1
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
 8006388:	4b57      	ldr	r3, [pc, #348]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	4a56      	ldr	r2, [pc, #344]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 800638e:	f023 0304 	bic.w	r3, r3, #4
 8006392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639c:	f7fd ff78 	bl	8004290 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a2:	e00a      	b.n	80063ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a4:	f7fd ff74 	bl	8004290 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e0d7      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ba:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ee      	beq.n	80063a4 <HAL_RCC_OscConfig+0x368>
 80063c6:	e014      	b.n	80063f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c8:	f7fd ff62 	bl	8004290 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d0:	f7fd ff5e 	bl	8004290 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	; 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e0c1      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e6:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1ee      	bne.n	80063d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d105      	bne.n	8006404 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063f8:	4b3b      	ldr	r3, [pc, #236]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	4a3a      	ldr	r2, [pc, #232]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80063fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80ad 	beq.w	8006568 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800640e:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b08      	cmp	r3, #8
 8006418:	d060      	beq.n	80064dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d145      	bne.n	80064ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006422:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <HAL_RCC_OscConfig+0x4b4>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fd ff32 	bl	8004290 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006430:	f7fd ff2e 	bl	8004290 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e093      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69da      	ldr	r2, [r3, #28]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	3b01      	subs	r3, #1
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	061b      	lsls	r3, r3, #24
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	491b      	ldr	r1, [pc, #108]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 800647c:	4313      	orrs	r3, r2
 800647e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006480:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <HAL_RCC_OscConfig+0x4b4>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fd ff03 	bl	8004290 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800648e:	f7fd feff 	bl	8004290 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e064      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x452>
 80064ac:	e05c      	b.n	8006568 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ae:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <HAL_RCC_OscConfig+0x4b4>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd feec 	bl	8004290 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064bc:	f7fd fee8 	bl	8004290 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e04d      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCC_OscConfig+0x4ac>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x480>
 80064da:	e045      	b.n	8006568 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d107      	bne.n	80064f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e040      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40007000 	.word	0x40007000
 80064f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064f4:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <HAL_RCC_OscConfig+0x538>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d030      	beq.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650c:	429a      	cmp	r2, r3
 800650e:	d129      	bne.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d122      	bne.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006524:	4013      	ands	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800652a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800652c:	4293      	cmp	r3, r2
 800652e:	d119      	bne.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	3b01      	subs	r3, #1
 800653e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006540:	429a      	cmp	r2, r3
 8006542:	d10f      	bne.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006550:	429a      	cmp	r2, r3
 8006552:	d107      	bne.n	8006564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d001      	beq.n	8006568 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40023800 	.word	0x40023800

08006578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e041      	b.n	800660e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f839 	bl	8006616 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f000 faee 	bl	8006b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d001      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e04e      	b.n	80066e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d022      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d01d      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d018      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1e      	ldr	r2, [pc, #120]	; (80066f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_TIM_Base_Start_IT+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00e      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIM_Base_Start_IT+0xd4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d009      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_TIM_Base_Start_IT+0xd8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x80>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_TIM_Base_Start_IT+0xdc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d111      	bne.n	80066d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d010      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0201 	orr.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	e007      	b.n	80066e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40001800 	.word	0x40001800

0800670c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e041      	b.n	80067a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fd fa22 	bl	8003b7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f000 fa24 	bl	8006b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f06f 0202 	mvn.w	r2, #2
 80067de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9b0 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 80067fa:	e005      	b.n	8006808 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9a2 	bl	8006b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9b3 	bl	8006b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d020      	beq.n	800685a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01b      	beq.n	800685a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0204 	mvn.w	r2, #4
 800682a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f98a 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 8006846:	e005      	b.n	8006854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f97c 	bl	8006b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f98d 	bl	8006b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d020      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d01b      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f06f 0208 	mvn.w	r2, #8
 8006876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f964 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 8006892:	e005      	b.n	80068a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f956 	bl	8006b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f967 	bl	8006b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d020      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01b      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f06f 0210 	mvn.w	r2, #16
 80068c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2208      	movs	r2, #8
 80068c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f93e 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 80068de:	e005      	b.n	80068ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f930 	bl	8006b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f941 	bl	8006b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0201 	mvn.w	r2, #1
 800690e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fc fa63 	bl	8002ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fc20 	bl	800717a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00c      	beq.n	800695e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f912 	bl	8006b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0220 	mvn.w	r2, #32
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fbf2 	bl	8007166 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e088      	b.n	8006aba <HAL_TIM_IC_ConfigChannel+0x130>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11b      	bne.n	80069ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80069c6:	f000 fa25 	bl	8006e14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699a      	ldr	r2, [r3, #24]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 020c 	bic.w	r2, r2, #12
 80069d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6999      	ldr	r1, [r3, #24]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	619a      	str	r2, [r3, #24]
 80069ec:	e060      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d11c      	bne.n	8006a2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006a04:	f000 faa9 	bl	8006f5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6999      	ldr	r1, [r3, #24]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	619a      	str	r2, [r3, #24]
 8006a2c:	e040      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a44:	f000 faf6 	bl	8007034 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 020c 	bic.w	r2, r2, #12
 8006a56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69d9      	ldr	r1, [r3, #28]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	61da      	str	r2, [r3, #28]
 8006a6a:	e021      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d11c      	bne.n	8006aac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006a82:	f000 fb13 	bl	80070ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	021a      	lsls	r2, r3, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	61da      	str	r2, [r3, #28]
 8006aaa:	e001      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e031      	b.n	8006b3e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8ff 	bl	8006cf0 <TIM_SlaveTimer_SetConfig>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e018      	b.n	8006b3e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a46      	ldr	r2, [pc, #280]	; (8006cc4 <TIM_Base_SetConfig+0x12c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb6:	d00f      	beq.n	8006bd8 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a43      	ldr	r2, [pc, #268]	; (8006cc8 <TIM_Base_SetConfig+0x130>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00b      	beq.n	8006bd8 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a42      	ldr	r2, [pc, #264]	; (8006ccc <TIM_Base_SetConfig+0x134>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a41      	ldr	r2, [pc, #260]	; (8006cd0 <TIM_Base_SetConfig+0x138>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_Base_SetConfig+0x40>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a40      	ldr	r2, [pc, #256]	; (8006cd4 <TIM_Base_SetConfig+0x13c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d108      	bne.n	8006bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a35      	ldr	r2, [pc, #212]	; (8006cc4 <TIM_Base_SetConfig+0x12c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d02b      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d027      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a32      	ldr	r2, [pc, #200]	; (8006cc8 <TIM_Base_SetConfig+0x130>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d023      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a31      	ldr	r2, [pc, #196]	; (8006ccc <TIM_Base_SetConfig+0x134>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d01f      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a30      	ldr	r2, [pc, #192]	; (8006cd0 <TIM_Base_SetConfig+0x138>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01b      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <TIM_Base_SetConfig+0x13c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d017      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <TIM_Base_SetConfig+0x140>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <TIM_Base_SetConfig+0x144>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00f      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ce0 <TIM_Base_SetConfig+0x148>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00b      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2b      	ldr	r2, [pc, #172]	; (8006ce4 <TIM_Base_SetConfig+0x14c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d007      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <TIM_Base_SetConfig+0x150>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a29      	ldr	r2, [pc, #164]	; (8006cec <TIM_Base_SetConfig+0x154>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d108      	bne.n	8006c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <TIM_Base_SetConfig+0x12c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_Base_SetConfig+0xf8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <TIM_Base_SetConfig+0x13c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d103      	bne.n	8006c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d105      	bne.n	8006cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800
 8006ce4:	40001800 	.word	0x40001800
 8006ce8:	40001c00 	.word	0x40001c00
 8006cec:	40002000 	.word	0x40002000

08006cf0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b70      	cmp	r3, #112	; 0x70
 8006d38:	d01a      	beq.n	8006d70 <TIM_SlaveTimer_SetConfig+0x80>
 8006d3a:	2b70      	cmp	r3, #112	; 0x70
 8006d3c:	d860      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d3e:	2b60      	cmp	r3, #96	; 0x60
 8006d40:	d054      	beq.n	8006dec <TIM_SlaveTimer_SetConfig+0xfc>
 8006d42:	2b60      	cmp	r3, #96	; 0x60
 8006d44:	d85c      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d46:	2b50      	cmp	r3, #80	; 0x50
 8006d48:	d046      	beq.n	8006dd8 <TIM_SlaveTimer_SetConfig+0xe8>
 8006d4a:	2b50      	cmp	r3, #80	; 0x50
 8006d4c:	d858      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d019      	beq.n	8006d86 <TIM_SlaveTimer_SetConfig+0x96>
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d854      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d56:	2b30      	cmp	r3, #48	; 0x30
 8006d58:	d055      	beq.n	8006e06 <TIM_SlaveTimer_SetConfig+0x116>
 8006d5a:	2b30      	cmp	r3, #48	; 0x30
 8006d5c:	d850      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d051      	beq.n	8006e06 <TIM_SlaveTimer_SetConfig+0x116>
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d84c      	bhi.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04d      	beq.n	8006e06 <TIM_SlaveTimer_SetConfig+0x116>
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d04b      	beq.n	8006e06 <TIM_SlaveTimer_SetConfig+0x116>
 8006d6e:	e047      	b.n	8006e00 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006d80:	f000 f9d1 	bl	8007126 <TIM_ETR_SetConfig>
      break;
 8006d84:	e040      	b.n	8006e08 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d101      	bne.n	8006d92 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e03b      	b.n	8006e0a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
      break;
 8006dd6:	e017      	b.n	8006e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de4:	461a      	mov	r2, r3
 8006de6:	f000 f889 	bl	8006efc <TIM_TI1_ConfigInputStage>
      break;
 8006dea:	e00d      	b.n	8006e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f000 f8eb 	bl	8006fd4 <TIM_TI2_ConfigInputStage>
      break;
 8006dfe:	e003      	b.n	8006e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	e000      	b.n	8006e08 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006e06:	bf00      	nop
  }

  return status;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0201 	bic.w	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <TIM_TI1_SetConfig+0xcc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01b      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d017      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <TIM_TI1_SetConfig+0xd0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <TIM_TI1_SetConfig+0xd4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00f      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a23      	ldr	r2, [pc, #140]	; (8006eec <TIM_TI1_SetConfig+0xd8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00b      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <TIM_TI1_SetConfig+0xdc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <TIM_TI1_SetConfig+0xe0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_TI1_SetConfig+0x66>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a20      	ldr	r2, [pc, #128]	; (8006ef8 <TIM_TI1_SetConfig+0xe4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <TIM_TI1_SetConfig+0x6a>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <TIM_TI1_SetConfig+0x6c>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e003      	b.n	8006e9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f023 030a 	bic.w	r3, r3, #10
 8006eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 030a 	and.w	r3, r3, #10
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40010400 	.word	0x40010400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40001800 	.word	0x40001800

08006efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f023 0201 	bic.w	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 030a 	bic.w	r3, r3, #10
 8006f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0210 	bic.w	r2, r3, #16
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0210 	bic.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	031b      	lsls	r3, r3, #12
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f023 0303 	bic.w	r3, r3, #3
 8007060:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007070:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	b2db      	uxtb	r3, r3
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007084:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	031b      	lsls	r3, r3, #12
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80070fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	031b      	lsls	r3, r3, #12
 8007104:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007126:	b480      	push	{r7}
 8007128:	b087      	sub	sp, #28
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	021a      	lsls	r2, r3, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	431a      	orrs	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4313      	orrs	r3, r2
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	609a      	str	r2, [r3, #8]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e033      	b.n	8007208 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7fc fd55 	bl	8003c64 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f90a 	bl	80073dc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695a      	ldr	r2, [r3, #20]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071e6:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071f6:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af02      	add	r7, sp, #8
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d17c      	bne.n	8007326 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_USART_Transmit+0x28>
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e075      	b.n	8007328 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_USART_Transmit+0x3a>
 8007246:	2302      	movs	r3, #2
 8007248:	e06e      	b.n	8007328 <HAL_USART_Transmit+0x118>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2212      	movs	r2, #18
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007260:	f7fd f816 	bl	8004290 <HAL_GetTick>
 8007264:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727a:	d108      	bne.n	800728e <HAL_USART_Transmit+0x7e>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	e003      	b.n	8007296 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8007296:	e02a      	b.n	80072ee <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f844 	bl	8007330 <USART_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e03a      	b.n	8007328 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c6:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	3302      	adds	r3, #2
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e007      	b.n	80072e0 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	3301      	adds	r3, #1
 80072de:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1cf      	bne.n	8007298 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2200      	movs	r2, #0
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f814 	bl	8007330 <USART_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e00a      	b.n	8007328 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007340:	e038      	b.n	80073b4 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d034      	beq.n	80073b4 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <USART_WaitOnFlagUntilTimeout+0x30>
 8007350:	f7fc ff9e 	bl	8004290 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	429a      	cmp	r2, r3
 800735e:	d229      	bcs.n	80073b4 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800736e:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0220 	bic.w	r2, r2, #32
 800737e:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800738e:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e00f      	b.n	80073d4 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d0b7      	beq.n	8007342 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b0c6      	sub	sp, #280	; 0x118
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	f021 030c 	bic.w	r3, r1, #12
 8007400:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007412:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007416:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007424:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007426:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	431a      	orrs	r2, r3
 8007430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007434:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007436:	431a      	orrs	r2, r3
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743c:	4313      	orrs	r3, r2
 800743e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007462:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007466:	f023 030c 	bic.w	r3, r3, #12
 800746a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800746e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	431a      	orrs	r2, r3
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	431a      	orrs	r2, r3
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007488:	4313      	orrs	r3, r2
 800748a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800749e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6959      	ldr	r1, [r3, #20]
 80074a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80074b0:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80074b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	4b8b      	ldr	r3, [pc, #556]	; (80076e8 <USART_SetConfig+0x30c>)
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d006      	beq.n	80074cc <USART_SetConfig+0xf0>
 80074be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	4b89      	ldr	r3, [pc, #548]	; (80076ec <USART_SetConfig+0x310>)
 80074c6:	429a      	cmp	r2, r3
 80074c8:	f040 8114 	bne.w	80076f4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074cc:	f7fe fbc6 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 80074d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80074d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074de:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80074e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80074e6:	4622      	mov	r2, r4
 80074e8:	462b      	mov	r3, r5
 80074ea:	1891      	adds	r1, r2, r2
 80074ec:	6739      	str	r1, [r7, #112]	; 0x70
 80074ee:	415b      	adcs	r3, r3
 80074f0:	677b      	str	r3, [r7, #116]	; 0x74
 80074f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80074f6:	4621      	mov	r1, r4
 80074f8:	eb12 0801 	adds.w	r8, r2, r1
 80074fc:	4629      	mov	r1, r5
 80074fe:	eb43 0901 	adc.w	r9, r3, r1
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800750e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007516:	4690      	mov	r8, r2
 8007518:	4699      	mov	r9, r3
 800751a:	4623      	mov	r3, r4
 800751c:	eb18 0303 	adds.w	r3, r8, r3
 8007520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007524:	462b      	mov	r3, r5
 8007526:	eb49 0303 	adc.w	r3, r9, r3
 800752a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800752e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800753a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800753e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007542:	460b      	mov	r3, r1
 8007544:	18db      	adds	r3, r3, r3
 8007546:	66bb      	str	r3, [r7, #104]	; 0x68
 8007548:	4613      	mov	r3, r2
 800754a:	eb42 0303 	adc.w	r3, r2, r3
 800754e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007550:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007554:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007558:	f7f9 faa0 	bl	8000a9c <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4b63      	ldr	r3, [pc, #396]	; (80076f0 <USART_SetConfig+0x314>)
 8007562:	fba3 2302 	umull	r2, r3, r3, r2
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	011c      	lsls	r4, r3, #4
 800756a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800756e:	2200      	movs	r2, #0
 8007570:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007574:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007578:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	1891      	adds	r1, r2, r2
 8007582:	6639      	str	r1, [r7, #96]	; 0x60
 8007584:	415b      	adcs	r3, r3
 8007586:	667b      	str	r3, [r7, #100]	; 0x64
 8007588:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800758c:	4641      	mov	r1, r8
 800758e:	1851      	adds	r1, r2, r1
 8007590:	65b9      	str	r1, [r7, #88]	; 0x58
 8007592:	4649      	mov	r1, r9
 8007594:	414b      	adcs	r3, r1
 8007596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80075a4:	4659      	mov	r1, fp
 80075a6:	00cb      	lsls	r3, r1, #3
 80075a8:	4651      	mov	r1, sl
 80075aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ae:	4651      	mov	r1, sl
 80075b0:	00ca      	lsls	r2, r1, #3
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075c0:	464b      	mov	r3, r9
 80075c2:	460a      	mov	r2, r1
 80075c4:	eb42 0303 	adc.w	r3, r2, r3
 80075c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075d8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075e0:	460b      	mov	r3, r1
 80075e2:	18db      	adds	r3, r3, r3
 80075e4:	653b      	str	r3, [r7, #80]	; 0x50
 80075e6:	4613      	mov	r3, r2
 80075e8:	eb42 0303 	adc.w	r3, r2, r3
 80075ec:	657b      	str	r3, [r7, #84]	; 0x54
 80075ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075f2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075f6:	f7f9 fa51 	bl	8000a9c <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	4b3b      	ldr	r3, [pc, #236]	; (80076f0 <USART_SetConfig+0x314>)
 8007602:	fba3 2301 	umull	r2, r3, r3, r1
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	2264      	movs	r2, #100	; 0x64
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	1acb      	subs	r3, r1, r3
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007616:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <USART_SetConfig+0x314>)
 8007618:	fba3 2302 	umull	r2, r3, r3, r2
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007624:	441c      	add	r4, r3
 8007626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800762a:	2200      	movs	r2, #0
 800762c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007630:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	1891      	adds	r1, r2, r2
 800763e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007640:	415b      	adcs	r3, r3
 8007642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007648:	4641      	mov	r1, r8
 800764a:	1851      	adds	r1, r2, r1
 800764c:	6439      	str	r1, [r7, #64]	; 0x40
 800764e:	4649      	mov	r1, r9
 8007650:	414b      	adcs	r3, r1
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8007660:	4659      	mov	r1, fp
 8007662:	00cb      	lsls	r3, r1, #3
 8007664:	4651      	mov	r1, sl
 8007666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800766a:	4651      	mov	r1, sl
 800766c:	00ca      	lsls	r2, r1, #3
 800766e:	4610      	mov	r0, r2
 8007670:	4619      	mov	r1, r3
 8007672:	4603      	mov	r3, r0
 8007674:	4642      	mov	r2, r8
 8007676:	189b      	adds	r3, r3, r2
 8007678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800767c:	464b      	mov	r3, r9
 800767e:	460a      	mov	r2, r1
 8007680:	eb42 0303 	adc.w	r3, r2, r3
 8007684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800769c:	460b      	mov	r3, r1
 800769e:	18db      	adds	r3, r3, r3
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a2:	4613      	mov	r3, r2
 80076a4:	eb42 0303 	adc.w	r3, r2, r3
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076b2:	f7f9 f9f3 	bl	8000a9c <__aeabi_uldivmod>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <USART_SetConfig+0x314>)
 80076bc:	fba3 1302 	umull	r1, r3, r3, r2
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	2164      	movs	r1, #100	; 0x64
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	3332      	adds	r3, #50	; 0x32
 80076ce:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <USART_SetConfig+0x314>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	f003 0207 	and.w	r2, r3, #7
 80076da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4422      	add	r2, r4
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	e109      	b.n	80078fa <USART_SetConfig+0x51e>
 80076e6:	bf00      	nop
 80076e8:	40011000 	.word	0x40011000
 80076ec:	40011400 	.word	0x40011400
 80076f0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fe fa9e 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 80076f8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80076fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007700:	2200      	movs	r2, #0
 8007702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007706:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800770a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800770e:	4642      	mov	r2, r8
 8007710:	464b      	mov	r3, r9
 8007712:	1891      	adds	r1, r2, r2
 8007714:	6339      	str	r1, [r7, #48]	; 0x30
 8007716:	415b      	adcs	r3, r3
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
 800771a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800771e:	4641      	mov	r1, r8
 8007720:	1854      	adds	r4, r2, r1
 8007722:	4649      	mov	r1, r9
 8007724:	eb43 0501 	adc.w	r5, r3, r1
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	00eb      	lsls	r3, r5, #3
 8007732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007736:	00e2      	lsls	r2, r4, #3
 8007738:	4614      	mov	r4, r2
 800773a:	461d      	mov	r5, r3
 800773c:	4643      	mov	r3, r8
 800773e:	18e3      	adds	r3, r4, r3
 8007740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007744:	464b      	mov	r3, r9
 8007746:	eb45 0303 	adc.w	r3, r5, r3
 800774a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800774e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800775a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800775e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007762:	460b      	mov	r3, r1
 8007764:	18db      	adds	r3, r3, r3
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
 8007768:	4613      	mov	r3, r2
 800776a:	eb42 0303 	adc.w	r3, r2, r3
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007774:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007778:	f7f9 f990 	bl	8000a9c <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4b61      	ldr	r3, [pc, #388]	; (8007908 <USART_SetConfig+0x52c>)
 8007782:	fba3 2302 	umull	r2, r3, r3, r2
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	011c      	lsls	r4, r3, #4
 800778a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800778e:	2200      	movs	r2, #0
 8007790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007794:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007798:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800779c:	4642      	mov	r2, r8
 800779e:	464b      	mov	r3, r9
 80077a0:	1891      	adds	r1, r2, r2
 80077a2:	6239      	str	r1, [r7, #32]
 80077a4:	415b      	adcs	r3, r3
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
 80077a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ac:	4641      	mov	r1, r8
 80077ae:	eb12 0a01 	adds.w	sl, r2, r1
 80077b2:	4649      	mov	r1, r9
 80077b4:	eb43 0b01 	adc.w	fp, r3, r1
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077cc:	4692      	mov	sl, r2
 80077ce:	469b      	mov	fp, r3
 80077d0:	4643      	mov	r3, r8
 80077d2:	eb1a 0303 	adds.w	r3, sl, r3
 80077d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077da:	464b      	mov	r3, r9
 80077dc:	eb4b 0303 	adc.w	r3, fp, r3
 80077e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80077f8:	460b      	mov	r3, r1
 80077fa:	18db      	adds	r3, r3, r3
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	4613      	mov	r3, r2
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800780a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800780e:	f7f9 f945 	bl	8000a9c <__aeabi_uldivmod>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4611      	mov	r1, r2
 8007818:	4b3b      	ldr	r3, [pc, #236]	; (8007908 <USART_SetConfig+0x52c>)
 800781a:	fba3 2301 	umull	r2, r3, r3, r1
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	2264      	movs	r2, #100	; 0x64
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	1acb      	subs	r3, r1, r3
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800782e:	4b36      	ldr	r3, [pc, #216]	; (8007908 <USART_SetConfig+0x52c>)
 8007830:	fba3 2302 	umull	r2, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800783c:	441c      	add	r4, r3
 800783e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007842:	2200      	movs	r2, #0
 8007844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800784c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	1891      	adds	r1, r2, r2
 8007856:	6139      	str	r1, [r7, #16]
 8007858:	415b      	adcs	r3, r3
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007860:	4641      	mov	r1, r8
 8007862:	1851      	adds	r1, r2, r1
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4649      	mov	r1, r9
 8007868:	414b      	adcs	r3, r1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007878:	4659      	mov	r1, fp
 800787a:	00cb      	lsls	r3, r1, #3
 800787c:	4651      	mov	r1, sl
 800787e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007882:	4651      	mov	r1, sl
 8007884:	00ca      	lsls	r2, r1, #3
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	4603      	mov	r3, r0
 800788c:	4642      	mov	r2, r8
 800788e:	189b      	adds	r3, r3, r2
 8007890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007894:	464b      	mov	r3, r9
 8007896:	460a      	mov	r2, r1
 8007898:	eb42 0303 	adc.w	r3, r2, r3
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80078b0:	460b      	mov	r3, r1
 80078b2:	18db      	adds	r3, r3, r3
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	4613      	mov	r3, r2
 80078b8:	eb42 0303 	adc.w	r3, r2, r3
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078c6:	f7f9 f8e9 	bl	8000a9c <__aeabi_uldivmod>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <USART_SetConfig+0x52c>)
 80078d0:	fba3 1302 	umull	r1, r3, r3, r2
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	2164      	movs	r1, #100	; 0x64
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	3332      	adds	r3, #50	; 0x32
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <USART_SetConfig+0x52c>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f003 0207 	and.w	r2, r3, #7
 80078ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4422      	add	r2, r4
 80078f6:	609a      	str	r2, [r3, #8]
  }
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007900:	46bd      	mov	sp, r7
 8007902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007906:	bf00      	nop
 8007908:	51eb851f 	.word	0x51eb851f

0800790c <__NVIC_SetPriority>:
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791c:	2b00      	cmp	r3, #0
 800791e:	db0a      	blt.n	8007936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	490c      	ldr	r1, [pc, #48]	; (8007958 <__NVIC_SetPriority+0x4c>)
 8007926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792a:	0112      	lsls	r2, r2, #4
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	440b      	add	r3, r1
 8007930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007934:	e00a      	b.n	800794c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4908      	ldr	r1, [pc, #32]	; (800795c <__NVIC_SetPriority+0x50>)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	3b04      	subs	r3, #4
 8007944:	0112      	lsls	r2, r2, #4
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	440b      	add	r3, r1
 800794a:	761a      	strb	r2, [r3, #24]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000e100 	.word	0xe000e100
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <SysTick_Handler+0x1c>)
 8007966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007968:	f002 f93a 	bl	8009be0 <xTaskGetSchedulerState>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d001      	beq.n	8007976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007972:	f003 fa39 	bl	800ade8 <xPortSysTickHandler>
  }
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	e000e010 	.word	0xe000e010

08007980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007984:	2100      	movs	r1, #0
 8007986:	f06f 0004 	mvn.w	r0, #4
 800798a:	f7ff ffbf 	bl	800790c <__NVIC_SetPriority>
#endif
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799a:	f3ef 8305 	mrs	r3, IPSR
 800799e:	603b      	str	r3, [r7, #0]
  return(result);
 80079a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079a6:	f06f 0305 	mvn.w	r3, #5
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e00c      	b.n	80079c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079ae:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <osKernelInitialize+0x44>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079b6:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <osKernelInitialize+0x44>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079bc:	2300      	movs	r3, #0
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	e002      	b.n	80079c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000e88 	.word	0x20000e88

080079dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e2:	f3ef 8305 	mrs	r3, IPSR
 80079e6:	603b      	str	r3, [r7, #0]
  return(result);
 80079e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80079ee:	f06f 0305 	mvn.w	r3, #5
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e010      	b.n	8007a18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <osKernelStart+0x48>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d109      	bne.n	8007a12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079fe:	f7ff ffbf 	bl	8007980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <osKernelStart+0x48>)
 8007a04:	2202      	movs	r2, #2
 8007a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a08:	f001 fbf0 	bl	80091ec <vTaskStartScheduler>
      stat = osOK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e002      	b.n	8007a18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a18:	687b      	ldr	r3, [r7, #4]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000e88 	.word	0x20000e88

08007a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d17e      	bne.n	8007b42 <osThreadNew+0x11a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d07b      	beq.n	8007b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a4a:	2380      	movs	r3, #128	; 0x80
 8007a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a4e:	2318      	movs	r3, #24
 8007a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d045      	beq.n	8007aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <osThreadNew+0x48>
        name = attr->name;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <osThreadNew+0x6e>
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b38      	cmp	r3, #56	; 0x38
 8007a88:	d805      	bhi.n	8007a96 <osThreadNew+0x6e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <osThreadNew+0x72>
        return (NULL);
 8007a96:	2300      	movs	r3, #0
 8007a98:	e054      	b.n	8007b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <osThreadNew+0xa8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2ba7      	cmp	r3, #167	; 0xa7
 8007ab8:	d90a      	bls.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <osThreadNew+0xa8>
        mem = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e010      	b.n	8007af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <osThreadNew+0xca>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <osThreadNew+0xca>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <osThreadNew+0xca>
          mem = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e001      	b.n	8007af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d110      	bne.n	8007b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 f980 	bl	8008e14 <xTaskCreateStatic>
 8007b14:	4603      	mov	r3, r0
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e013      	b.n	8007b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 f9cb 	bl	8008ece <xTaskCreate>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <osThreadNew+0x11a>
            hTask = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b42:	693b      	ldr	r3, [r7, #16]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	; 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <osThreadFlagsSet+0x1a>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da03      	bge.n	8007b6e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007b66:	f06f 0303 	mvn.w	r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e035      	b.n	8007bda <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b74:	f3ef 8305 	mrs	r3, IPSR
 8007b78:	613b      	str	r3, [r7, #16]
  return(result);
 8007b7a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01f      	beq.n	8007bc0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6978      	ldr	r0, [r7, #20]
 8007b92:	f002 fae5 	bl	800a160 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007b96:	f107 030c 	add.w	r3, r7, #12
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	9200      	str	r2, [sp, #0]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f002 fadc 	bl	800a160 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <osThreadFlagsSet+0x8e>
 8007bae:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <osThreadFlagsSet+0x98>)
 8007bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	e00c      	b.n	8007bda <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f002 fa0c 	bl	8009fe4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007bcc:	f107 030c 	add.w	r3, r7, #12
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f002 fa05 	bl	8009fe4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007bda:	68fb      	ldr	r3, [r7, #12]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf0:	f3ef 8305 	mrs	r3, IPSR
 8007bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <osDelay+0x1c>
    stat = osErrorISR;
 8007bfc:	f06f 0305 	mvn.w	r3, #5
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e007      	b.n	8007c14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fab8 	bl	8009184 <vTaskDelay>
    }
  }

  return (stat);
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	; (8007c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4a06      	ldr	r2, [pc, #24]	; (8007c50 <vApplicationGetIdleTaskMemory+0x30>)
 8007c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2280      	movs	r2, #128	; 0x80
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000e8c 	.word	0x20000e8c
 8007c50:	20000f34 	.word	0x20000f34

08007c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a07      	ldr	r2, [pc, #28]	; (8007c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <vApplicationGetTimerTaskMemory+0x30>)
 8007c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20001134 	.word	0x20001134
 8007c84:	200011dc 	.word	0x200011dc

08007c88 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007c8e:	2020      	movs	r0, #32
 8007c90:	f003 f93a 	bl	800af08 <pvPortMalloc>
 8007c94:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f983 	bl	8007fb2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007cb2:	687b      	ldr	r3, [r7, #4]
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b090      	sub	sp, #64	; 0x40
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xEventGroupWaitBits+0x36>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	623b      	str	r3, [r7, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <xEventGroupWaitBits+0x56>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	61fb      	str	r3, [r7, #28]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xEventGroupWaitBits+0x72>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	61bb      	str	r3, [r7, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d2e:	f001 ff57 	bl	8009be0 <xTaskGetSchedulerState>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <xEventGroupWaitBits+0x82>
 8007d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <xEventGroupWaitBits+0x86>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <xEventGroupWaitBits+0x88>
 8007d42:	2300      	movs	r3, #0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	617b      	str	r3, [r7, #20]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007d5e:	f001 fab5 	bl	80092cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d6e:	f000 f8fe 	bl	8007f6e <prvTestWaitCondition>
 8007d72:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00e      	beq.n	8007d98 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d028      	beq.n	8007dda <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	401a      	ands	r2, r3
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e020      	b.n	8007dda <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007da2:	2301      	movs	r3, #1
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
 8007da6:	e018      	b.n	8007dda <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	1d18      	adds	r0, r3, #4
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f001 fc79 	bl	80096c8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007dda:	f001 fa85 	bl	80092e8 <xTaskResumeAll>
 8007dde:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d031      	beq.n	8007e4a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d107      	bne.n	8007dfc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007dec:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <xEventGroupWaitBits+0x198>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007dfc:	f002 f866 	bl	8009ecc <uxTaskResetEventItemValue>
 8007e00:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11a      	bne.n	8007e42 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007e0c:	f002 ff5a 	bl	800acc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	68b9      	ldr	r1, [r7, #8]
 8007e1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e1c:	f000 f8a7 	bl	8007f6e <prvTestWaitCondition>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	43db      	mvns	r3, r3
 8007e34:	401a      	ands	r2, r3
 8007e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e38:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007e3e:	f002 ff71 	bl	800ad24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3740      	adds	r7, #64	; 0x40
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007e62:	2300      	movs	r3, #0
 8007e64:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xEventGroupSetBits+0x32>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	613b      	str	r3, [r7, #16]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <xEventGroupSetBits+0x52>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	3304      	adds	r3, #4
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007eb6:	f001 fa09 	bl	80092cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007ecc:	e03c      	b.n	8007f48 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ee4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d108      	bne.n	8007f0a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f08:	e008      	b.n	8007f1c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	4013      	ands	r3, r2
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d101      	bne.n	8007f1c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d010      	beq.n	8007f44 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f40:	f001 fc8e 	bl	8009860 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d1be      	bne.n	8007ece <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	43db      	mvns	r3, r3
 8007f58:	401a      	ands	r2, r3
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007f5e:	f001 f9c3 	bl	80092e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	681b      	ldr	r3, [r3, #0]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3738      	adds	r7, #56	; 0x38
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b087      	sub	sp, #28
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d107      	bne.n	8007f94 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e007      	b.n	8007fa4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d101      	bne.n	8007fa4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007fa4:	697b      	ldr	r3, [r7, #20]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f103 0208 	add.w	r2, r3, #8
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0208 	add.w	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f103 0208 	add.w	r2, r3, #8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d103      	bne.n	8008074 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	e00c      	b.n	800808e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3308      	adds	r3, #8
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e002      	b.n	8008082 <vListInsert+0x2e>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	d2f6      	bcs.n	800807c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6892      	ldr	r2, [r2, #8]
 80080dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6852      	ldr	r2, [r2, #4]
 80080e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d103      	bne.n	80080fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <xQueueGenericReset+0x2a>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	60bb      	str	r3, [r7, #8]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008146:	f002 fdbd 	bl	800acc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	441a      	add	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008176:	3b01      	subs	r3, #1
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800817c:	fb01 f303 	mul.w	r3, r1, r3
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d114      	bne.n	80081c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01a      	beq.n	80081da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3310      	adds	r3, #16
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 faf5 	bl	8009798 <xTaskRemoveFromEventList>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d012      	beq.n	80081da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <xQueueGenericReset+0xcc>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	e009      	b.n	80081da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3310      	adds	r3, #16
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fef1 	bl	8007fb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3324      	adds	r3, #36	; 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff feec 	bl	8007fb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081da:	f002 fda3 	bl	800ad24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081de:	2301      	movs	r3, #1
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08e      	sub	sp, #56	; 0x38
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <xQueueGenericCreateStatic+0x52>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <xQueueGenericCreateStatic+0x56>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueGenericCreateStatic+0x58>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	623b      	str	r3, [r7, #32]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <xQueueGenericCreateStatic+0x7e>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <xQueueGenericCreateStatic+0x82>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericCreateStatic+0x84>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	61fb      	str	r3, [r7, #28]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800828a:	2350      	movs	r3, #80	; 0x50
 800828c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b50      	cmp	r3, #80	; 0x50
 8008292:	d00a      	beq.n	80082aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	61bb      	str	r3, [r7, #24]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00d      	beq.n	80082d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	4613      	mov	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f83f 	bl	8008350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3730      	adds	r7, #48	; 0x30
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	; 0x28
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xQueueGenericCreate+0x2a>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	3350      	adds	r3, #80	; 0x50
 8008314:	4618      	mov	r0, r3
 8008316:	f002 fdf7 	bl	800af08 <pvPortMalloc>
 800831a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d011      	beq.n	8008346 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	3350      	adds	r3, #80	; 0x50
 800832a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008334:	79fa      	ldrb	r2, [r7, #7]
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	4613      	mov	r3, r2
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 f805 	bl	8008350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008346:	69bb      	ldr	r3, [r7, #24]
	}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	e002      	b.n	8008372 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800837e:	2101      	movs	r1, #1
 8008380:	69b8      	ldr	r0, [r7, #24]
 8008382:	f7ff fecb 	bl	800811c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f81d 	bl	80083fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	4603      	mov	r3, r0
 80083d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	461a      	mov	r2, r3
 80083e0:	6939      	ldr	r1, [r7, #16]
 80083e2:	6978      	ldr	r0, [r7, #20]
 80083e4:	f7ff ff7a 	bl	80082dc <xQueueGenericCreate>
 80083e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ffd3 	bl	8008396 <prvInitialiseMutex>

		return xNewQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800840a:	2300      	movs	r3, #0
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xQueueGenericSend+0x32>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <xQueueGenericSend+0x40>
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <xQueueGenericSend+0x44>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <xQueueGenericSend+0x46>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <xQueueGenericSend+0x60>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d103      	bne.n	800846a <xQueueGenericSend+0x6e>
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <xQueueGenericSend+0x72>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <xQueueGenericSend+0x74>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xQueueGenericSend+0x8e>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	623b      	str	r3, [r7, #32]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800848a:	f001 fba9 	bl	8009be0 <xTaskGetSchedulerState>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <xQueueGenericSend+0x9e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <xQueueGenericSend+0xa2>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <xQueueGenericSend+0xa4>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xQueueGenericSend+0xbe>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	61fb      	str	r3, [r7, #28]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ba:	f002 fc03 	bl	800acc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d302      	bcc.n	80084d0 <xQueueGenericSend+0xd4>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d129      	bne.n	8008524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d6:	f000 fb2f 	bl	8008b38 <prvCopyDataToQueue>
 80084da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d010      	beq.n	8008506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	3324      	adds	r3, #36	; 0x24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f955 	bl	8009798 <xTaskRemoveFromEventList>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d013      	beq.n	800851c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084f4:	4b3f      	ldr	r3, [pc, #252]	; (80085f4 <xQueueGenericSend+0x1f8>)
 80084f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	e00a      	b.n	800851c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800850c:	4b39      	ldr	r3, [pc, #228]	; (80085f4 <xQueueGenericSend+0x1f8>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800851c:	f002 fc02 	bl	800ad24 <vPortExitCritical>
				return pdPASS;
 8008520:	2301      	movs	r3, #1
 8008522:	e063      	b.n	80085ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800852a:	f002 fbfb 	bl	800ad24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800852e:	2300      	movs	r3, #0
 8008530:	e05c      	b.n	80085ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	4618      	mov	r0, r3
 800853e:	f001 f9f1 	bl	8009924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008542:	2301      	movs	r3, #1
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008546:	f002 fbed 	bl	800ad24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800854a:	f000 febf 	bl	80092cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800854e:	f002 fbb9 	bl	800acc4 <vPortEnterCritical>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008558:	b25b      	sxtb	r3, r3
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d103      	bne.n	8008568 <xQueueGenericSend+0x16c>
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800856e:	b25b      	sxtb	r3, r3
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008574:	d103      	bne.n	800857e <xQueueGenericSend+0x182>
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800857e:	f002 fbd1 	bl	800ad24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008582:	1d3a      	adds	r2, r7, #4
 8008584:	f107 0314 	add.w	r3, r7, #20
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f9e0 	bl	8009950 <xTaskCheckForTimeOut>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d124      	bne.n	80085e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008598:	f000 fbc6 	bl	8008d28 <prvIsQueueFull>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d018      	beq.n	80085d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	3310      	adds	r3, #16
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 f868 	bl	8009680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085b2:	f000 fb51 	bl	8008c58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085b6:	f000 fe97 	bl	80092e8 <xTaskResumeAll>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f47f af7c 	bne.w	80084ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <xQueueGenericSend+0x1f8>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	e772      	b.n	80084ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085d6:	f000 fb3f 	bl	8008c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085da:	f000 fe85 	bl	80092e8 <xTaskResumeAll>
 80085de:	e76c      	b.n	80084ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e2:	f000 fb39 	bl	8008c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085e6:	f000 fe7f 	bl	80092e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3738      	adds	r7, #56	; 0x38
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b090      	sub	sp, #64	; 0x40
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <xQueueGenericSendFromISR+0x3c>
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <xQueueGenericSendFromISR+0x40>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <xQueueGenericSendFromISR+0x42>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d103      	bne.n	8008662 <xQueueGenericSendFromISR+0x6a>
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <xQueueGenericSendFromISR+0x6e>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <xQueueGenericSendFromISR+0x70>
 8008666:	2300      	movs	r3, #0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	623b      	str	r3, [r7, #32]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008682:	f002 fc01 	bl	800ae88 <vPortValidateInterruptPriority>
	__asm volatile
 8008686:	f3ef 8211 	mrs	r2, BASEPRI
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	61fa      	str	r2, [r7, #28]
 800869c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800869e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d302      	bcc.n	80086b4 <xQueueGenericSendFromISR+0xbc>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d12f      	bne.n	8008714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086ca:	f000 fa35 	bl	8008b38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d112      	bne.n	80086fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d016      	beq.n	800870e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 f857 	bl	8009798 <xTaskRemoveFromEventList>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00e      	beq.n	800870e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e007      	b.n	800870e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008702:	3301      	adds	r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	b25a      	sxtb	r2, r3
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800870e:	2301      	movs	r3, #1
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008712:	e001      	b.n	8008718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f383 8811 	msr	BASEPRI, r3
}
 8008722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008726:	4618      	mov	r0, r3
 8008728:	3740      	adds	r7, #64	; 0x40
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08c      	sub	sp, #48	; 0x30
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800873c:	2300      	movs	r3, #0
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <xQueueReceive+0x30>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	623b      	str	r3, [r7, #32]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <xQueueReceive+0x3e>
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <xQueueReceive+0x42>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <xQueueReceive+0x44>
 8008772:	2300      	movs	r3, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xQueueReceive+0x5e>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	61fb      	str	r3, [r7, #28]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800878e:	f001 fa27 	bl	8009be0 <xTaskGetSchedulerState>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <xQueueReceive+0x6e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <xQueueReceive+0x72>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <xQueueReceive+0x74>
 80087a2:	2300      	movs	r3, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <xQueueReceive+0x8e>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	61bb      	str	r3, [r7, #24]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087be:	f002 fa81 	bl	800acc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01f      	beq.n	800880e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d2:	f000 fa1b 	bl	8008c0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	3310      	adds	r3, #16
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 ffd4 	bl	8009798 <xTaskRemoveFromEventList>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087f6:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <xQueueReceive+0x1bc>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008806:	f002 fa8d 	bl	800ad24 <vPortExitCritical>
				return pdPASS;
 800880a:	2301      	movs	r3, #1
 800880c:	e069      	b.n	80088e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008814:	f002 fa86 	bl	800ad24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008818:	2300      	movs	r3, #0
 800881a:	e062      	b.n	80088e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	4618      	mov	r0, r3
 8008828:	f001 f87c 	bl	8009924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008830:	f002 fa78 	bl	800ad24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008834:	f000 fd4a 	bl	80092cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008838:	f002 fa44 	bl	800acc4 <vPortEnterCritical>
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008842:	b25b      	sxtb	r3, r3
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d103      	bne.n	8008852 <xQueueReceive+0x122>
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008858:	b25b      	sxtb	r3, r3
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d103      	bne.n	8008868 <xQueueReceive+0x138>
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008868:	f002 fa5c 	bl	800ad24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800886c:	1d3a      	adds	r2, r7, #4
 800886e:	f107 0310 	add.w	r3, r7, #16
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f001 f86b 	bl	8009950 <xTaskCheckForTimeOut>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d123      	bne.n	80088c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008882:	f000 fa3b 	bl	8008cfc <prvIsQueueEmpty>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d017      	beq.n	80088bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	3324      	adds	r3, #36	; 0x24
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fef3 	bl	8009680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800889a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800889c:	f000 f9dc 	bl	8008c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088a0:	f000 fd22 	bl	80092e8 <xTaskResumeAll>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d189      	bne.n	80087be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <xQueueReceive+0x1bc>)
 80088ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	e780      	b.n	80087be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088be:	f000 f9cb 	bl	8008c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088c2:	f000 fd11 	bl	80092e8 <xTaskResumeAll>
 80088c6:	e77a      	b.n	80087be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ca:	f000 f9c5 	bl	8008c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ce:	f000 fd0b 	bl	80092e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d4:	f000 fa12 	bl	8008cfc <prvIsQueueEmpty>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f43f af6f 	beq.w	80087be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3730      	adds	r7, #48	; 0x30
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08e      	sub	sp, #56	; 0x38
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008902:	2300      	movs	r3, #0
 8008904:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	623b      	str	r3, [r7, #32]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	61fb      	str	r3, [r7, #28]
}
 800893c:	bf00      	nop
 800893e:	e7fe      	b.n	800893e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008940:	f001 f94e 	bl	8009be0 <xTaskGetSchedulerState>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <xQueueSemaphoreTake+0x60>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <xQueueSemaphoreTake+0x64>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <xQueueSemaphoreTake+0x66>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61bb      	str	r3, [r7, #24]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008970:	f002 f9a8 	bl	800acc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	2b00      	cmp	r3, #0
 800897e:	d024      	beq.n	80089ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	1e5a      	subs	r2, r3, #1
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008990:	f001 fab4 	bl	8009efc <pvTaskIncrementMutexHeldCount>
 8008994:	4602      	mov	r2, r0
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	3310      	adds	r3, #16
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fef6 	bl	8009798 <xTaskRemoveFromEventList>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089b2:	4b54      	ldr	r3, [pc, #336]	; (8008b04 <xQueueSemaphoreTake+0x214>)
 80089b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089c2:	f002 f9af 	bl	800ad24 <vPortExitCritical>
				return pdPASS;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e097      	b.n	8008afa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d111      	bne.n	80089f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	617b      	str	r3, [r7, #20]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80089ec:	f002 f99a 	bl	800ad24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e082      	b.n	8008afa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089fa:	f107 030c 	add.w	r3, r7, #12
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 ff90 	bl	8009924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a08:	f002 f98c 	bl	800ad24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a0c:	f000 fc5e 	bl	80092cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a10:	f002 f958 	bl	800acc4 <vPortEnterCritical>
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d103      	bne.n	8008a2a <xQueueSemaphoreTake+0x13a>
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d103      	bne.n	8008a40 <xQueueSemaphoreTake+0x150>
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a40:	f002 f970 	bl	800ad24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a44:	463a      	mov	r2, r7
 8008a46:	f107 030c 	add.w	r3, r7, #12
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 ff7f 	bl	8009950 <xTaskCheckForTimeOut>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d132      	bne.n	8008abe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a5a:	f000 f94f 	bl	8008cfc <prvIsQueueEmpty>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d026      	beq.n	8008ab2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d109      	bne.n	8008a80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008a6c:	f002 f92a 	bl	800acc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 f8d1 	bl	8009c1c <xTaskPriorityInherit>
 8008a7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008a7c:	f002 f952 	bl	800ad24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a82:	3324      	adds	r3, #36	; 0x24
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fdf9 	bl	8009680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a90:	f000 f8e2 	bl	8008c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a94:	f000 fc28 	bl	80092e8 <xTaskResumeAll>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f47f af68 	bne.w	8008970 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008aa0:	4b18      	ldr	r3, [pc, #96]	; (8008b04 <xQueueSemaphoreTake+0x214>)
 8008aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	e75e      	b.n	8008970 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ab4:	f000 f8d0 	bl	8008c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab8:	f000 fc16 	bl	80092e8 <xTaskResumeAll>
 8008abc:	e758      	b.n	8008970 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ac0:	f000 f8ca 	bl	8008c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ac4:	f000 fc10 	bl	80092e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aca:	f000 f917 	bl	8008cfc <prvIsQueueEmpty>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f43f af4d 	beq.w	8008970 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008adc:	f002 f8f2 	bl	800acc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ae2:	f000 f811 	bl	8008b08 <prvGetDisinheritPriorityAfterTimeout>
 8008ae6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f96a 	bl	8009dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008af4:	f002 f916 	bl	800ad24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3738      	adds	r7, #56	; 0x38
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e001      	b.n	8008b2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10d      	bne.n	8008b72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d14d      	bne.n	8008bfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 f8c2 	bl	8009cec <xTaskPriorityDisinherit>
 8008b68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	609a      	str	r2, [r3, #8]
 8008b70:	e043      	b.n	8008bfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d119      	bne.n	8008bac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6858      	ldr	r0, [r3, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	461a      	mov	r2, r3
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	f002 ff34 	bl	800b9f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d32b      	bcc.n	8008bfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]
 8008baa:	e026      	b.n	8008bfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68d8      	ldr	r0, [r3, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	f002 ff1a 	bl	800b9f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d207      	bcs.n	8008be8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	425b      	negs	r3, r3
 8008be2:	441a      	add	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d105      	bne.n	8008bfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c02:	697b      	ldr	r3, [r7, #20]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d018      	beq.n	8008c50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d303      	bcc.n	8008c40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68d9      	ldr	r1, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6838      	ldr	r0, [r7, #0]
 8008c4c:	f002 fed0 	bl	800b9f0 <memcpy>
	}
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c60:	f002 f830 	bl	800acc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c6c:	e011      	b.n	8008c92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d012      	beq.n	8008c9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fd8c 	bl	8009798 <xTaskRemoveFromEventList>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c86:	f000 fec5 	bl	8009a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dce9      	bgt.n	8008c6e <prvUnlockQueue+0x16>
 8008c9a:	e000      	b.n	8008c9e <prvUnlockQueue+0x46>
					break;
 8008c9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	22ff      	movs	r2, #255	; 0xff
 8008ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ca6:	f002 f83d 	bl	800ad24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008caa:	f002 f80b 	bl	800acc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cb6:	e011      	b.n	8008cdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d012      	beq.n	8008ce6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3310      	adds	r3, #16
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fd67 	bl	8009798 <xTaskRemoveFromEventList>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cd0:	f000 fea0 	bl	8009a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	dce9      	bgt.n	8008cb8 <prvUnlockQueue+0x60>
 8008ce4:	e000      	b.n	8008ce8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ce6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	22ff      	movs	r2, #255	; 0xff
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cf0:	f002 f818 	bl	800ad24 <vPortExitCritical>
}
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d04:	f001 ffde 	bl	800acc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e001      	b.n	8008d1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d1a:	f002 f803 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d30:	f001 ffc8 	bl	800acc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d102      	bne.n	8008d46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	e001      	b.n	8008d4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d4a:	f001 ffeb 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e014      	b.n	8008d92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d68:	4a0f      	ldr	r2, [pc, #60]	; (8008da8 <vQueueAddToRegistry+0x50>)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d74:	490c      	ldr	r1, [pc, #48]	; (8008da8 <vQueueAddToRegistry+0x50>)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <vQueueAddToRegistry+0x50>)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d8a:	e006      	b.n	8008d9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b07      	cmp	r3, #7
 8008d96:	d9e7      	bls.n	8008d68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	200015dc 	.word	0x200015dc

08008dac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dbc:	f001 ff82 	bl	800acc4 <vPortEnterCritical>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d103      	bne.n	8008dd6 <vQueueWaitForMessageRestricted+0x2a>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ddc:	b25b      	sxtb	r3, r3
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de2:	d103      	bne.n	8008dec <vQueueWaitForMessageRestricted+0x40>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dec:	f001 ff9a 	bl	800ad24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3324      	adds	r3, #36	; 0x24
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68b9      	ldr	r1, [r7, #8]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fc9d 	bl	8009740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	f7ff ff26 	bl	8008c58 <prvUnlockQueue>
	}
 8008e0c:	bf00      	nop
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	; 0x38
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	623b      	str	r3, [r7, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xTaskCreateStatic+0x46>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	61fb      	str	r3, [r7, #28]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e5a:	23a8      	movs	r3, #168	; 0xa8
 8008e5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2ba8      	cmp	r3, #168	; 0xa8
 8008e62:	d00a      	beq.n	8008e7a <xTaskCreateStatic+0x66>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	61bb      	str	r3, [r7, #24]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01e      	beq.n	8008ec0 <xTaskCreateStatic+0xac>
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01b      	beq.n	8008ec0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	2202      	movs	r2, #2
 8008e96:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	f107 0314 	add.w	r3, r7, #20
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f850 	bl	8008f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eba:	f000 f8f3 	bl	80090a4 <prvAddNewTaskToReadyList>
 8008ebe:	e001      	b.n	8008ec4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ec4:	697b      	ldr	r3, [r7, #20]
	}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3728      	adds	r7, #40	; 0x28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b08c      	sub	sp, #48	; 0x30
 8008ed2:	af04      	add	r7, sp, #16
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 f810 	bl	800af08 <pvPortMalloc>
 8008ee8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00e      	beq.n	8008f0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ef0:	20a8      	movs	r0, #168	; 0xa8
 8008ef2:	f002 f809 	bl	800af08 <pvPortMalloc>
 8008ef6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	631a      	str	r2, [r3, #48]	; 0x30
 8008f04:	e005      	b.n	8008f12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f06:	6978      	ldr	r0, [r7, #20]
 8008f08:	f002 f8ca 	bl	800b0a0 <vPortFree>
 8008f0c:	e001      	b.n	8008f12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d017      	beq.n	8008f48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9303      	str	r3, [sp, #12]
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 f80e 	bl	8008f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f3c:	69f8      	ldr	r0, [r7, #28]
 8008f3e:	f000 f8b1 	bl	80090a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f42:	2301      	movs	r3, #1
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	e002      	b.n	8008f4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f48:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3720      	adds	r7, #32
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	461a      	mov	r2, r3
 8008f70:	21a5      	movs	r1, #165	; 0xa5
 8008f72:	f002 fc4c 	bl	800b80e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f80:	3b01      	subs	r3, #1
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	617b      	str	r3, [r7, #20]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01f      	beq.n	8008ff6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	e012      	b.n	8008fe2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	7819      	ldrb	r1, [r3, #0]
 8008fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	3334      	adds	r3, #52	; 0x34
 8008fcc:	460a      	mov	r2, r1
 8008fce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	2b0f      	cmp	r3, #15
 8008fe6:	d9e9      	bls.n	8008fbc <prvInitialiseNewTask+0x64>
 8008fe8:	e000      	b.n	8008fec <prvInitialiseNewTask+0x94>
			{
				break;
 8008fea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ff4:	e003      	b.n	8008ffe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	2b37      	cmp	r3, #55	; 0x37
 8009002:	d901      	bls.n	8009008 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009004:	2337      	movs	r3, #55	; 0x37
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800900c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009012:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	2200      	movs	r2, #0
 8009018:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	3304      	adds	r3, #4
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe ffe7 	bl	8007ff2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	3318      	adds	r3, #24
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe ffe2 	bl	8007ff2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	2200      	movs	r2, #0
 8009050:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	3354      	adds	r3, #84	; 0x54
 8009058:	224c      	movs	r2, #76	; 0x4c
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fbd6 	bl	800b80e <memset>
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <prvInitialiseNewTask+0x140>)
 8009066:	659a      	str	r2, [r3, #88]	; 0x58
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	4a0c      	ldr	r2, [pc, #48]	; (800909c <prvInitialiseNewTask+0x144>)
 800906c:	65da      	str	r2, [r3, #92]	; 0x5c
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	4a0b      	ldr	r2, [pc, #44]	; (80090a0 <prvInitialiseNewTask+0x148>)
 8009072:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	69b8      	ldr	r0, [r7, #24]
 800907a:	f001 fcf7 	bl	800aa6c <pxPortInitialiseStack>
 800907e:	4602      	mov	r2, r0
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009090:	bf00      	nop
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20006a98 	.word	0x20006a98
 800909c:	20006b00 	.word	0x20006b00
 80090a0:	20006b68 	.word	0x20006b68

080090a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090ac:	f001 fe0a 	bl	800acc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <prvAddNewTaskToReadyList+0xc4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3301      	adds	r3, #1
 80090b6:	4a2c      	ldr	r2, [pc, #176]	; (8009168 <prvAddNewTaskToReadyList+0xc4>)
 80090b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090ba:	4b2c      	ldr	r3, [pc, #176]	; (800916c <prvAddNewTaskToReadyList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d109      	bne.n	80090d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090c2:	4a2a      	ldr	r2, [pc, #168]	; (800916c <prvAddNewTaskToReadyList+0xc8>)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090c8:	4b27      	ldr	r3, [pc, #156]	; (8009168 <prvAddNewTaskToReadyList+0xc4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d110      	bne.n	80090f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090d0:	f000 fcc4 	bl	8009a5c <prvInitialiseTaskLists>
 80090d4:	e00d      	b.n	80090f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090d6:	4b26      	ldr	r3, [pc, #152]	; (8009170 <prvAddNewTaskToReadyList+0xcc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090de:	4b23      	ldr	r3, [pc, #140]	; (800916c <prvAddNewTaskToReadyList+0xc8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d802      	bhi.n	80090f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090ec:	4a1f      	ldr	r2, [pc, #124]	; (800916c <prvAddNewTaskToReadyList+0xc8>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090f2:	4b20      	ldr	r3, [pc, #128]	; (8009174 <prvAddNewTaskToReadyList+0xd0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <prvAddNewTaskToReadyList+0xd0>)
 80090fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090fc:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <prvAddNewTaskToReadyList+0xd0>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <prvAddNewTaskToReadyList+0xd4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <prvAddNewTaskToReadyList+0x74>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a18      	ldr	r2, [pc, #96]	; (8009178 <prvAddNewTaskToReadyList+0xd4>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a15      	ldr	r2, [pc, #84]	; (800917c <prvAddNewTaskToReadyList+0xd8>)
 8009126:	441a      	add	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe ff6c 	bl	800800c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009134:	f001 fdf6 	bl	800ad24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009138:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <prvAddNewTaskToReadyList+0xcc>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <prvAddNewTaskToReadyList+0xc8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	429a      	cmp	r2, r3
 800914c:	d207      	bcs.n	800915e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <prvAddNewTaskToReadyList+0xdc>)
 8009150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20001af0 	.word	0x20001af0
 800916c:	2000161c 	.word	0x2000161c
 8009170:	20001afc 	.word	0x20001afc
 8009174:	20001b0c 	.word	0x20001b0c
 8009178:	20001af8 	.word	0x20001af8
 800917c:	20001620 	.word	0x20001620
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d017      	beq.n	80091c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <vTaskDelay+0x60>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <vTaskDelay+0x30>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60bb      	str	r3, [r7, #8]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091b4:	f000 f88a 	bl	80092cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 f8b4 	bl	800a328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091c0:	f000 f892 	bl	80092e8 <xTaskResumeAll>
 80091c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <vTaskDelay+0x64>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20001b18 	.word	0x20001b18
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091fa:	463a      	mov	r2, r7
 80091fc:	1d39      	adds	r1, r7, #4
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd0c 	bl	8007c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	9202      	str	r2, [sp, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2300      	movs	r3, #0
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2300      	movs	r3, #0
 8009218:	460a      	mov	r2, r1
 800921a:	4924      	ldr	r1, [pc, #144]	; (80092ac <vTaskStartScheduler+0xc0>)
 800921c:	4824      	ldr	r0, [pc, #144]	; (80092b0 <vTaskStartScheduler+0xc4>)
 800921e:	f7ff fdf9 	bl	8008e14 <xTaskCreateStatic>
 8009222:	4603      	mov	r3, r0
 8009224:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <vTaskStartScheduler+0xc8>)
 8009226:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <vTaskStartScheduler+0xc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009230:	2301      	movs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	e001      	b.n	800923a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d102      	bne.n	8009246 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009240:	f001 f8c6 	bl	800a3d0 <xTimerCreateTimerTask>
 8009244:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d11b      	bne.n	8009284 <vTaskStartScheduler+0x98>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	613b      	str	r3, [r7, #16]
}
 800925e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <vTaskStartScheduler+0xcc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3354      	adds	r3, #84	; 0x54
 8009266:	4a15      	ldr	r2, [pc, #84]	; (80092bc <vTaskStartScheduler+0xd0>)
 8009268:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800926a:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <vTaskStartScheduler+0xd4>)
 800926c:	f04f 32ff 	mov.w	r2, #4294967295
 8009270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009272:	4b14      	ldr	r3, [pc, #80]	; (80092c4 <vTaskStartScheduler+0xd8>)
 8009274:	2201      	movs	r2, #1
 8009276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009278:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <vTaskStartScheduler+0xdc>)
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800927e:	f001 fc7f 	bl	800ab80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009282:	e00e      	b.n	80092a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928a:	d10a      	bne.n	80092a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60fb      	str	r3, [r7, #12]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <vTaskStartScheduler+0xb4>
}
 80092a2:	bf00      	nop
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	0800cf84 	.word	0x0800cf84
 80092b0:	08009a2d 	.word	0x08009a2d
 80092b4:	20001b14 	.word	0x20001b14
 80092b8:	2000161c 	.word	0x2000161c
 80092bc:	2000014c 	.word	0x2000014c
 80092c0:	20001b10 	.word	0x20001b10
 80092c4:	20001afc 	.word	0x20001afc
 80092c8:	20001af4 	.word	0x20001af4

080092cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092d0:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <vTaskSuspendAll+0x18>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	4a03      	ldr	r2, [pc, #12]	; (80092e4 <vTaskSuspendAll+0x18>)
 80092d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092da:	bf00      	nop
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	20001b18 	.word	0x20001b18

080092e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092f6:	4b42      	ldr	r3, [pc, #264]	; (8009400 <xTaskResumeAll+0x118>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <xTaskResumeAll+0x2c>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	603b      	str	r3, [r7, #0]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009314:	f001 fcd6 	bl	800acc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009318:	4b39      	ldr	r3, [pc, #228]	; (8009400 <xTaskResumeAll+0x118>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3b01      	subs	r3, #1
 800931e:	4a38      	ldr	r2, [pc, #224]	; (8009400 <xTaskResumeAll+0x118>)
 8009320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009322:	4b37      	ldr	r3, [pc, #220]	; (8009400 <xTaskResumeAll+0x118>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d162      	bne.n	80093f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800932a:	4b36      	ldr	r3, [pc, #216]	; (8009404 <xTaskResumeAll+0x11c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d05e      	beq.n	80093f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009332:	e02f      	b.n	8009394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009334:	4b34      	ldr	r3, [pc, #208]	; (8009408 <xTaskResumeAll+0x120>)
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	3318      	adds	r3, #24
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fec0 	bl	80080c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe febb 	bl	80080c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009354:	4b2d      	ldr	r3, [pc, #180]	; (800940c <xTaskResumeAll+0x124>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d903      	bls.n	8009364 <xTaskResumeAll+0x7c>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a2a      	ldr	r2, [pc, #168]	; (800940c <xTaskResumeAll+0x124>)
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4a27      	ldr	r2, [pc, #156]	; (8009410 <xTaskResumeAll+0x128>)
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3304      	adds	r3, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe fe46 	bl	800800c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009384:	4b23      	ldr	r3, [pc, #140]	; (8009414 <xTaskResumeAll+0x12c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	429a      	cmp	r2, r3
 800938c:	d302      	bcc.n	8009394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800938e:	4b22      	ldr	r3, [pc, #136]	; (8009418 <xTaskResumeAll+0x130>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009394:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <xTaskResumeAll+0x120>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1cb      	bne.n	8009334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093a2:	f000 fbfd 	bl	8009ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093a6:	4b1d      	ldr	r3, [pc, #116]	; (800941c <xTaskResumeAll+0x134>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d010      	beq.n	80093d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093b2:	f000 f847 	bl	8009444 <xTaskIncrementTick>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093bc:	4b16      	ldr	r3, [pc, #88]	; (8009418 <xTaskResumeAll+0x130>)
 80093be:	2201      	movs	r2, #1
 80093c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f1      	bne.n	80093b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <xTaskResumeAll+0x134>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093d4:	4b10      	ldr	r3, [pc, #64]	; (8009418 <xTaskResumeAll+0x130>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093dc:	2301      	movs	r3, #1
 80093de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093e0:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <xTaskResumeAll+0x138>)
 80093e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f0:	f001 fc98 	bl	800ad24 <vPortExitCritical>

	return xAlreadyYielded;
 80093f4:	68bb      	ldr	r3, [r7, #8]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20001b18 	.word	0x20001b18
 8009404:	20001af0 	.word	0x20001af0
 8009408:	20001ab0 	.word	0x20001ab0
 800940c:	20001af8 	.word	0x20001af8
 8009410:	20001620 	.word	0x20001620
 8009414:	2000161c 	.word	0x2000161c
 8009418:	20001b04 	.word	0x20001b04
 800941c:	20001b00 	.word	0x20001b00
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <xTaskGetTickCount+0x1c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009430:	687b      	ldr	r3, [r7, #4]
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20001af4 	.word	0x20001af4

08009444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944e:	4b4f      	ldr	r3, [pc, #316]	; (800958c <xTaskIncrementTick+0x148>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 808f 	bne.w	8009576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009458:	4b4d      	ldr	r3, [pc, #308]	; (8009590 <xTaskIncrementTick+0x14c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009460:	4a4b      	ldr	r2, [pc, #300]	; (8009590 <xTaskIncrementTick+0x14c>)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d120      	bne.n	80094ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800946c:	4b49      	ldr	r3, [pc, #292]	; (8009594 <xTaskIncrementTick+0x150>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <xTaskIncrementTick+0x48>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	603b      	str	r3, [r7, #0]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <xTaskIncrementTick+0x46>
 800948c:	4b41      	ldr	r3, [pc, #260]	; (8009594 <xTaskIncrementTick+0x150>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	4b41      	ldr	r3, [pc, #260]	; (8009598 <xTaskIncrementTick+0x154>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a3f      	ldr	r2, [pc, #252]	; (8009594 <xTaskIncrementTick+0x150>)
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4a3f      	ldr	r2, [pc, #252]	; (8009598 <xTaskIncrementTick+0x154>)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	4b3e      	ldr	r3, [pc, #248]	; (800959c <xTaskIncrementTick+0x158>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	4a3d      	ldr	r2, [pc, #244]	; (800959c <xTaskIncrementTick+0x158>)
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	f000 fb79 	bl	8009ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094ae:	4b3c      	ldr	r3, [pc, #240]	; (80095a0 <xTaskIncrementTick+0x15c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d349      	bcc.n	800954c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094b8:	4b36      	ldr	r3, [pc, #216]	; (8009594 <xTaskIncrementTick+0x150>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c2:	4b37      	ldr	r3, [pc, #220]	; (80095a0 <xTaskIncrementTick+0x15c>)
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	601a      	str	r2, [r3, #0]
					break;
 80094ca:	e03f      	b.n	800954c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094cc:	4b31      	ldr	r3, [pc, #196]	; (8009594 <xTaskIncrementTick+0x150>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d203      	bcs.n	80094ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094e4:	4a2e      	ldr	r2, [pc, #184]	; (80095a0 <xTaskIncrementTick+0x15c>)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094ea:	e02f      	b.n	800954c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fde8 	bl	80080c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3318      	adds	r3, #24
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fddf 	bl	80080c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <xTaskIncrementTick+0x160>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d903      	bls.n	800951c <xTaskIncrementTick+0xd8>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	4a22      	ldr	r2, [pc, #136]	; (80095a4 <xTaskIncrementTick+0x160>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4a1f      	ldr	r2, [pc, #124]	; (80095a8 <xTaskIncrementTick+0x164>)
 800952a:	441a      	add	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7fe fd6a 	bl	800800c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <xTaskIncrementTick+0x168>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d3b8      	bcc.n	80094b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009546:	2301      	movs	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954a:	e7b5      	b.n	80094b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <xTaskIncrementTick+0x168>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4915      	ldr	r1, [pc, #84]	; (80095a8 <xTaskIncrementTick+0x164>)
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	440b      	add	r3, r1
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d901      	bls.n	8009568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009568:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <xTaskIncrementTick+0x16c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d007      	beq.n	8009580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e004      	b.n	8009580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009576:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <xTaskIncrementTick+0x170>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	4a0d      	ldr	r2, [pc, #52]	; (80095b4 <xTaskIncrementTick+0x170>)
 800957e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009580:	697b      	ldr	r3, [r7, #20]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20001b18 	.word	0x20001b18
 8009590:	20001af4 	.word	0x20001af4
 8009594:	20001aa8 	.word	0x20001aa8
 8009598:	20001aac 	.word	0x20001aac
 800959c:	20001b08 	.word	0x20001b08
 80095a0:	20001b10 	.word	0x20001b10
 80095a4:	20001af8 	.word	0x20001af8
 80095a8:	20001620 	.word	0x20001620
 80095ac:	2000161c 	.word	0x2000161c
 80095b0:	20001b04 	.word	0x20001b04
 80095b4:	20001b00 	.word	0x20001b00

080095b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095be:	4b2a      	ldr	r3, [pc, #168]	; (8009668 <vTaskSwitchContext+0xb0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095c6:	4b29      	ldr	r3, [pc, #164]	; (800966c <vTaskSwitchContext+0xb4>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095cc:	e046      	b.n	800965c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80095ce:	4b27      	ldr	r3, [pc, #156]	; (800966c <vTaskSwitchContext+0xb4>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d4:	4b26      	ldr	r3, [pc, #152]	; (8009670 <vTaskSwitchContext+0xb8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e010      	b.n	80095fe <vTaskSwitchContext+0x46>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	607b      	str	r3, [r7, #4]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <vTaskSwitchContext+0x3e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	491d      	ldr	r1, [pc, #116]	; (8009674 <vTaskSwitchContext+0xbc>)
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0e4      	beq.n	80095dc <vTaskSwitchContext+0x24>
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4613      	mov	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4a15      	ldr	r2, [pc, #84]	; (8009674 <vTaskSwitchContext+0xbc>)
 800961e:	4413      	add	r3, r2
 8009620:	60bb      	str	r3, [r7, #8]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	605a      	str	r2, [r3, #4]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3308      	adds	r3, #8
 8009634:	429a      	cmp	r2, r3
 8009636:	d104      	bne.n	8009642 <vTaskSwitchContext+0x8a>
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	605a      	str	r2, [r3, #4]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a0b      	ldr	r2, [pc, #44]	; (8009678 <vTaskSwitchContext+0xc0>)
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	4a08      	ldr	r2, [pc, #32]	; (8009670 <vTaskSwitchContext+0xb8>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <vTaskSwitchContext+0xc0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3354      	adds	r3, #84	; 0x54
 8009658:	4a08      	ldr	r2, [pc, #32]	; (800967c <vTaskSwitchContext+0xc4>)
 800965a:	6013      	str	r3, [r2, #0]
}
 800965c:	bf00      	nop
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	20001b18 	.word	0x20001b18
 800966c:	20001b04 	.word	0x20001b04
 8009670:	20001af8 	.word	0x20001af8
 8009674:	20001620 	.word	0x20001620
 8009678:	2000161c 	.word	0x2000161c
 800967c:	2000014c 	.word	0x2000014c

08009680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	60fb      	str	r3, [r7, #12]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <vTaskPlaceOnEventList+0x44>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3318      	adds	r3, #24
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fe fcd0 	bl	8008054 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096b4:	2101      	movs	r1, #1
 80096b6:	6838      	ldr	r0, [r7, #0]
 80096b8:	f000 fe36 	bl	800a328 <prvAddCurrentTaskToDelayedList>
}
 80096bc:	bf00      	nop
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	2000161c 	.word	0x2000161c

080096c8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	617b      	str	r3, [r7, #20]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <vTaskPlaceOnUnorderedEventList+0x70>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	613b      	str	r3, [r7, #16]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009718:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <vTaskPlaceOnUnorderedEventList+0x74>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3318      	adds	r3, #24
 8009720:	4619      	mov	r1, r3
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7fe fc72 	bl	800800c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009728:	2101      	movs	r1, #1
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fdfc 	bl	800a328 <prvAddCurrentTaskToDelayedList>
}
 8009730:	bf00      	nop
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20001b18 	.word	0x20001b18
 800973c:	2000161c 	.word	0x2000161c

08009740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	617b      	str	r3, [r7, #20]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vTaskPlaceOnEventListRestricted+0x54>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3318      	adds	r3, #24
 800976e:	4619      	mov	r1, r3
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7fe fc4b 	bl	800800c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800977c:	f04f 33ff 	mov.w	r3, #4294967295
 8009780:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	68b8      	ldr	r0, [r7, #8]
 8009786:	f000 fdcf 	bl	800a328 <prvAddCurrentTaskToDelayedList>
	}
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	2000161c 	.word	0x2000161c

08009798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60fb      	str	r3, [r7, #12]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	3318      	adds	r3, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fc7c 	bl	80080c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ce:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <xTaskRemoveFromEventList+0xb0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d11d      	bne.n	8009812 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3304      	adds	r3, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fc73 	bl	80080c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4b19      	ldr	r3, [pc, #100]	; (800984c <xTaskRemoveFromEventList+0xb4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d903      	bls.n	80097f4 <xTaskRemoveFromEventList+0x5c>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	4a16      	ldr	r2, [pc, #88]	; (800984c <xTaskRemoveFromEventList+0xb4>)
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4a13      	ldr	r2, [pc, #76]	; (8009850 <xTaskRemoveFromEventList+0xb8>)
 8009802:	441a      	add	r2, r3
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fe fbfe 	bl	800800c <vListInsertEnd>
 8009810:	e005      	b.n	800981e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3318      	adds	r3, #24
 8009816:	4619      	mov	r1, r3
 8009818:	480e      	ldr	r0, [pc, #56]	; (8009854 <xTaskRemoveFromEventList+0xbc>)
 800981a:	f7fe fbf7 	bl	800800c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	4b0d      	ldr	r3, [pc, #52]	; (8009858 <xTaskRemoveFromEventList+0xc0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	429a      	cmp	r2, r3
 800982a:	d905      	bls.n	8009838 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <xTaskRemoveFromEventList+0xc4>)
 8009832:	2201      	movs	r2, #1
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	e001      	b.n	800983c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800983c:	697b      	ldr	r3, [r7, #20]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20001b18 	.word	0x20001b18
 800984c:	20001af8 	.word	0x20001af8
 8009850:	20001620 	.word	0x20001620
 8009854:	20001ab0 	.word	0x20001ab0
 8009858:	2000161c 	.word	0x2000161c
 800985c:	20001b04 	.word	0x20001b04

08009860 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800986a:	4b29      	ldr	r3, [pc, #164]	; (8009910 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10a      	bne.n	8009888 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	613b      	str	r3, [r7, #16]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fe fc06 	bl	80080c6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fc01 	bl	80080c6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4b12      	ldr	r3, [pc, #72]	; (8009914 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d903      	bls.n	80098d8 <vTaskRemoveFromUnorderedEventList+0x78>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4a0c      	ldr	r2, [pc, #48]	; (8009918 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80098e6:	441a      	add	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe fb8c 	bl	800800c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4b08      	ldr	r3, [pc, #32]	; (800991c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	429a      	cmp	r2, r3
 8009900:	d902      	bls.n	8009908 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009902:	4b07      	ldr	r3, [pc, #28]	; (8009920 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009904:	2201      	movs	r2, #1
 8009906:	601a      	str	r2, [r3, #0]
	}
}
 8009908:	bf00      	nop
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20001b18 	.word	0x20001b18
 8009914:	20001af8 	.word	0x20001af8
 8009918:	20001620 	.word	0x20001620
 800991c:	2000161c 	.word	0x2000161c
 8009920:	20001b04 	.word	0x20001b04

08009924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <vTaskInternalSetTimeOutState+0x24>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <vTaskInternalSetTimeOutState+0x28>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	605a      	str	r2, [r3, #4]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20001b08 	.word	0x20001b08
 800994c:	20001af4 	.word	0x20001af4

08009950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	613b      	str	r3, [r7, #16]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60fb      	str	r3, [r7, #12]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009992:	f001 f997 	bl	800acc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009996:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <xTaskCheckForTimeOut+0xbc>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d102      	bne.n	80099b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	e023      	b.n	80099fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <xTaskCheckForTimeOut+0xc0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d007      	beq.n	80099d2 <xTaskCheckForTimeOut+0x82>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e015      	b.n	80099fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d20b      	bcs.n	80099f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	1ad2      	subs	r2, r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ff9b 	bl	8009924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	e004      	b.n	80099fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099fe:	f001 f991 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 8009a02:	69fb      	ldr	r3, [r7, #28]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20001af4 	.word	0x20001af4
 8009a10:	20001b08 	.word	0x20001b08

08009a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a18:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <vTaskMissedYield+0x14>)
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]
}
 8009a1e:	bf00      	nop
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	20001b04 	.word	0x20001b04

08009a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a34:	f000 f852 	bl	8009adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <prvIdleTask+0x28>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d9f9      	bls.n	8009a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a40:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <prvIdleTask+0x2c>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a50:	e7f0      	b.n	8009a34 <prvIdleTask+0x8>
 8009a52:	bf00      	nop
 8009a54:	20001620 	.word	0x20001620
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a62:	2300      	movs	r3, #0
 8009a64:	607b      	str	r3, [r7, #4]
 8009a66:	e00c      	b.n	8009a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4a12      	ldr	r2, [pc, #72]	; (8009abc <prvInitialiseTaskLists+0x60>)
 8009a74:	4413      	add	r3, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fa9b 	bl	8007fb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	607b      	str	r3, [r7, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b37      	cmp	r3, #55	; 0x37
 8009a86:	d9ef      	bls.n	8009a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a88:	480d      	ldr	r0, [pc, #52]	; (8009ac0 <prvInitialiseTaskLists+0x64>)
 8009a8a:	f7fe fa92 	bl	8007fb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a8e:	480d      	ldr	r0, [pc, #52]	; (8009ac4 <prvInitialiseTaskLists+0x68>)
 8009a90:	f7fe fa8f 	bl	8007fb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a94:	480c      	ldr	r0, [pc, #48]	; (8009ac8 <prvInitialiseTaskLists+0x6c>)
 8009a96:	f7fe fa8c 	bl	8007fb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a9a:	480c      	ldr	r0, [pc, #48]	; (8009acc <prvInitialiseTaskLists+0x70>)
 8009a9c:	f7fe fa89 	bl	8007fb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009aa0:	480b      	ldr	r0, [pc, #44]	; (8009ad0 <prvInitialiseTaskLists+0x74>)
 8009aa2:	f7fe fa86 	bl	8007fb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <prvInitialiseTaskLists+0x78>)
 8009aa8:	4a05      	ldr	r2, [pc, #20]	; (8009ac0 <prvInitialiseTaskLists+0x64>)
 8009aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <prvInitialiseTaskLists+0x7c>)
 8009aae:	4a05      	ldr	r2, [pc, #20]	; (8009ac4 <prvInitialiseTaskLists+0x68>)
 8009ab0:	601a      	str	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20001620 	.word	0x20001620
 8009ac0:	20001a80 	.word	0x20001a80
 8009ac4:	20001a94 	.word	0x20001a94
 8009ac8:	20001ab0 	.word	0x20001ab0
 8009acc:	20001ac4 	.word	0x20001ac4
 8009ad0:	20001adc 	.word	0x20001adc
 8009ad4:	20001aa8 	.word	0x20001aa8
 8009ad8:	20001aac 	.word	0x20001aac

08009adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ae2:	e019      	b.n	8009b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ae4:	f001 f8ee 	bl	800acc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae8:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <prvCheckTasksWaitingTermination+0x50>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe fae6 	bl	80080c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <prvCheckTasksWaitingTermination+0x54>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <prvCheckTasksWaitingTermination+0x54>)
 8009b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b04:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	4a0a      	ldr	r2, [pc, #40]	; (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b0e:	f001 f909 	bl	800ad24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f810 	bl	8009b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e1      	bne.n	8009ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20001ac4 	.word	0x20001ac4
 8009b30:	20001af0 	.word	0x20001af0
 8009b34:	20001ad8 	.word	0x20001ad8

08009b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3354      	adds	r3, #84	; 0x54
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 fe8d 	bl	800b864 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d108      	bne.n	8009b66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 faa1 	bl	800b0a0 <vPortFree>
				vPortFree( pxTCB );
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fa9e 	bl	800b0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b64:	e018      	b.n	8009b98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d103      	bne.n	8009b78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 fa95 	bl	800b0a0 <vPortFree>
	}
 8009b76:	e00f      	b.n	8009b98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d00a      	beq.n	8009b98 <prvDeleteTCB+0x60>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	60fb      	str	r3, [r7, #12]
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <prvDeleteTCB+0x5e>
	}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <prvResetNextTaskUnblockTime+0x38>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <prvResetNextTaskUnblockTime+0x3c>)
 8009bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bb8:	e008      	b.n	8009bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <prvResetNextTaskUnblockTime+0x38>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	4a04      	ldr	r2, [pc, #16]	; (8009bdc <prvResetNextTaskUnblockTime+0x3c>)
 8009bca:	6013      	str	r3, [r2, #0]
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	20001aa8 	.word	0x20001aa8
 8009bdc:	20001b10 	.word	0x20001b10

08009be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <xTaskGetSchedulerState+0x34>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	e008      	b.n	8009c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf4:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <xTaskGetSchedulerState+0x38>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	607b      	str	r3, [r7, #4]
 8009c00:	e001      	b.n	8009c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c06:	687b      	ldr	r3, [r7, #4]
	}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	20001afc 	.word	0x20001afc
 8009c18:	20001b18 	.word	0x20001b18

08009c1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d051      	beq.n	8009cd6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c36:	4b2a      	ldr	r3, [pc, #168]	; (8009ce0 <xTaskPriorityInherit+0xc4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d241      	bcs.n	8009cc4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	db06      	blt.n	8009c56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c48:	4b25      	ldr	r3, [pc, #148]	; (8009ce0 <xTaskPriorityInherit+0xc4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6959      	ldr	r1, [r3, #20]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4a1f      	ldr	r2, [pc, #124]	; (8009ce4 <xTaskPriorityInherit+0xc8>)
 8009c68:	4413      	add	r3, r2
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	d122      	bne.n	8009cb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fa27 	bl	80080c6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c78:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <xTaskPriorityInherit+0xc4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c86:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <xTaskPriorityInherit+0xcc>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d903      	bls.n	8009c96 <xTaskPriorityInherit+0x7a>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c92:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <xTaskPriorityInherit+0xcc>)
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4a10      	ldr	r2, [pc, #64]	; (8009ce4 <xTaskPriorityInherit+0xc8>)
 8009ca4:	441a      	add	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4619      	mov	r1, r3
 8009cac:	4610      	mov	r0, r2
 8009cae:	f7fe f9ad 	bl	800800c <vListInsertEnd>
 8009cb2:	e004      	b.n	8009cbe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <xTaskPriorityInherit+0xc4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e008      	b.n	8009cd6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <xTaskPriorityInherit+0xc4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d201      	bcs.n	8009cd6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	2000161c 	.word	0x2000161c
 8009ce4:	20001620 	.word	0x20001620
 8009ce8:	20001af8 	.word	0x20001af8

08009cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d056      	beq.n	8009db0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <xTaskPriorityDisinherit+0xd0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d00a      	beq.n	8009d22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	60fb      	str	r3, [r7, #12]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	60bb      	str	r3, [r7, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d44:	1e5a      	subs	r2, r3, #1
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d02c      	beq.n	8009db0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d128      	bne.n	8009db0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe f9af 	bl	80080c6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <xTaskPriorityDisinherit+0xd4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d903      	bls.n	8009d90 <xTaskPriorityDisinherit+0xa4>
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <xTaskPriorityDisinherit+0xd4>)
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <xTaskPriorityDisinherit+0xd8>)
 8009d9e:	441a      	add	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fe f930 	bl	800800c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dac:	2301      	movs	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009db0:	697b      	ldr	r3, [r7, #20]
	}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	2000161c 	.word	0x2000161c
 8009dc0:	20001af8 	.word	0x20001af8
 8009dc4:	20001620 	.word	0x20001620

08009dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d06a      	beq.n	8009eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60fb      	str	r3, [r7, #12]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d902      	bls.n	8009e0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e002      	b.n	8009e14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d04b      	beq.n	8009eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d146      	bne.n	8009eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e28:	4b25      	ldr	r3, [pc, #148]	; (8009ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d10a      	bne.n	8009e48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	db04      	blt.n	8009e66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	6959      	ldr	r1, [r3, #20]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009e76:	4413      	add	r3, r2
 8009e78:	4299      	cmp	r1, r3
 8009e7a:	d11c      	bne.n	8009eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe f920 	bl	80080c6 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d903      	bls.n	8009e9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a0c      	ldr	r2, [pc, #48]	; (8009ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4a07      	ldr	r2, [pc, #28]	; (8009ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ea8:	441a      	add	r2, r3
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe f8ab 	bl	800800c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009eb6:	bf00      	nop
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	2000161c 	.word	0x2000161c
 8009ec4:	20001620 	.word	0x20001620
 8009ec8:	20001af8 	.word	0x20001af8

08009ecc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <uxTaskResetEventItemValue+0x2c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <uxTaskResetEventItemValue+0x2c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <uxTaskResetEventItemValue+0x2c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009ee8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009eea:	687b      	ldr	r3, [r7, #4]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	2000161c 	.word	0x2000161c

08009efc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f08:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f0e:	3201      	adds	r2, #1
 8009f10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f12:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f14:	681b      	ldr	r3, [r3, #0]
	}
 8009f16:	4618      	mov	r0, r3
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2000161c 	.word	0x2000161c

08009f24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009f32:	f000 fec7 	bl	800acc4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f36:	4b29      	ldr	r3, [pc, #164]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d01c      	beq.n	8009f7e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009f44:	4b25      	ldr	r3, [pc, #148]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	43d2      	mvns	r2, r2
 8009f50:	400a      	ands	r2, r1
 8009f52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f56:	4b21      	ldr	r3, [pc, #132]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00b      	beq.n	8009f7e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f66:	2101      	movs	r1, #1
 8009f68:	6838      	ldr	r0, [r7, #0]
 8009f6a:	f000 f9dd 	bl	800a328 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f6e:	4b1c      	ldr	r3, [pc, #112]	; (8009fe0 <xTaskNotifyWait+0xbc>)
 8009f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f7e:	f000 fed1 	bl	800ad24 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f82:	f000 fe9f 	bl	800acc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009f8c:	4b13      	ldr	r3, [pc, #76]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f98:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d002      	beq.n	8009fac <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e00a      	b.n	8009fc2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	43d2      	mvns	r2, r2
 8009fb8:	400a      	ands	r2, r1
 8009fba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <xTaskNotifyWait+0xb8>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8009fcc:	f000 feaa 	bl	800ad24 <vPortExitCritical>

		return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	2000161c 	.word	0x2000161c
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08a      	sub	sp, #40	; 0x28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <xTaskGenericNotify+0x30>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	61bb      	str	r3, [r7, #24]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a018:	f000 fe54 	bl	800acc4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a032:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d82d      	bhi.n	800a09e <xTaskGenericNotify+0xba>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <xTaskGenericNotify+0x64>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a0c1 	.word	0x0800a0c1
 800a04c:	0800a05d 	.word	0x0800a05d
 800a050:	0800a06f 	.word	0x0800a06f
 800a054:	0800a07f 	.word	0x0800a07f
 800a058:	0800a089 	.word	0x0800a089
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	431a      	orrs	r2, r3
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a06c:	e02b      	b.n	800a0c6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a07c:	e023      	b.n	800a0c6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a086:	e01e      	b.n	800a0c6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a088:	7ffb      	ldrb	r3, [r7, #31]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d004      	beq.n	800a098 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a096:	e016      	b.n	800a0c6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a098:	2300      	movs	r3, #0
 800a09a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a09c:	e013      	b.n	800a0c6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d00c      	beq.n	800a0c4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	617b      	str	r3, [r7, #20]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <xTaskGenericNotify+0xda>
					break;
 800a0c0:	bf00      	nop
 800a0c2:	e000      	b.n	800a0c6 <xTaskGenericNotify+0xe2>

					break;
 800a0c4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a0c6:	7ffb      	ldrb	r3, [r7, #31]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d13a      	bne.n	800a142 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fff8 	bl	80080c6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <xTaskGenericNotify+0x16c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <xTaskGenericNotify+0x106>
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	4a1a      	ldr	r2, [pc, #104]	; (800a150 <xTaskGenericNotify+0x16c>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a17      	ldr	r2, [pc, #92]	; (800a154 <xTaskGenericNotify+0x170>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fd ff83 	bl	800800c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <xTaskGenericNotify+0x140>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	613b      	str	r3, [r7, #16]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a128:	4b0b      	ldr	r3, [pc, #44]	; (800a158 <xTaskGenericNotify+0x174>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d907      	bls.n	800a142 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a132:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <xTaskGenericNotify+0x178>)
 800a134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a142:	f000 fdef 	bl	800ad24 <vPortExitCritical>

		return xReturn;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a148:	4618      	mov	r0, r3
 800a14a:	3728      	adds	r7, #40	; 0x28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20001af8 	.word	0x20001af8
 800a154:	20001620 	.word	0x20001620
 800a158:	2000161c 	.word	0x2000161c
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	; 0x38
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	4613      	mov	r3, r2
 800a16e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a170:	2301      	movs	r3, #1
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a190:	f000 fe7a 	bl	800ae88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a198:	f3ef 8211 	mrs	r2, BASEPRI
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	623a      	str	r2, [r7, #32]
 800a1ae:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a1b0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d82f      	bhi.n	800a23c <xTaskGenericNotifyFromISR+0xdc>
 800a1dc:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <xTaskGenericNotifyFromISR+0x84>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a25f 	.word	0x0800a25f
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a20b 	.word	0x0800a20b
 800a1f0:	0800a21b 	.word	0x0800a21b
 800a1f4:	0800a225 	.word	0x0800a225
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	431a      	orrs	r2, r3
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a208:	e02c      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a218:	e024      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a222:	e01f      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d004      	beq.n	800a236 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a234:	e016      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a236:	2300      	movs	r3, #0
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a23a:	e013      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a246:	d00c      	beq.n	800a262 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61bb      	str	r3, [r7, #24]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a25e:	bf00      	nop
 800a260:	e000      	b.n	800a264 <xTaskGenericNotifyFromISR+0x104>
					break;
 800a262:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d146      	bne.n	800a2fa <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	617b      	str	r3, [r7, #20]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28a:	4b21      	ldr	r3, [pc, #132]	; (800a310 <xTaskGenericNotifyFromISR+0x1b0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11d      	bne.n	800a2ce <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fd ff15 	bl	80080c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <xTaskGenericNotifyFromISR+0x1b4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d903      	bls.n	800a2b0 <xTaskGenericNotifyFromISR+0x150>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a19      	ldr	r2, [pc, #100]	; (800a314 <xTaskGenericNotifyFromISR+0x1b4>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a16      	ldr	r2, [pc, #88]	; (800a318 <xTaskGenericNotifyFromISR+0x1b8>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fd fea0 	bl	800800c <vListInsertEnd>
 800a2cc:	e005      	b.n	800a2da <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	3318      	adds	r3, #24
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4811      	ldr	r0, [pc, #68]	; (800a31c <xTaskGenericNotifyFromISR+0x1bc>)
 800a2d6:	f7fd fe99 	bl	800800c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2de:	4b10      	ldr	r3, [pc, #64]	; (800a320 <xTaskGenericNotifyFromISR+0x1c0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d908      	bls.n	800a2fa <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a2f4:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <xTaskGenericNotifyFromISR+0x1c4>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3738      	adds	r7, #56	; 0x38
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20001b18 	.word	0x20001b18
 800a314:	20001af8 	.word	0x20001af8
 800a318:	20001620 	.word	0x20001620
 800a31c:	20001ab0 	.word	0x20001ab0
 800a320:	2000161c 	.word	0x2000161c
 800a324:	20001b04 	.word	0x20001b04

0800a328 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a332:	4b21      	ldr	r3, [pc, #132]	; (800a3b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a338:	4b20      	ldr	r3, [pc, #128]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd fec1 	bl	80080c6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d10a      	bne.n	800a362 <prvAddCurrentTaskToDelayedList+0x3a>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d007      	beq.n	800a362 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a352:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4819      	ldr	r0, [pc, #100]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a35c:	f7fd fe56 	bl	800800c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a360:	e026      	b.n	800a3b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4413      	add	r3, r2
 800a368:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	429a      	cmp	r2, r3
 800a378:	d209      	bcs.n	800a38e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3304      	adds	r3, #4
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f7fd fe64 	bl	8008054 <vListInsert>
}
 800a38c:	e010      	b.n	800a3b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a38e:	4b0e      	ldr	r3, [pc, #56]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3304      	adds	r3, #4
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7fd fe5a 	bl	8008054 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d202      	bcs.n	800a3b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3aa:	4a08      	ldr	r2, [pc, #32]	; (800a3cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	6013      	str	r3, [r2, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20001af4 	.word	0x20001af4
 800a3bc:	2000161c 	.word	0x2000161c
 800a3c0:	20001adc 	.word	0x20001adc
 800a3c4:	20001aac 	.word	0x20001aac
 800a3c8:	20001aa8 	.word	0x20001aa8
 800a3cc:	20001b10 	.word	0x20001b10

0800a3d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08a      	sub	sp, #40	; 0x28
 800a3d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3da:	f000 fb07 	bl	800a9ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3de:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <xTimerCreateTimerTask+0x80>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d021      	beq.n	800a42a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3ee:	1d3a      	adds	r2, r7, #4
 800a3f0:	f107 0108 	add.w	r1, r7, #8
 800a3f4:	f107 030c 	add.w	r3, r7, #12
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fd fc2b 	bl	8007c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	9202      	str	r2, [sp, #8]
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	2302      	movs	r3, #2
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2300      	movs	r3, #0
 800a40e:	460a      	mov	r2, r1
 800a410:	4910      	ldr	r1, [pc, #64]	; (800a454 <xTimerCreateTimerTask+0x84>)
 800a412:	4811      	ldr	r0, [pc, #68]	; (800a458 <xTimerCreateTimerTask+0x88>)
 800a414:	f7fe fcfe 	bl	8008e14 <xTaskCreateStatic>
 800a418:	4603      	mov	r3, r0
 800a41a:	4a10      	ldr	r2, [pc, #64]	; (800a45c <xTimerCreateTimerTask+0x8c>)
 800a41c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <xTimerCreateTimerTask+0x8c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a426:	2301      	movs	r3, #1
 800a428:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10a      	bne.n	800a446 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	613b      	str	r3, [r7, #16]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a446:	697b      	ldr	r3, [r7, #20]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20001b4c 	.word	0x20001b4c
 800a454:	0800cf8c 	.word	0x0800cf8c
 800a458:	0800a595 	.word	0x0800a595
 800a45c:	20001b50 	.word	0x20001b50

0800a460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a46e:	2300      	movs	r3, #0
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	623b      	str	r3, [r7, #32]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <xTimerGenericCommand+0x98>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d02a      	beq.n	800a4ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b05      	cmp	r3, #5
 800a4a6:	dc18      	bgt.n	800a4da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4a8:	f7ff fb9a 	bl	8009be0 <xTaskGetSchedulerState>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d109      	bne.n	800a4c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <xTimerGenericCommand+0x98>)
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	f107 0110 	add.w	r1, r7, #16
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4be:	f7fd ff9d 	bl	80083fc <xQueueGenericSend>
 800a4c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a4c4:	e012      	b.n	800a4ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <xTimerGenericCommand+0x98>)
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	f107 0110 	add.w	r1, r7, #16
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7fd ff93 	bl	80083fc <xQueueGenericSend>
 800a4d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a4d8:	e008      	b.n	800a4ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4da:	4b07      	ldr	r3, [pc, #28]	; (800a4f8 <xTimerGenericCommand+0x98>)
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	f107 0110 	add.w	r1, r7, #16
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	f7fe f887 	bl	80085f8 <xQueueGenericSendFromISR>
 800a4ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3728      	adds	r7, #40	; 0x28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20001b4c 	.word	0x20001b4c

0800a4fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af02      	add	r7, sp, #8
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a506:	4b22      	ldr	r3, [pc, #136]	; (800a590 <prvProcessExpiredTimer+0x94>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	3304      	adds	r3, #4
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd fdd6 	bl	80080c6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d022      	beq.n	800a56e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	699a      	ldr	r2, [r3, #24]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	18d1      	adds	r1, r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	6978      	ldr	r0, [r7, #20]
 800a536:	f000 f8d1 	bl	800a6dc <prvInsertTimerInActiveList>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d01f      	beq.n	800a580 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a540:	2300      	movs	r3, #0
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	2300      	movs	r3, #0
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	2100      	movs	r1, #0
 800a54a:	6978      	ldr	r0, [r7, #20]
 800a54c:	f7ff ff88 	bl	800a460 <xTimerGenericCommand>
 800a550:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d113      	bne.n	800a580 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a574:	f023 0301 	bic.w	r3, r3, #1
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	6978      	ldr	r0, [r7, #20]
 800a586:	4798      	blx	r3
}
 800a588:	bf00      	nop
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20001b44 	.word	0x20001b44

0800a594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a59c:	f107 0308 	add.w	r3, r7, #8
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 f857 	bl	800a654 <prvGetNextExpireTime>
 800a5a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 f803 	bl	800a5b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5b2:	f000 f8d5 	bl	800a760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5b6:	e7f1      	b.n	800a59c <prvTimerTask+0x8>

0800a5b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5c2:	f7fe fe83 	bl	80092cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 f866 	bl	800a69c <prvSampleTimeNow>
 800a5d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d130      	bne.n	800a63a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <prvProcessTimerOrBlockTask+0x3c>
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d806      	bhi.n	800a5f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5e6:	f7fe fe7f 	bl	80092e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5ea:	68f9      	ldr	r1, [r7, #12]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff ff85 	bl	800a4fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5f2:	e024      	b.n	800a63e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5fa:	4b13      	ldr	r3, [pc, #76]	; (800a648 <prvProcessTimerOrBlockTask+0x90>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <prvProcessTimerOrBlockTask+0x50>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <prvProcessTimerOrBlockTask+0x52>
 800a608:	2300      	movs	r3, #0
 800a60a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a60c:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <prvProcessTimerOrBlockTask+0x94>)
 800a60e:	6818      	ldr	r0, [r3, #0]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4619      	mov	r1, r3
 800a61a:	f7fe fbc7 	bl	8008dac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a61e:	f7fe fe63 	bl	80092e8 <xTaskResumeAll>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <prvProcessTimerOrBlockTask+0x98>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
}
 800a638:	e001      	b.n	800a63e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a63a:	f7fe fe55 	bl	80092e8 <xTaskResumeAll>
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20001b48 	.word	0x20001b48
 800a64c:	20001b4c 	.word	0x20001b4c
 800a650:	e000ed04 	.word	0xe000ed04

0800a654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <prvGetNextExpireTime+0x44>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <prvGetNextExpireTime+0x16>
 800a666:	2201      	movs	r2, #1
 800a668:	e000      	b.n	800a66c <prvGetNextExpireTime+0x18>
 800a66a:	2200      	movs	r2, #0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d105      	bne.n	800a684 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <prvGetNextExpireTime+0x44>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e001      	b.n	800a688 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a688:	68fb      	ldr	r3, [r7, #12]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20001b44 	.word	0x20001b44

0800a69c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6a4:	f7fe febe 	bl	8009424 <xTaskGetTickCount>
 800a6a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6aa:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <prvSampleTimeNow+0x3c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d205      	bcs.n	800a6c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6b4:	f000 f936 	bl	800a924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e002      	b.n	800a6c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6c6:	4a04      	ldr	r2, [pc, #16]	; (800a6d8 <prvSampleTimeNow+0x3c>)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20001b54 	.word	0x20001b54

0800a6dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d812      	bhi.n	800a728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d302      	bcc.n	800a716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e01b      	b.n	800a74e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <prvInsertTimerInActiveList+0x7c>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7fd fc97 	bl	8008054 <vListInsert>
 800a726:	e012      	b.n	800a74e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d206      	bcs.n	800a73e <prvInsertTimerInActiveList+0x62>
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d302      	bcc.n	800a73e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e007      	b.n	800a74e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a73e:	4b07      	ldr	r3, [pc, #28]	; (800a75c <prvInsertTimerInActiveList+0x80>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3304      	adds	r3, #4
 800a746:	4619      	mov	r1, r3
 800a748:	4610      	mov	r0, r2
 800a74a:	f7fd fc83 	bl	8008054 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a74e:	697b      	ldr	r3, [r7, #20]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20001b48 	.word	0x20001b48
 800a75c:	20001b44 	.word	0x20001b44

0800a760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b08e      	sub	sp, #56	; 0x38
 800a764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a766:	e0ca      	b.n	800a8fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	da18      	bge.n	800a7a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a76e:	1d3b      	adds	r3, r7, #4
 800a770:	3304      	adds	r3, #4
 800a772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10a      	bne.n	800a790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	61fb      	str	r3, [r7, #28]
}
 800a78c:	bf00      	nop
 800a78e:	e7fe      	b.n	800a78e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a796:	6850      	ldr	r0, [r2, #4]
 800a798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79a:	6892      	ldr	r2, [r2, #8]
 800a79c:	4611      	mov	r1, r2
 800a79e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f2c0 80ab 	blt.w	800a8fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fd fc84 	bl	80080c6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7be:	463b      	mov	r3, r7
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff ff6b 	bl	800a69c <prvSampleTimeNow>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b09      	cmp	r3, #9
 800a7cc:	f200 8096 	bhi.w	800a8fc <prvProcessReceivedCommands+0x19c>
 800a7d0:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <prvProcessReceivedCommands+0x78>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a801 	.word	0x0800a801
 800a7e4:	0800a875 	.word	0x0800a875
 800a7e8:	0800a889 	.word	0x0800a889
 800a7ec:	0800a8d3 	.word	0x0800a8d3
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a801 	.word	0x0800a801
 800a7f8:	0800a875 	.word	0x0800a875
 800a7fc:	0800a889 	.word	0x0800a889
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	18d1      	adds	r1, r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a820:	f7ff ff5c 	bl	800a6dc <prvInsertTimerInActiveList>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d069      	beq.n	800a8fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d05e      	beq.n	800a8fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	441a      	add	r2, r3
 800a848:	2300      	movs	r3, #0
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	2300      	movs	r3, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a852:	f7ff fe05 	bl	800a460 <xTimerGenericCommand>
 800a856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d14f      	bne.n	800a8fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	61bb      	str	r3, [r7, #24]
}
 800a870:	bf00      	nop
 800a872:	e7fe      	b.n	800a872 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a87a:	f023 0301 	bic.w	r3, r3, #1
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a886:	e03a      	b.n	800a8fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	617b      	str	r3, [r7, #20]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	699a      	ldr	r2, [r3, #24]
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	18d1      	adds	r1, r2, r3
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8cc:	f7ff ff06 	bl	800a6dc <prvInsertTimerInActiveList>
					break;
 800a8d0:	e015      	b.n	800a8fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d8:	f003 0302 	and.w	r3, r3, #2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d103      	bne.n	800a8e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e2:	f000 fbdd 	bl	800b0a0 <vPortFree>
 800a8e6:	e00a      	b.n	800a8fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ee:	f023 0301 	bic.w	r3, r3, #1
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8fa:	e000      	b.n	800a8fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a8fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <prvProcessReceivedCommands+0x1c0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	1d39      	adds	r1, r7, #4
 800a904:	2200      	movs	r2, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f7fd ff12 	bl	8008730 <xQueueReceive>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f af2a 	bne.w	800a768 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	3730      	adds	r7, #48	; 0x30
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20001b4c 	.word	0x20001b4c

0800a924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a92a:	e048      	b.n	800a9be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a92c:	4b2d      	ldr	r3, [pc, #180]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a936:	4b2b      	ldr	r3, [pc, #172]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3304      	adds	r3, #4
 800a944:	4618      	mov	r0, r3
 800a946:	f7fd fbbe 	bl	80080c6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d02e      	beq.n	800a9be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4413      	add	r3, r2
 800a968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d90e      	bls.n	800a990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a97e:	4b19      	ldr	r3, [pc, #100]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3304      	adds	r3, #4
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f7fd fb63 	bl	8008054 <vListInsert>
 800a98e:	e016      	b.n	800a9be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a990:	2300      	movs	r3, #0
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	2300      	movs	r3, #0
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	2100      	movs	r1, #0
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff fd60 	bl	800a460 <xTimerGenericCommand>
 800a9a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	603b      	str	r3, [r7, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1b1      	bne.n	800a92c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9ce:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <prvSwitchTimerLists+0xc4>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a04      	ldr	r2, [pc, #16]	; (800a9e4 <prvSwitchTimerLists+0xc0>)
 800a9d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9d6:	4a04      	ldr	r2, [pc, #16]	; (800a9e8 <prvSwitchTimerLists+0xc4>)
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	6013      	str	r3, [r2, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20001b44 	.word	0x20001b44
 800a9e8:	20001b48 	.word	0x20001b48

0800a9ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9f2:	f000 f967 	bl	800acc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9f6:	4b15      	ldr	r3, [pc, #84]	; (800aa4c <prvCheckForValidListAndQueue+0x60>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d120      	bne.n	800aa40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9fe:	4814      	ldr	r0, [pc, #80]	; (800aa50 <prvCheckForValidListAndQueue+0x64>)
 800aa00:	f7fd fad7 	bl	8007fb2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa04:	4813      	ldr	r0, [pc, #76]	; (800aa54 <prvCheckForValidListAndQueue+0x68>)
 800aa06:	f7fd fad4 	bl	8007fb2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa0a:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <prvCheckForValidListAndQueue+0x6c>)
 800aa0c:	4a10      	ldr	r2, [pc, #64]	; (800aa50 <prvCheckForValidListAndQueue+0x64>)
 800aa0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa10:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <prvCheckForValidListAndQueue+0x70>)
 800aa12:	4a10      	ldr	r2, [pc, #64]	; (800aa54 <prvCheckForValidListAndQueue+0x68>)
 800aa14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa16:	2300      	movs	r3, #0
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <prvCheckForValidListAndQueue+0x74>)
 800aa1c:	4a11      	ldr	r2, [pc, #68]	; (800aa64 <prvCheckForValidListAndQueue+0x78>)
 800aa1e:	2110      	movs	r1, #16
 800aa20:	200a      	movs	r0, #10
 800aa22:	f7fd fbe3 	bl	80081ec <xQueueGenericCreateStatic>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4a08      	ldr	r2, [pc, #32]	; (800aa4c <prvCheckForValidListAndQueue+0x60>)
 800aa2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <prvCheckForValidListAndQueue+0x60>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <prvCheckForValidListAndQueue+0x60>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	490b      	ldr	r1, [pc, #44]	; (800aa68 <prvCheckForValidListAndQueue+0x7c>)
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe f98c 	bl	8008d58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa40:	f000 f970 	bl	800ad24 <vPortExitCritical>
}
 800aa44:	bf00      	nop
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20001b4c 	.word	0x20001b4c
 800aa50:	20001b1c 	.word	0x20001b1c
 800aa54:	20001b30 	.word	0x20001b30
 800aa58:	20001b44 	.word	0x20001b44
 800aa5c:	20001b48 	.word	0x20001b48
 800aa60:	20001bf8 	.word	0x20001bf8
 800aa64:	20001b58 	.word	0x20001b58
 800aa68:	0800cf94 	.word	0x0800cf94

0800aa6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3b04      	subs	r3, #4
 800aa7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3b04      	subs	r3, #4
 800aa8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f023 0201 	bic.w	r2, r3, #1
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa9c:	4a0c      	ldr	r2, [pc, #48]	; (800aad0 <pxPortInitialiseStack+0x64>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3b14      	subs	r3, #20
 800aaa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f06f 0202 	mvn.w	r2, #2
 800aaba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3b20      	subs	r3, #32
 800aac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aac2:	68fb      	ldr	r3, [r7, #12]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	0800aad5 	.word	0x0800aad5

0800aad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <prvTaskExitError+0x54>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae6:	d00a      	beq.n	800aafe <prvTaskExitError+0x2a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	60fb      	str	r3, [r7, #12]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <prvTaskExitError+0x28>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	60bb      	str	r3, [r7, #8]
}
 800ab10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab12:	bf00      	nop
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0fc      	beq.n	800ab14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	200000f0 	.word	0x200000f0
 800ab2c:	00000000 	.word	0x00000000

0800ab30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <pxCurrentTCBConst2>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	6808      	ldr	r0, [r1, #0]
 800ab36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	f380 8809 	msr	PSP, r0
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f380 8811 	msr	BASEPRI, r0
 800ab4a:	4770      	bx	lr
 800ab4c:	f3af 8000 	nop.w

0800ab50 <pxCurrentTCBConst2>:
 800ab50:	2000161c 	.word	0x2000161c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop

0800ab58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab58:	4808      	ldr	r0, [pc, #32]	; (800ab7c <prvPortStartFirstTask+0x24>)
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	6800      	ldr	r0, [r0, #0]
 800ab5e:	f380 8808 	msr	MSP, r0
 800ab62:	f04f 0000 	mov.w	r0, #0
 800ab66:	f380 8814 	msr	CONTROL, r0
 800ab6a:	b662      	cpsie	i
 800ab6c:	b661      	cpsie	f
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	df00      	svc	0
 800ab78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab7a:	bf00      	nop
 800ab7c:	e000ed08 	.word	0xe000ed08

0800ab80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab86:	4b46      	ldr	r3, [pc, #280]	; (800aca0 <xPortStartScheduler+0x120>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a46      	ldr	r2, [pc, #280]	; (800aca4 <xPortStartScheduler+0x124>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d10a      	bne.n	800aba6 <xPortStartScheduler+0x26>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	613b      	str	r3, [r7, #16]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aba6:	4b3e      	ldr	r3, [pc, #248]	; (800aca0 <xPortStartScheduler+0x120>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a3f      	ldr	r2, [pc, #252]	; (800aca8 <xPortStartScheduler+0x128>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10a      	bne.n	800abc6 <xPortStartScheduler+0x46>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	60fb      	str	r3, [r7, #12]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abc6:	4b39      	ldr	r3, [pc, #228]	; (800acac <xPortStartScheduler+0x12c>)
 800abc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	22ff      	movs	r2, #255	; 0xff
 800abd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abe0:	78fb      	ldrb	r3, [r7, #3]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	4b31      	ldr	r3, [pc, #196]	; (800acb0 <xPortStartScheduler+0x130>)
 800abec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abee:	4b31      	ldr	r3, [pc, #196]	; (800acb4 <xPortStartScheduler+0x134>)
 800abf0:	2207      	movs	r2, #7
 800abf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abf4:	e009      	b.n	800ac0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <xPortStartScheduler+0x134>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	4a2d      	ldr	r2, [pc, #180]	; (800acb4 <xPortStartScheduler+0x134>)
 800abfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac12:	2b80      	cmp	r3, #128	; 0x80
 800ac14:	d0ef      	beq.n	800abf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac16:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f1c3 0307 	rsb	r3, r3, #7
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d00a      	beq.n	800ac38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60bb      	str	r3, [r7, #8]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac38:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	4a1d      	ldr	r2, [pc, #116]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac4a:	4a1a      	ldr	r2, [pc, #104]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a14      	ldr	r2, [pc, #80]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac6e:	f000 f8dd 	bl	800ae2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac72:	4b12      	ldr	r3, [pc, #72]	; (800acbc <xPortStartScheduler+0x13c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac78:	f000 f8fc 	bl	800ae74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac7c:	4b10      	ldr	r3, [pc, #64]	; (800acc0 <xPortStartScheduler+0x140>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <xPortStartScheduler+0x140>)
 800ac82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac88:	f7ff ff66 	bl	800ab58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac8c:	f7fe fc94 	bl	80095b8 <vTaskSwitchContext>
	prvTaskExitError();
 800ac90:	f7ff ff20 	bl	800aad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	e000ed00 	.word	0xe000ed00
 800aca4:	410fc271 	.word	0x410fc271
 800aca8:	410fc270 	.word	0x410fc270
 800acac:	e000e400 	.word	0xe000e400
 800acb0:	20001c48 	.word	0x20001c48
 800acb4:	20001c4c 	.word	0x20001c4c
 800acb8:	e000ed20 	.word	0xe000ed20
 800acbc:	200000f0 	.word	0x200000f0
 800acc0:	e000ef34 	.word	0xe000ef34

0800acc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	607b      	str	r3, [r7, #4]
}
 800acdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <vPortEnterCritical+0x58>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a0d      	ldr	r2, [pc, #52]	; (800ad1c <vPortEnterCritical+0x58>)
 800ace6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <vPortEnterCritical+0x58>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d10f      	bne.n	800ad10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <vPortEnterCritical+0x5c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <vPortEnterCritical+0x4c>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	603b      	str	r3, [r7, #0]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <vPortEnterCritical+0x4a>
	}
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	200000f0 	.word	0x200000f0
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <vPortExitCritical+0x50>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10a      	bne.n	800ad48 <vPortExitCritical+0x24>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	607b      	str	r3, [r7, #4]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <vPortExitCritical+0x50>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <vPortExitCritical+0x50>)
 800ad50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <vPortExitCritical+0x50>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d105      	bne.n	800ad66 <vPortExitCritical+0x42>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	f383 8811 	msr	BASEPRI, r3
}
 800ad64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	200000f0 	.word	0x200000f0
	...

0800ad80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad80:	f3ef 8009 	mrs	r0, PSP
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <pxCurrentTCBConst>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	f01e 0f10 	tst.w	lr, #16
 800ad90:	bf08      	it	eq
 800ad92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	6010      	str	r0, [r2, #0]
 800ad9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ada0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ada4:	f380 8811 	msr	BASEPRI, r0
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f7fe fc02 	bl	80095b8 <vTaskSwitchContext>
 800adb4:	f04f 0000 	mov.w	r0, #0
 800adb8:	f380 8811 	msr	BASEPRI, r0
 800adbc:	bc09      	pop	{r0, r3}
 800adbe:	6819      	ldr	r1, [r3, #0]
 800adc0:	6808      	ldr	r0, [r1, #0]
 800adc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc6:	f01e 0f10 	tst.w	lr, #16
 800adca:	bf08      	it	eq
 800adcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800add0:	f380 8809 	msr	PSP, r0
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w

0800ade0 <pxCurrentTCBConst>:
 800ade0:	2000161c 	.word	0x2000161c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop

0800ade8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	607b      	str	r3, [r7, #4]
}
 800ae00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae02:	f7fe fb1f 	bl	8009444 <xTaskIncrementTick>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae0c:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <xPortSysTickHandler+0x40>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	2300      	movs	r3, #0
 800ae16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f383 8811 	msr	BASEPRI, r3
}
 800ae1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <vPortSetupTimerInterrupt+0x34>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <vPortSetupTimerInterrupt+0x38>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <vPortSetupTimerInterrupt+0x3c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a0a      	ldr	r2, [pc, #40]	; (800ae6c <vPortSetupTimerInterrupt+0x40>)
 800ae42:	fba2 2303 	umull	r2, r3, r2, r3
 800ae46:	099b      	lsrs	r3, r3, #6
 800ae48:	4a09      	ldr	r2, [pc, #36]	; (800ae70 <vPortSetupTimerInterrupt+0x44>)
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <vPortSetupTimerInterrupt+0x34>)
 800ae50:	2207      	movs	r2, #7
 800ae52:	601a      	str	r2, [r3, #0]
}
 800ae54:	bf00      	nop
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	e000e010 	.word	0xe000e010
 800ae64:	e000e018 	.word	0xe000e018
 800ae68:	200000e4 	.word	0x200000e4
 800ae6c:	10624dd3 	.word	0x10624dd3
 800ae70:	e000e014 	.word	0xe000e014

0800ae74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae84 <vPortEnableVFP+0x10>
 800ae78:	6801      	ldr	r1, [r0, #0]
 800ae7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae7e:	6001      	str	r1, [r0, #0]
 800ae80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae82:	bf00      	nop
 800ae84:	e000ed88 	.word	0xe000ed88

0800ae88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae8e:	f3ef 8305 	mrs	r3, IPSR
 800ae92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	d914      	bls.n	800aec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <vPortValidateInterruptPriority+0x70>)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aea4:	4b15      	ldr	r3, [pc, #84]	; (800aefc <vPortValidateInterruptPriority+0x74>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	7afa      	ldrb	r2, [r7, #11]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d20a      	bcs.n	800aec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aec4:	4b0e      	ldr	r3, [pc, #56]	; (800af00 <vPortValidateInterruptPriority+0x78>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <vPortValidateInterruptPriority+0x7c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d90a      	bls.n	800aeea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	603b      	str	r3, [r7, #0]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <vPortValidateInterruptPriority+0x60>
	}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	e000e3f0 	.word	0xe000e3f0
 800aefc:	20001c48 	.word	0x20001c48
 800af00:	e000ed0c 	.word	0xe000ed0c
 800af04:	20001c4c 	.word	0x20001c4c

0800af08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af10:	2300      	movs	r3, #0
 800af12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af14:	f7fe f9da 	bl	80092cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af18:	4b5b      	ldr	r3, [pc, #364]	; (800b088 <pvPortMalloc+0x180>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af20:	f000 f920 	bl	800b164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af24:	4b59      	ldr	r3, [pc, #356]	; (800b08c <pvPortMalloc+0x184>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4013      	ands	r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f040 8093 	bne.w	800b058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01d      	beq.n	800af74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af38:	2208      	movs	r2, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4413      	add	r3, r2
 800af3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b00      	cmp	r3, #0
 800af48:	d014      	beq.n	800af74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f023 0307 	bic.w	r3, r3, #7
 800af50:	3308      	adds	r3, #8
 800af52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <pvPortMalloc+0x6c>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	617b      	str	r3, [r7, #20]
}
 800af70:	bf00      	nop
 800af72:	e7fe      	b.n	800af72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d06e      	beq.n	800b058 <pvPortMalloc+0x150>
 800af7a:	4b45      	ldr	r3, [pc, #276]	; (800b090 <pvPortMalloc+0x188>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d869      	bhi.n	800b058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af84:	4b43      	ldr	r3, [pc, #268]	; (800b094 <pvPortMalloc+0x18c>)
 800af86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af88:	4b42      	ldr	r3, [pc, #264]	; (800b094 <pvPortMalloc+0x18c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af8e:	e004      	b.n	800af9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d903      	bls.n	800afac <pvPortMalloc+0xa4>
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1f1      	bne.n	800af90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afac:	4b36      	ldr	r3, [pc, #216]	; (800b088 <pvPortMalloc+0x180>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d050      	beq.n	800b058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2208      	movs	r2, #8
 800afbc:	4413      	add	r3, r2
 800afbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	1ad2      	subs	r2, r2, r3
 800afd0:	2308      	movs	r3, #8
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d91f      	bls.n	800b018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <pvPortMalloc+0xf8>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	613b      	str	r3, [r7, #16]
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	1ad2      	subs	r2, r2, r3
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b012:	69b8      	ldr	r0, [r7, #24]
 800b014:	f000 f908 	bl	800b228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b018:	4b1d      	ldr	r3, [pc, #116]	; (800b090 <pvPortMalloc+0x188>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <pvPortMalloc+0x188>)
 800b024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b026:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <pvPortMalloc+0x188>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	4b1b      	ldr	r3, [pc, #108]	; (800b098 <pvPortMalloc+0x190>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d203      	bcs.n	800b03a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b032:	4b17      	ldr	r3, [pc, #92]	; (800b090 <pvPortMalloc+0x188>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a18      	ldr	r2, [pc, #96]	; (800b098 <pvPortMalloc+0x190>)
 800b038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <pvPortMalloc+0x184>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	431a      	orrs	r2, r3
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <pvPortMalloc+0x194>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	4a11      	ldr	r2, [pc, #68]	; (800b09c <pvPortMalloc+0x194>)
 800b056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b058:	f7fe f946 	bl	80092e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	f003 0307 	and.w	r3, r3, #7
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <pvPortMalloc+0x174>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <pvPortMalloc+0x172>
	return pvReturn;
 800b07c:	69fb      	ldr	r3, [r7, #28]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20006a78 	.word	0x20006a78
 800b08c:	20006a8c 	.word	0x20006a8c
 800b090:	20006a7c 	.word	0x20006a7c
 800b094:	20006a70 	.word	0x20006a70
 800b098:	20006a80 	.word	0x20006a80
 800b09c:	20006a84 	.word	0x20006a84

0800b0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d04d      	beq.n	800b14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0b2:	2308      	movs	r3, #8
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	4b24      	ldr	r3, [pc, #144]	; (800b158 <vPortFree+0xb8>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <vPortFree+0x44>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	60fb      	str	r3, [r7, #12]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <vPortFree+0x62>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	60bb      	str	r3, [r7, #8]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <vPortFree+0xb8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01e      	beq.n	800b14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d11a      	bne.n	800b14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <vPortFree+0xb8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	43db      	mvns	r3, r3
 800b122:	401a      	ands	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b128:	f7fe f8d0 	bl	80092cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <vPortFree+0xbc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4413      	add	r3, r2
 800b136:	4a09      	ldr	r2, [pc, #36]	; (800b15c <vPortFree+0xbc>)
 800b138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b13a:	6938      	ldr	r0, [r7, #16]
 800b13c:	f000 f874 	bl	800b228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <vPortFree+0xc0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3301      	adds	r3, #1
 800b146:	4a06      	ldr	r2, [pc, #24]	; (800b160 <vPortFree+0xc0>)
 800b148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b14a:	f7fe f8cd 	bl	80092e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20006a8c 	.word	0x20006a8c
 800b15c:	20006a7c 	.word	0x20006a7c
 800b160:	20006a88 	.word	0x20006a88

0800b164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b16a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b170:	4b27      	ldr	r3, [pc, #156]	; (800b210 <prvHeapInit+0xac>)
 800b172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00c      	beq.n	800b198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3307      	adds	r3, #7
 800b182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 0307 	bic.w	r3, r3, #7
 800b18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	4a1f      	ldr	r2, [pc, #124]	; (800b210 <prvHeapInit+0xac>)
 800b194:	4413      	add	r3, r2
 800b196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b19c:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <prvHeapInit+0xb0>)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <prvHeapInit+0xb0>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1b0:	2208      	movs	r2, #8
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a15      	ldr	r2, [pc, #84]	; (800b218 <prvHeapInit+0xb4>)
 800b1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <prvHeapInit+0xb4>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ce:	4b12      	ldr	r3, [pc, #72]	; (800b218 <prvHeapInit+0xb4>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <prvHeapInit+0xb4>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <prvHeapInit+0xb8>)
 800b1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4a09      	ldr	r2, [pc, #36]	; (800b220 <prvHeapInit+0xbc>)
 800b1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1fc:	4b09      	ldr	r3, [pc, #36]	; (800b224 <prvHeapInit+0xc0>)
 800b1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	20001c50 	.word	0x20001c50
 800b214:	20006a70 	.word	0x20006a70
 800b218:	20006a78 	.word	0x20006a78
 800b21c:	20006a80 	.word	0x20006a80
 800b220:	20006a7c 	.word	0x20006a7c
 800b224:	20006a8c 	.word	0x20006a8c

0800b228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b230:	4b28      	ldr	r3, [pc, #160]	; (800b2d4 <prvInsertBlockIntoFreeList+0xac>)
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e002      	b.n	800b23c <prvInsertBlockIntoFreeList+0x14>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	429a      	cmp	r2, r3
 800b244:	d8f7      	bhi.n	800b236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	4413      	add	r3, r2
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d108      	bne.n	800b26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	441a      	add	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d118      	bne.n	800b2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d00d      	beq.n	800b2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	441a      	add	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e008      	b.n	800b2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	e003      	b.n	800b2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d002      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	20006a70 	.word	0x20006a70
 800b2d8:	20006a78 	.word	0x20006a78

0800b2dc <__assert_func>:
 800b2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2de:	4614      	mov	r4, r2
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <__assert_func+0x2c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	68d8      	ldr	r0, [r3, #12]
 800b2ea:	b14c      	cbz	r4, 800b300 <__assert_func+0x24>
 800b2ec:	4b07      	ldr	r3, [pc, #28]	; (800b30c <__assert_func+0x30>)
 800b2ee:	9100      	str	r1, [sp, #0]
 800b2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2f4:	4906      	ldr	r1, [pc, #24]	; (800b310 <__assert_func+0x34>)
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	f000 f9c2 	bl	800b680 <fiprintf>
 800b2fc:	f000 fb86 	bl	800ba0c <abort>
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <__assert_func+0x38>)
 800b302:	461c      	mov	r4, r3
 800b304:	e7f3      	b.n	800b2ee <__assert_func+0x12>
 800b306:	bf00      	nop
 800b308:	2000014c 	.word	0x2000014c
 800b30c:	0800d154 	.word	0x0800d154
 800b310:	0800d161 	.word	0x0800d161
 800b314:	0800d18f 	.word	0x0800d18f

0800b318 <__itoa>:
 800b318:	1e93      	subs	r3, r2, #2
 800b31a:	2b22      	cmp	r3, #34	; 0x22
 800b31c:	b510      	push	{r4, lr}
 800b31e:	460c      	mov	r4, r1
 800b320:	d904      	bls.n	800b32c <__itoa+0x14>
 800b322:	2300      	movs	r3, #0
 800b324:	700b      	strb	r3, [r1, #0]
 800b326:	461c      	mov	r4, r3
 800b328:	4620      	mov	r0, r4
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	2a0a      	cmp	r2, #10
 800b32e:	d109      	bne.n	800b344 <__itoa+0x2c>
 800b330:	2800      	cmp	r0, #0
 800b332:	da07      	bge.n	800b344 <__itoa+0x2c>
 800b334:	232d      	movs	r3, #45	; 0x2d
 800b336:	700b      	strb	r3, [r1, #0]
 800b338:	4240      	negs	r0, r0
 800b33a:	2101      	movs	r1, #1
 800b33c:	4421      	add	r1, r4
 800b33e:	f000 f8b9 	bl	800b4b4 <__utoa>
 800b342:	e7f1      	b.n	800b328 <__itoa+0x10>
 800b344:	2100      	movs	r1, #0
 800b346:	e7f9      	b.n	800b33c <__itoa+0x24>

0800b348 <itoa>:
 800b348:	f7ff bfe6 	b.w	800b318 <__itoa>

0800b34c <malloc>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <malloc+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f000 b823 	b.w	800b39c <_malloc_r>
 800b356:	bf00      	nop
 800b358:	2000014c 	.word	0x2000014c

0800b35c <sbrk_aligned>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4e0e      	ldr	r6, [pc, #56]	; (800b398 <sbrk_aligned+0x3c>)
 800b360:	460c      	mov	r4, r1
 800b362:	6831      	ldr	r1, [r6, #0]
 800b364:	4605      	mov	r5, r0
 800b366:	b911      	cbnz	r1, 800b36e <sbrk_aligned+0x12>
 800b368:	f000 faf6 	bl	800b958 <_sbrk_r>
 800b36c:	6030      	str	r0, [r6, #0]
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f000 faf1 	bl	800b958 <_sbrk_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d00a      	beq.n	800b390 <sbrk_aligned+0x34>
 800b37a:	1cc4      	adds	r4, r0, #3
 800b37c:	f024 0403 	bic.w	r4, r4, #3
 800b380:	42a0      	cmp	r0, r4
 800b382:	d007      	beq.n	800b394 <sbrk_aligned+0x38>
 800b384:	1a21      	subs	r1, r4, r0
 800b386:	4628      	mov	r0, r5
 800b388:	f000 fae6 	bl	800b958 <_sbrk_r>
 800b38c:	3001      	adds	r0, #1
 800b38e:	d101      	bne.n	800b394 <sbrk_aligned+0x38>
 800b390:	f04f 34ff 	mov.w	r4, #4294967295
 800b394:	4620      	mov	r0, r4
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	20006a94 	.word	0x20006a94

0800b39c <_malloc_r>:
 800b39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a0:	1ccd      	adds	r5, r1, #3
 800b3a2:	f025 0503 	bic.w	r5, r5, #3
 800b3a6:	3508      	adds	r5, #8
 800b3a8:	2d0c      	cmp	r5, #12
 800b3aa:	bf38      	it	cc
 800b3ac:	250c      	movcc	r5, #12
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	db01      	blt.n	800b3b8 <_malloc_r+0x1c>
 800b3b4:	42a9      	cmp	r1, r5
 800b3b6:	d905      	bls.n	800b3c4 <_malloc_r+0x28>
 800b3b8:	230c      	movs	r3, #12
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	2600      	movs	r6, #0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b498 <_malloc_r+0xfc>
 800b3c8:	f000 f868 	bl	800b49c <__malloc_lock>
 800b3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d0:	461c      	mov	r4, r3
 800b3d2:	bb5c      	cbnz	r4, 800b42c <_malloc_r+0x90>
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	f7ff ffc0 	bl	800b35c <sbrk_aligned>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	4604      	mov	r4, r0
 800b3e0:	d155      	bne.n	800b48e <_malloc_r+0xf2>
 800b3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800b3e6:	4626      	mov	r6, r4
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	d145      	bne.n	800b478 <_malloc_r+0xdc>
 800b3ec:	2c00      	cmp	r4, #0
 800b3ee:	d048      	beq.n	800b482 <_malloc_r+0xe6>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	eb04 0903 	add.w	r9, r4, r3
 800b3fa:	f000 faad 	bl	800b958 <_sbrk_r>
 800b3fe:	4581      	cmp	r9, r0
 800b400:	d13f      	bne.n	800b482 <_malloc_r+0xe6>
 800b402:	6821      	ldr	r1, [r4, #0]
 800b404:	1a6d      	subs	r5, r5, r1
 800b406:	4629      	mov	r1, r5
 800b408:	4638      	mov	r0, r7
 800b40a:	f7ff ffa7 	bl	800b35c <sbrk_aligned>
 800b40e:	3001      	adds	r0, #1
 800b410:	d037      	beq.n	800b482 <_malloc_r+0xe6>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	442b      	add	r3, r5
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	f8d8 3000 	ldr.w	r3, [r8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d038      	beq.n	800b492 <_malloc_r+0xf6>
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	42a2      	cmp	r2, r4
 800b424:	d12b      	bne.n	800b47e <_malloc_r+0xe2>
 800b426:	2200      	movs	r2, #0
 800b428:	605a      	str	r2, [r3, #4]
 800b42a:	e00f      	b.n	800b44c <_malloc_r+0xb0>
 800b42c:	6822      	ldr	r2, [r4, #0]
 800b42e:	1b52      	subs	r2, r2, r5
 800b430:	d41f      	bmi.n	800b472 <_malloc_r+0xd6>
 800b432:	2a0b      	cmp	r2, #11
 800b434:	d917      	bls.n	800b466 <_malloc_r+0xca>
 800b436:	1961      	adds	r1, r4, r5
 800b438:	42a3      	cmp	r3, r4
 800b43a:	6025      	str	r5, [r4, #0]
 800b43c:	bf18      	it	ne
 800b43e:	6059      	strne	r1, [r3, #4]
 800b440:	6863      	ldr	r3, [r4, #4]
 800b442:	bf08      	it	eq
 800b444:	f8c8 1000 	streq.w	r1, [r8]
 800b448:	5162      	str	r2, [r4, r5]
 800b44a:	604b      	str	r3, [r1, #4]
 800b44c:	4638      	mov	r0, r7
 800b44e:	f104 060b 	add.w	r6, r4, #11
 800b452:	f000 f829 	bl	800b4a8 <__malloc_unlock>
 800b456:	f026 0607 	bic.w	r6, r6, #7
 800b45a:	1d23      	adds	r3, r4, #4
 800b45c:	1af2      	subs	r2, r6, r3
 800b45e:	d0ae      	beq.n	800b3be <_malloc_r+0x22>
 800b460:	1b9b      	subs	r3, r3, r6
 800b462:	50a3      	str	r3, [r4, r2]
 800b464:	e7ab      	b.n	800b3be <_malloc_r+0x22>
 800b466:	42a3      	cmp	r3, r4
 800b468:	6862      	ldr	r2, [r4, #4]
 800b46a:	d1dd      	bne.n	800b428 <_malloc_r+0x8c>
 800b46c:	f8c8 2000 	str.w	r2, [r8]
 800b470:	e7ec      	b.n	800b44c <_malloc_r+0xb0>
 800b472:	4623      	mov	r3, r4
 800b474:	6864      	ldr	r4, [r4, #4]
 800b476:	e7ac      	b.n	800b3d2 <_malloc_r+0x36>
 800b478:	4634      	mov	r4, r6
 800b47a:	6876      	ldr	r6, [r6, #4]
 800b47c:	e7b4      	b.n	800b3e8 <_malloc_r+0x4c>
 800b47e:	4613      	mov	r3, r2
 800b480:	e7cc      	b.n	800b41c <_malloc_r+0x80>
 800b482:	230c      	movs	r3, #12
 800b484:	603b      	str	r3, [r7, #0]
 800b486:	4638      	mov	r0, r7
 800b488:	f000 f80e 	bl	800b4a8 <__malloc_unlock>
 800b48c:	e797      	b.n	800b3be <_malloc_r+0x22>
 800b48e:	6025      	str	r5, [r4, #0]
 800b490:	e7dc      	b.n	800b44c <_malloc_r+0xb0>
 800b492:	605b      	str	r3, [r3, #4]
 800b494:	deff      	udf	#255	; 0xff
 800b496:	bf00      	nop
 800b498:	20006a90 	.word	0x20006a90

0800b49c <__malloc_lock>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__malloc_lock+0x8>)
 800b49e:	f7f8 be99 	b.w	80041d4 <__retarget_lock_acquire_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	20000e78 	.word	0x20000e78

0800b4a8 <__malloc_unlock>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__malloc_unlock+0x8>)
 800b4aa:	f7f8 bea7 	b.w	80041fc <__retarget_lock_release_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20000e78 	.word	0x20000e78

0800b4b4 <__utoa>:
 800b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b6:	4c1f      	ldr	r4, [pc, #124]	; (800b534 <__utoa+0x80>)
 800b4b8:	b08b      	sub	sp, #44	; 0x2c
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	466e      	mov	r6, sp
 800b4c0:	f104 0c20 	add.w	ip, r4, #32
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	6861      	ldr	r1, [r4, #4]
 800b4c8:	4637      	mov	r7, r6
 800b4ca:	c703      	stmia	r7!, {r0, r1}
 800b4cc:	3408      	adds	r4, #8
 800b4ce:	4564      	cmp	r4, ip
 800b4d0:	463e      	mov	r6, r7
 800b4d2:	d1f7      	bne.n	800b4c4 <__utoa+0x10>
 800b4d4:	7921      	ldrb	r1, [r4, #4]
 800b4d6:	7139      	strb	r1, [r7, #4]
 800b4d8:	1e91      	subs	r1, r2, #2
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	6038      	str	r0, [r7, #0]
 800b4de:	2922      	cmp	r1, #34	; 0x22
 800b4e0:	f04f 0100 	mov.w	r1, #0
 800b4e4:	d904      	bls.n	800b4f0 <__utoa+0x3c>
 800b4e6:	7019      	strb	r1, [r3, #0]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	b00b      	add	sp, #44	; 0x2c
 800b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f0:	1e58      	subs	r0, r3, #1
 800b4f2:	4684      	mov	ip, r0
 800b4f4:	fbb5 f7f2 	udiv	r7, r5, r2
 800b4f8:	fb02 5617 	mls	r6, r2, r7, r5
 800b4fc:	3628      	adds	r6, #40	; 0x28
 800b4fe:	446e      	add	r6, sp
 800b500:	460c      	mov	r4, r1
 800b502:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b506:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b50a:	462e      	mov	r6, r5
 800b50c:	42b2      	cmp	r2, r6
 800b50e:	f101 0101 	add.w	r1, r1, #1
 800b512:	463d      	mov	r5, r7
 800b514:	d9ee      	bls.n	800b4f4 <__utoa+0x40>
 800b516:	2200      	movs	r2, #0
 800b518:	545a      	strb	r2, [r3, r1]
 800b51a:	1919      	adds	r1, r3, r4
 800b51c:	1aa5      	subs	r5, r4, r2
 800b51e:	42aa      	cmp	r2, r5
 800b520:	dae3      	bge.n	800b4ea <__utoa+0x36>
 800b522:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b526:	780e      	ldrb	r6, [r1, #0]
 800b528:	7006      	strb	r6, [r0, #0]
 800b52a:	3201      	adds	r2, #1
 800b52c:	f801 5901 	strb.w	r5, [r1], #-1
 800b530:	e7f4      	b.n	800b51c <__utoa+0x68>
 800b532:	bf00      	nop
 800b534:	0800d190 	.word	0x0800d190

0800b538 <std>:
 800b538:	2300      	movs	r3, #0
 800b53a:	b510      	push	{r4, lr}
 800b53c:	4604      	mov	r4, r0
 800b53e:	e9c0 3300 	strd	r3, r3, [r0]
 800b542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b546:	6083      	str	r3, [r0, #8]
 800b548:	8181      	strh	r1, [r0, #12]
 800b54a:	6643      	str	r3, [r0, #100]	; 0x64
 800b54c:	81c2      	strh	r2, [r0, #14]
 800b54e:	6183      	str	r3, [r0, #24]
 800b550:	4619      	mov	r1, r3
 800b552:	2208      	movs	r2, #8
 800b554:	305c      	adds	r0, #92	; 0x5c
 800b556:	f000 f95a 	bl	800b80e <memset>
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <std+0x58>)
 800b55c:	6263      	str	r3, [r4, #36]	; 0x24
 800b55e:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <std+0x5c>)
 800b560:	62a3      	str	r3, [r4, #40]	; 0x28
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <std+0x60>)
 800b564:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <std+0x64>)
 800b568:	6323      	str	r3, [r4, #48]	; 0x30
 800b56a:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <std+0x68>)
 800b56c:	6224      	str	r4, [r4, #32]
 800b56e:	429c      	cmp	r4, r3
 800b570:	d006      	beq.n	800b580 <std+0x48>
 800b572:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b576:	4294      	cmp	r4, r2
 800b578:	d002      	beq.n	800b580 <std+0x48>
 800b57a:	33d0      	adds	r3, #208	; 0xd0
 800b57c:	429c      	cmp	r4, r3
 800b57e:	d105      	bne.n	800b58c <std+0x54>
 800b580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b588:	f7f8 bdfe 	b.w	8004188 <__retarget_lock_init_recursive>
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	bf00      	nop
 800b590:	0800b789 	.word	0x0800b789
 800b594:	0800b7ab 	.word	0x0800b7ab
 800b598:	0800b7e3 	.word	0x0800b7e3
 800b59c:	0800b807 	.word	0x0800b807
 800b5a0:	20006a98 	.word	0x20006a98

0800b5a4 <stdio_exit_handler>:
 800b5a4:	4a02      	ldr	r2, [pc, #8]	; (800b5b0 <stdio_exit_handler+0xc>)
 800b5a6:	4903      	ldr	r1, [pc, #12]	; (800b5b4 <stdio_exit_handler+0x10>)
 800b5a8:	4803      	ldr	r0, [pc, #12]	; (800b5b8 <stdio_exit_handler+0x14>)
 800b5aa:	f000 b87b 	b.w	800b6a4 <_fwalk_sglue>
 800b5ae:	bf00      	nop
 800b5b0:	200000f4 	.word	0x200000f4
 800b5b4:	0800c419 	.word	0x0800c419
 800b5b8:	20000100 	.word	0x20000100

0800b5bc <cleanup_stdio>:
 800b5bc:	6841      	ldr	r1, [r0, #4]
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <cleanup_stdio+0x34>)
 800b5c0:	4299      	cmp	r1, r3
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	d001      	beq.n	800b5cc <cleanup_stdio+0x10>
 800b5c8:	f000 ff26 	bl	800c418 <_fflush_r>
 800b5cc:	68a1      	ldr	r1, [r4, #8]
 800b5ce:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <cleanup_stdio+0x38>)
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	d002      	beq.n	800b5da <cleanup_stdio+0x1e>
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f000 ff1f 	bl	800c418 <_fflush_r>
 800b5da:	68e1      	ldr	r1, [r4, #12]
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <cleanup_stdio+0x3c>)
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	d004      	beq.n	800b5ec <cleanup_stdio+0x30>
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e8:	f000 bf16 	b.w	800c418 <_fflush_r>
 800b5ec:	bd10      	pop	{r4, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20006a98 	.word	0x20006a98
 800b5f4:	20006b00 	.word	0x20006b00
 800b5f8:	20006b68 	.word	0x20006b68

0800b5fc <global_stdio_init.part.0>:
 800b5fc:	b510      	push	{r4, lr}
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <global_stdio_init.part.0+0x30>)
 800b600:	4c0b      	ldr	r4, [pc, #44]	; (800b630 <global_stdio_init.part.0+0x34>)
 800b602:	4a0c      	ldr	r2, [pc, #48]	; (800b634 <global_stdio_init.part.0+0x38>)
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	4620      	mov	r0, r4
 800b608:	2200      	movs	r2, #0
 800b60a:	2104      	movs	r1, #4
 800b60c:	f7ff ff94 	bl	800b538 <std>
 800b610:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b614:	2201      	movs	r2, #1
 800b616:	2109      	movs	r1, #9
 800b618:	f7ff ff8e 	bl	800b538 <std>
 800b61c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b620:	2202      	movs	r2, #2
 800b622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b626:	2112      	movs	r1, #18
 800b628:	f7ff bf86 	b.w	800b538 <std>
 800b62c:	20006bd0 	.word	0x20006bd0
 800b630:	20006a98 	.word	0x20006a98
 800b634:	0800b5a5 	.word	0x0800b5a5

0800b638 <__sfp_lock_acquire>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__sfp_lock_acquire+0x8>)
 800b63a:	f7f8 bdcb 	b.w	80041d4 <__retarget_lock_acquire_recursive>
 800b63e:	bf00      	nop
 800b640:	20000e6c 	.word	0x20000e6c

0800b644 <__sfp_lock_release>:
 800b644:	4801      	ldr	r0, [pc, #4]	; (800b64c <__sfp_lock_release+0x8>)
 800b646:	f7f8 bdd9 	b.w	80041fc <__retarget_lock_release_recursive>
 800b64a:	bf00      	nop
 800b64c:	20000e6c 	.word	0x20000e6c

0800b650 <__sinit>:
 800b650:	b510      	push	{r4, lr}
 800b652:	4604      	mov	r4, r0
 800b654:	f7ff fff0 	bl	800b638 <__sfp_lock_acquire>
 800b658:	6a23      	ldr	r3, [r4, #32]
 800b65a:	b11b      	cbz	r3, 800b664 <__sinit+0x14>
 800b65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b660:	f7ff bff0 	b.w	800b644 <__sfp_lock_release>
 800b664:	4b04      	ldr	r3, [pc, #16]	; (800b678 <__sinit+0x28>)
 800b666:	6223      	str	r3, [r4, #32]
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <__sinit+0x2c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1f5      	bne.n	800b65c <__sinit+0xc>
 800b670:	f7ff ffc4 	bl	800b5fc <global_stdio_init.part.0>
 800b674:	e7f2      	b.n	800b65c <__sinit+0xc>
 800b676:	bf00      	nop
 800b678:	0800b5bd 	.word	0x0800b5bd
 800b67c:	20006bd0 	.word	0x20006bd0

0800b680 <fiprintf>:
 800b680:	b40e      	push	{r1, r2, r3}
 800b682:	b503      	push	{r0, r1, lr}
 800b684:	4601      	mov	r1, r0
 800b686:	ab03      	add	r3, sp, #12
 800b688:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <fiprintf+0x20>)
 800b68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68e:	6800      	ldr	r0, [r0, #0]
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f000 fb91 	bl	800bdb8 <_vfiprintf_r>
 800b696:	b002      	add	sp, #8
 800b698:	f85d eb04 	ldr.w	lr, [sp], #4
 800b69c:	b003      	add	sp, #12
 800b69e:	4770      	bx	lr
 800b6a0:	2000014c 	.word	0x2000014c

0800b6a4 <_fwalk_sglue>:
 800b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	4688      	mov	r8, r1
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6b8:	d505      	bpl.n	800b6c6 <_fwalk_sglue+0x22>
 800b6ba:	6824      	ldr	r4, [r4, #0]
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	d1f7      	bne.n	800b6b0 <_fwalk_sglue+0xc>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	89ab      	ldrh	r3, [r5, #12]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d907      	bls.n	800b6dc <_fwalk_sglue+0x38>
 800b6cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	d003      	beq.n	800b6dc <_fwalk_sglue+0x38>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c0      	blx	r8
 800b6da:	4306      	orrs	r6, r0
 800b6dc:	3568      	adds	r5, #104	; 0x68
 800b6de:	e7e9      	b.n	800b6b4 <_fwalk_sglue+0x10>

0800b6e0 <sniprintf>:
 800b6e0:	b40c      	push	{r2, r3}
 800b6e2:	b530      	push	{r4, r5, lr}
 800b6e4:	4b17      	ldr	r3, [pc, #92]	; (800b744 <sniprintf+0x64>)
 800b6e6:	1e0c      	subs	r4, r1, #0
 800b6e8:	681d      	ldr	r5, [r3, #0]
 800b6ea:	b09d      	sub	sp, #116	; 0x74
 800b6ec:	da08      	bge.n	800b700 <sniprintf+0x20>
 800b6ee:	238b      	movs	r3, #139	; 0x8b
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f6:	b01d      	add	sp, #116	; 0x74
 800b6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6fc:	b002      	add	sp, #8
 800b6fe:	4770      	bx	lr
 800b700:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b704:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b708:	bf14      	ite	ne
 800b70a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b70e:	4623      	moveq	r3, r4
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	9307      	str	r3, [sp, #28]
 800b714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b718:	9002      	str	r0, [sp, #8]
 800b71a:	9006      	str	r0, [sp, #24]
 800b71c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b722:	ab21      	add	r3, sp, #132	; 0x84
 800b724:	a902      	add	r1, sp, #8
 800b726:	4628      	mov	r0, r5
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	f000 fa1d 	bl	800bb68 <_svfiprintf_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	bfbc      	itt	lt
 800b732:	238b      	movlt	r3, #139	; 0x8b
 800b734:	602b      	strlt	r3, [r5, #0]
 800b736:	2c00      	cmp	r4, #0
 800b738:	d0dd      	beq.n	800b6f6 <sniprintf+0x16>
 800b73a:	9b02      	ldr	r3, [sp, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e7d9      	b.n	800b6f6 <sniprintf+0x16>
 800b742:	bf00      	nop
 800b744:	2000014c 	.word	0x2000014c

0800b748 <siprintf>:
 800b748:	b40e      	push	{r1, r2, r3}
 800b74a:	b500      	push	{lr}
 800b74c:	b09c      	sub	sp, #112	; 0x70
 800b74e:	ab1d      	add	r3, sp, #116	; 0x74
 800b750:	9002      	str	r0, [sp, #8]
 800b752:	9006      	str	r0, [sp, #24]
 800b754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b758:	4809      	ldr	r0, [pc, #36]	; (800b780 <siprintf+0x38>)
 800b75a:	9107      	str	r1, [sp, #28]
 800b75c:	9104      	str	r1, [sp, #16]
 800b75e:	4909      	ldr	r1, [pc, #36]	; (800b784 <siprintf+0x3c>)
 800b760:	f853 2b04 	ldr.w	r2, [r3], #4
 800b764:	9105      	str	r1, [sp, #20]
 800b766:	6800      	ldr	r0, [r0, #0]
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	a902      	add	r1, sp, #8
 800b76c:	f000 f9fc 	bl	800bb68 <_svfiprintf_r>
 800b770:	9b02      	ldr	r3, [sp, #8]
 800b772:	2200      	movs	r2, #0
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	b01c      	add	sp, #112	; 0x70
 800b778:	f85d eb04 	ldr.w	lr, [sp], #4
 800b77c:	b003      	add	sp, #12
 800b77e:	4770      	bx	lr
 800b780:	2000014c 	.word	0x2000014c
 800b784:	ffff0208 	.word	0xffff0208

0800b788 <__sread>:
 800b788:	b510      	push	{r4, lr}
 800b78a:	460c      	mov	r4, r1
 800b78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b790:	f000 f8d0 	bl	800b934 <_read_r>
 800b794:	2800      	cmp	r0, #0
 800b796:	bfab      	itete	ge
 800b798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b79a:	89a3      	ldrhlt	r3, [r4, #12]
 800b79c:	181b      	addge	r3, r3, r0
 800b79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7a2:	bfac      	ite	ge
 800b7a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7a6:	81a3      	strhlt	r3, [r4, #12]
 800b7a8:	bd10      	pop	{r4, pc}

0800b7aa <__swrite>:
 800b7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ae:	461f      	mov	r7, r3
 800b7b0:	898b      	ldrh	r3, [r1, #12]
 800b7b2:	05db      	lsls	r3, r3, #23
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	d505      	bpl.n	800b7c8 <__swrite+0x1e>
 800b7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f000 f8a4 	bl	800b910 <_lseek_r>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	4628      	mov	r0, r5
 800b7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7de:	f000 b8cb 	b.w	800b978 <_write_r>

0800b7e2 <__sseek>:
 800b7e2:	b510      	push	{r4, lr}
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ea:	f000 f891 	bl	800b910 <_lseek_r>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	bf15      	itete	ne
 800b7f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7fe:	81a3      	strheq	r3, [r4, #12]
 800b800:	bf18      	it	ne
 800b802:	81a3      	strhne	r3, [r4, #12]
 800b804:	bd10      	pop	{r4, pc}

0800b806 <__sclose>:
 800b806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80a:	f000 b81b 	b.w	800b844 <_close_r>

0800b80e <memset>:
 800b80e:	4402      	add	r2, r0
 800b810:	4603      	mov	r3, r0
 800b812:	4293      	cmp	r3, r2
 800b814:	d100      	bne.n	800b818 <memset+0xa>
 800b816:	4770      	bx	lr
 800b818:	f803 1b01 	strb.w	r1, [r3], #1
 800b81c:	e7f9      	b.n	800b812 <memset+0x4>

0800b81e <strncpy>:
 800b81e:	b510      	push	{r4, lr}
 800b820:	3901      	subs	r1, #1
 800b822:	4603      	mov	r3, r0
 800b824:	b132      	cbz	r2, 800b834 <strncpy+0x16>
 800b826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b82a:	f803 4b01 	strb.w	r4, [r3], #1
 800b82e:	3a01      	subs	r2, #1
 800b830:	2c00      	cmp	r4, #0
 800b832:	d1f7      	bne.n	800b824 <strncpy+0x6>
 800b834:	441a      	add	r2, r3
 800b836:	2100      	movs	r1, #0
 800b838:	4293      	cmp	r3, r2
 800b83a:	d100      	bne.n	800b83e <strncpy+0x20>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	f803 1b01 	strb.w	r1, [r3], #1
 800b842:	e7f9      	b.n	800b838 <strncpy+0x1a>

0800b844 <_close_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d06      	ldr	r5, [pc, #24]	; (800b860 <_close_r+0x1c>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	602b      	str	r3, [r5, #0]
 800b850:	f7f8 f8ab 	bl	80039aa <_close>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_close_r+0x1a>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_close_r+0x1a>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	20006bd4 	.word	0x20006bd4

0800b864 <_reclaim_reent>:
 800b864:	4b29      	ldr	r3, [pc, #164]	; (800b90c <_reclaim_reent+0xa8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4283      	cmp	r3, r0
 800b86a:	b570      	push	{r4, r5, r6, lr}
 800b86c:	4604      	mov	r4, r0
 800b86e:	d04b      	beq.n	800b908 <_reclaim_reent+0xa4>
 800b870:	69c3      	ldr	r3, [r0, #28]
 800b872:	b143      	cbz	r3, 800b886 <_reclaim_reent+0x22>
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d144      	bne.n	800b904 <_reclaim_reent+0xa0>
 800b87a:	69e3      	ldr	r3, [r4, #28]
 800b87c:	6819      	ldr	r1, [r3, #0]
 800b87e:	b111      	cbz	r1, 800b886 <_reclaim_reent+0x22>
 800b880:	4620      	mov	r0, r4
 800b882:	f000 f8cb 	bl	800ba1c <_free_r>
 800b886:	6961      	ldr	r1, [r4, #20]
 800b888:	b111      	cbz	r1, 800b890 <_reclaim_reent+0x2c>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f8c6 	bl	800ba1c <_free_r>
 800b890:	69e1      	ldr	r1, [r4, #28]
 800b892:	b111      	cbz	r1, 800b89a <_reclaim_reent+0x36>
 800b894:	4620      	mov	r0, r4
 800b896:	f000 f8c1 	bl	800ba1c <_free_r>
 800b89a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b89c:	b111      	cbz	r1, 800b8a4 <_reclaim_reent+0x40>
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 f8bc 	bl	800ba1c <_free_r>
 800b8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8a6:	b111      	cbz	r1, 800b8ae <_reclaim_reent+0x4a>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 f8b7 	bl	800ba1c <_free_r>
 800b8ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8b0:	b111      	cbz	r1, 800b8b8 <_reclaim_reent+0x54>
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 f8b2 	bl	800ba1c <_free_r>
 800b8b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8ba:	b111      	cbz	r1, 800b8c2 <_reclaim_reent+0x5e>
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 f8ad 	bl	800ba1c <_free_r>
 800b8c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b8c4:	b111      	cbz	r1, 800b8cc <_reclaim_reent+0x68>
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f8a8 	bl	800ba1c <_free_r>
 800b8cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b8ce:	b111      	cbz	r1, 800b8d6 <_reclaim_reent+0x72>
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 f8a3 	bl	800ba1c <_free_r>
 800b8d6:	6a23      	ldr	r3, [r4, #32]
 800b8d8:	b1b3      	cbz	r3, 800b908 <_reclaim_reent+0xa4>
 800b8da:	4620      	mov	r0, r4
 800b8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8e0:	4718      	bx	r3
 800b8e2:	5949      	ldr	r1, [r1, r5]
 800b8e4:	b941      	cbnz	r1, 800b8f8 <_reclaim_reent+0x94>
 800b8e6:	3504      	adds	r5, #4
 800b8e8:	69e3      	ldr	r3, [r4, #28]
 800b8ea:	2d80      	cmp	r5, #128	; 0x80
 800b8ec:	68d9      	ldr	r1, [r3, #12]
 800b8ee:	d1f8      	bne.n	800b8e2 <_reclaim_reent+0x7e>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 f893 	bl	800ba1c <_free_r>
 800b8f6:	e7c0      	b.n	800b87a <_reclaim_reent+0x16>
 800b8f8:	680e      	ldr	r6, [r1, #0]
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 f88e 	bl	800ba1c <_free_r>
 800b900:	4631      	mov	r1, r6
 800b902:	e7ef      	b.n	800b8e4 <_reclaim_reent+0x80>
 800b904:	2500      	movs	r5, #0
 800b906:	e7ef      	b.n	800b8e8 <_reclaim_reent+0x84>
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	bf00      	nop
 800b90c:	2000014c 	.word	0x2000014c

0800b910 <_lseek_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d07      	ldr	r5, [pc, #28]	; (800b930 <_lseek_r+0x20>)
 800b914:	4604      	mov	r4, r0
 800b916:	4608      	mov	r0, r1
 800b918:	4611      	mov	r1, r2
 800b91a:	2200      	movs	r2, #0
 800b91c:	602a      	str	r2, [r5, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	f7f8 f86a 	bl	80039f8 <_lseek>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d102      	bne.n	800b92e <_lseek_r+0x1e>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	b103      	cbz	r3, 800b92e <_lseek_r+0x1e>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}
 800b930:	20006bd4 	.word	0x20006bd4

0800b934 <_read_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	; (800b954 <_read_r+0x20>)
 800b938:	4604      	mov	r4, r0
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f7f7 fff8 	bl	8003938 <_read>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_read_r+0x1e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_read_r+0x1e>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	20006bd4 	.word	0x20006bd4

0800b958 <_sbrk_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	; (800b974 <_sbrk_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f8 f856 	bl	8003a14 <_sbrk>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_sbrk_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_sbrk_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	20006bd4 	.word	0x20006bd4

0800b978 <_write_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d07      	ldr	r5, [pc, #28]	; (800b998 <_write_r+0x20>)
 800b97c:	4604      	mov	r4, r0
 800b97e:	4608      	mov	r0, r1
 800b980:	4611      	mov	r1, r2
 800b982:	2200      	movs	r2, #0
 800b984:	602a      	str	r2, [r5, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	f7f7 fff3 	bl	8003972 <_write>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_write_r+0x1e>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_write_r+0x1e>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	20006bd4 	.word	0x20006bd4

0800b99c <__errno>:
 800b99c:	4b01      	ldr	r3, [pc, #4]	; (800b9a4 <__errno+0x8>)
 800b99e:	6818      	ldr	r0, [r3, #0]
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	2000014c 	.word	0x2000014c

0800b9a8 <__libc_init_array>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	4d0d      	ldr	r5, [pc, #52]	; (800b9e0 <__libc_init_array+0x38>)
 800b9ac:	4c0d      	ldr	r4, [pc, #52]	; (800b9e4 <__libc_init_array+0x3c>)
 800b9ae:	1b64      	subs	r4, r4, r5
 800b9b0:	10a4      	asrs	r4, r4, #2
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	42a6      	cmp	r6, r4
 800b9b6:	d109      	bne.n	800b9cc <__libc_init_array+0x24>
 800b9b8:	4d0b      	ldr	r5, [pc, #44]	; (800b9e8 <__libc_init_array+0x40>)
 800b9ba:	4c0c      	ldr	r4, [pc, #48]	; (800b9ec <__libc_init_array+0x44>)
 800b9bc:	f000 ff04 	bl	800c7c8 <_init>
 800b9c0:	1b64      	subs	r4, r4, r5
 800b9c2:	10a4      	asrs	r4, r4, #2
 800b9c4:	2600      	movs	r6, #0
 800b9c6:	42a6      	cmp	r6, r4
 800b9c8:	d105      	bne.n	800b9d6 <__libc_init_array+0x2e>
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d0:	4798      	blx	r3
 800b9d2:	3601      	adds	r6, #1
 800b9d4:	e7ee      	b.n	800b9b4 <__libc_init_array+0xc>
 800b9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9da:	4798      	blx	r3
 800b9dc:	3601      	adds	r6, #1
 800b9de:	e7f2      	b.n	800b9c6 <__libc_init_array+0x1e>
 800b9e0:	0800d1f0 	.word	0x0800d1f0
 800b9e4:	0800d1f0 	.word	0x0800d1f0
 800b9e8:	0800d1f0 	.word	0x0800d1f0
 800b9ec:	0800d1f4 	.word	0x0800d1f4

0800b9f0 <memcpy>:
 800b9f0:	440a      	add	r2, r1
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9f8:	d100      	bne.n	800b9fc <memcpy+0xc>
 800b9fa:	4770      	bx	lr
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d1f9      	bne.n	800b9fe <memcpy+0xe>
 800ba0a:	bd10      	pop	{r4, pc}

0800ba0c <abort>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	2006      	movs	r0, #6
 800ba10:	f000 fe02 	bl	800c618 <raise>
 800ba14:	2001      	movs	r0, #1
 800ba16:	f7f7 ff85 	bl	8003924 <_exit>
	...

0800ba1c <_free_r>:
 800ba1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d044      	beq.n	800baac <_free_r+0x90>
 800ba22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba26:	9001      	str	r0, [sp, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba2e:	bfb8      	it	lt
 800ba30:	18e4      	addlt	r4, r4, r3
 800ba32:	f7ff fd33 	bl	800b49c <__malloc_lock>
 800ba36:	4a1e      	ldr	r2, [pc, #120]	; (800bab0 <_free_r+0x94>)
 800ba38:	9801      	ldr	r0, [sp, #4]
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	b933      	cbnz	r3, 800ba4c <_free_r+0x30>
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	6014      	str	r4, [r2, #0]
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba48:	f7ff bd2e 	b.w	800b4a8 <__malloc_unlock>
 800ba4c:	42a3      	cmp	r3, r4
 800ba4e:	d908      	bls.n	800ba62 <_free_r+0x46>
 800ba50:	6825      	ldr	r5, [r4, #0]
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf01      	itttt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	1949      	addeq	r1, r1, r5
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	e7ed      	b.n	800ba3e <_free_r+0x22>
 800ba62:	461a      	mov	r2, r3
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	b10b      	cbz	r3, 800ba6c <_free_r+0x50>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d9fa      	bls.n	800ba62 <_free_r+0x46>
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	1855      	adds	r5, r2, r1
 800ba70:	42a5      	cmp	r5, r4
 800ba72:	d10b      	bne.n	800ba8c <_free_r+0x70>
 800ba74:	6824      	ldr	r4, [r4, #0]
 800ba76:	4421      	add	r1, r4
 800ba78:	1854      	adds	r4, r2, r1
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	d1e0      	bne.n	800ba42 <_free_r+0x26>
 800ba80:	681c      	ldr	r4, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	6053      	str	r3, [r2, #4]
 800ba86:	440c      	add	r4, r1
 800ba88:	6014      	str	r4, [r2, #0]
 800ba8a:	e7da      	b.n	800ba42 <_free_r+0x26>
 800ba8c:	d902      	bls.n	800ba94 <_free_r+0x78>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	e7d6      	b.n	800ba42 <_free_r+0x26>
 800ba94:	6825      	ldr	r5, [r4, #0]
 800ba96:	1961      	adds	r1, r4, r5
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf04      	itt	eq
 800ba9c:	6819      	ldreq	r1, [r3, #0]
 800ba9e:	685b      	ldreq	r3, [r3, #4]
 800baa0:	6063      	str	r3, [r4, #4]
 800baa2:	bf04      	itt	eq
 800baa4:	1949      	addeq	r1, r1, r5
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	6054      	str	r4, [r2, #4]
 800baaa:	e7ca      	b.n	800ba42 <_free_r+0x26>
 800baac:	b003      	add	sp, #12
 800baae:	bd30      	pop	{r4, r5, pc}
 800bab0:	20006a90 	.word	0x20006a90

0800bab4 <__ssputs_r>:
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	688e      	ldr	r6, [r1, #8]
 800baba:	461f      	mov	r7, r3
 800babc:	42be      	cmp	r6, r7
 800babe:	680b      	ldr	r3, [r1, #0]
 800bac0:	4682      	mov	sl, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	4690      	mov	r8, r2
 800bac6:	d82c      	bhi.n	800bb22 <__ssputs_r+0x6e>
 800bac8:	898a      	ldrh	r2, [r1, #12]
 800baca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bace:	d026      	beq.n	800bb1e <__ssputs_r+0x6a>
 800bad0:	6965      	ldr	r5, [r4, #20]
 800bad2:	6909      	ldr	r1, [r1, #16]
 800bad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bad8:	eba3 0901 	sub.w	r9, r3, r1
 800badc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae0:	1c7b      	adds	r3, r7, #1
 800bae2:	444b      	add	r3, r9
 800bae4:	106d      	asrs	r5, r5, #1
 800bae6:	429d      	cmp	r5, r3
 800bae8:	bf38      	it	cc
 800baea:	461d      	movcc	r5, r3
 800baec:	0553      	lsls	r3, r2, #21
 800baee:	d527      	bpl.n	800bb40 <__ssputs_r+0x8c>
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7ff fc53 	bl	800b39c <_malloc_r>
 800baf6:	4606      	mov	r6, r0
 800baf8:	b360      	cbz	r0, 800bb54 <__ssputs_r+0xa0>
 800bafa:	6921      	ldr	r1, [r4, #16]
 800bafc:	464a      	mov	r2, r9
 800bafe:	f7ff ff77 	bl	800b9f0 <memcpy>
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	6126      	str	r6, [r4, #16]
 800bb10:	6165      	str	r5, [r4, #20]
 800bb12:	444e      	add	r6, r9
 800bb14:	eba5 0509 	sub.w	r5, r5, r9
 800bb18:	6026      	str	r6, [r4, #0]
 800bb1a:	60a5      	str	r5, [r4, #8]
 800bb1c:	463e      	mov	r6, r7
 800bb1e:	42be      	cmp	r6, r7
 800bb20:	d900      	bls.n	800bb24 <__ssputs_r+0x70>
 800bb22:	463e      	mov	r6, r7
 800bb24:	6820      	ldr	r0, [r4, #0]
 800bb26:	4632      	mov	r2, r6
 800bb28:	4641      	mov	r1, r8
 800bb2a:	f000 fd33 	bl	800c594 <memmove>
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	1b9b      	subs	r3, r3, r6
 800bb32:	60a3      	str	r3, [r4, #8]
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	4433      	add	r3, r6
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb40:	462a      	mov	r2, r5
 800bb42:	f000 fd85 	bl	800c650 <_realloc_r>
 800bb46:	4606      	mov	r6, r0
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d1e0      	bne.n	800bb0e <__ssputs_r+0x5a>
 800bb4c:	6921      	ldr	r1, [r4, #16]
 800bb4e:	4650      	mov	r0, sl
 800bb50:	f7ff ff64 	bl	800ba1c <_free_r>
 800bb54:	230c      	movs	r3, #12
 800bb56:	f8ca 3000 	str.w	r3, [sl]
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	f04f 30ff 	mov.w	r0, #4294967295
 800bb66:	e7e9      	b.n	800bb3c <__ssputs_r+0x88>

0800bb68 <_svfiprintf_r>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	4698      	mov	r8, r3
 800bb6e:	898b      	ldrh	r3, [r1, #12]
 800bb70:	061b      	lsls	r3, r3, #24
 800bb72:	b09d      	sub	sp, #116	; 0x74
 800bb74:	4607      	mov	r7, r0
 800bb76:	460d      	mov	r5, r1
 800bb78:	4614      	mov	r4, r2
 800bb7a:	d50e      	bpl.n	800bb9a <_svfiprintf_r+0x32>
 800bb7c:	690b      	ldr	r3, [r1, #16]
 800bb7e:	b963      	cbnz	r3, 800bb9a <_svfiprintf_r+0x32>
 800bb80:	2140      	movs	r1, #64	; 0x40
 800bb82:	f7ff fc0b 	bl	800b39c <_malloc_r>
 800bb86:	6028      	str	r0, [r5, #0]
 800bb88:	6128      	str	r0, [r5, #16]
 800bb8a:	b920      	cbnz	r0, 800bb96 <_svfiprintf_r+0x2e>
 800bb8c:	230c      	movs	r3, #12
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	f04f 30ff 	mov.w	r0, #4294967295
 800bb94:	e0d0      	b.n	800bd38 <_svfiprintf_r+0x1d0>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	616b      	str	r3, [r5, #20]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9e:	2320      	movs	r3, #32
 800bba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bba8:	2330      	movs	r3, #48	; 0x30
 800bbaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd50 <_svfiprintf_r+0x1e8>
 800bbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbb2:	f04f 0901 	mov.w	r9, #1
 800bbb6:	4623      	mov	r3, r4
 800bbb8:	469a      	mov	sl, r3
 800bbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbbe:	b10a      	cbz	r2, 800bbc4 <_svfiprintf_r+0x5c>
 800bbc0:	2a25      	cmp	r2, #37	; 0x25
 800bbc2:	d1f9      	bne.n	800bbb8 <_svfiprintf_r+0x50>
 800bbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbc8:	d00b      	beq.n	800bbe2 <_svfiprintf_r+0x7a>
 800bbca:	465b      	mov	r3, fp
 800bbcc:	4622      	mov	r2, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f7ff ff6f 	bl	800bab4 <__ssputs_r>
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	f000 80a9 	beq.w	800bd2e <_svfiprintf_r+0x1c6>
 800bbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbde:	445a      	add	r2, fp
 800bbe0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80a1 	beq.w	800bd2e <_svfiprintf_r+0x1c6>
 800bbec:	2300      	movs	r3, #0
 800bbee:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbf6:	f10a 0a01 	add.w	sl, sl, #1
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	9307      	str	r3, [sp, #28]
 800bbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc02:	931a      	str	r3, [sp, #104]	; 0x68
 800bc04:	4654      	mov	r4, sl
 800bc06:	2205      	movs	r2, #5
 800bc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0c:	4850      	ldr	r0, [pc, #320]	; (800bd50 <_svfiprintf_r+0x1e8>)
 800bc0e:	f7f4 fb17 	bl	8000240 <memchr>
 800bc12:	9a04      	ldr	r2, [sp, #16]
 800bc14:	b9d8      	cbnz	r0, 800bc4e <_svfiprintf_r+0xe6>
 800bc16:	06d0      	lsls	r0, r2, #27
 800bc18:	bf44      	itt	mi
 800bc1a:	2320      	movmi	r3, #32
 800bc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc20:	0711      	lsls	r1, r2, #28
 800bc22:	bf44      	itt	mi
 800bc24:	232b      	movmi	r3, #43	; 0x2b
 800bc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc2e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc30:	d015      	beq.n	800bc5e <_svfiprintf_r+0xf6>
 800bc32:	9a07      	ldr	r2, [sp, #28]
 800bc34:	4654      	mov	r4, sl
 800bc36:	2000      	movs	r0, #0
 800bc38:	f04f 0c0a 	mov.w	ip, #10
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc42:	3b30      	subs	r3, #48	; 0x30
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	d94d      	bls.n	800bce4 <_svfiprintf_r+0x17c>
 800bc48:	b1b0      	cbz	r0, 800bc78 <_svfiprintf_r+0x110>
 800bc4a:	9207      	str	r2, [sp, #28]
 800bc4c:	e014      	b.n	800bc78 <_svfiprintf_r+0x110>
 800bc4e:	eba0 0308 	sub.w	r3, r0, r8
 800bc52:	fa09 f303 	lsl.w	r3, r9, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	46a2      	mov	sl, r4
 800bc5c:	e7d2      	b.n	800bc04 <_svfiprintf_r+0x9c>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	1d19      	adds	r1, r3, #4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	9103      	str	r1, [sp, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	bfbb      	ittet	lt
 800bc6a:	425b      	neglt	r3, r3
 800bc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc70:	9307      	strge	r3, [sp, #28]
 800bc72:	9307      	strlt	r3, [sp, #28]
 800bc74:	bfb8      	it	lt
 800bc76:	9204      	strlt	r2, [sp, #16]
 800bc78:	7823      	ldrb	r3, [r4, #0]
 800bc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc7c:	d10c      	bne.n	800bc98 <_svfiprintf_r+0x130>
 800bc7e:	7863      	ldrb	r3, [r4, #1]
 800bc80:	2b2a      	cmp	r3, #42	; 0x2a
 800bc82:	d134      	bne.n	800bcee <_svfiprintf_r+0x186>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	9203      	str	r2, [sp, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bfb8      	it	lt
 800bc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc94:	3402      	adds	r4, #2
 800bc96:	9305      	str	r3, [sp, #20]
 800bc98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd60 <_svfiprintf_r+0x1f8>
 800bc9c:	7821      	ldrb	r1, [r4, #0]
 800bc9e:	2203      	movs	r2, #3
 800bca0:	4650      	mov	r0, sl
 800bca2:	f7f4 facd 	bl	8000240 <memchr>
 800bca6:	b138      	cbz	r0, 800bcb8 <_svfiprintf_r+0x150>
 800bca8:	9b04      	ldr	r3, [sp, #16]
 800bcaa:	eba0 000a 	sub.w	r0, r0, sl
 800bcae:	2240      	movs	r2, #64	; 0x40
 800bcb0:	4082      	lsls	r2, r0
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	3401      	adds	r4, #1
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbc:	4825      	ldr	r0, [pc, #148]	; (800bd54 <_svfiprintf_r+0x1ec>)
 800bcbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc2:	2206      	movs	r2, #6
 800bcc4:	f7f4 fabc 	bl	8000240 <memchr>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d038      	beq.n	800bd3e <_svfiprintf_r+0x1d6>
 800bccc:	4b22      	ldr	r3, [pc, #136]	; (800bd58 <_svfiprintf_r+0x1f0>)
 800bcce:	bb1b      	cbnz	r3, 800bd18 <_svfiprintf_r+0x1b0>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	3307      	adds	r3, #7
 800bcd4:	f023 0307 	bic.w	r3, r3, #7
 800bcd8:	3308      	adds	r3, #8
 800bcda:	9303      	str	r3, [sp, #12]
 800bcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcde:	4433      	add	r3, r6
 800bce0:	9309      	str	r3, [sp, #36]	; 0x24
 800bce2:	e768      	b.n	800bbb6 <_svfiprintf_r+0x4e>
 800bce4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bce8:	460c      	mov	r4, r1
 800bcea:	2001      	movs	r0, #1
 800bcec:	e7a6      	b.n	800bc3c <_svfiprintf_r+0xd4>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	3401      	adds	r4, #1
 800bcf2:	9305      	str	r3, [sp, #20]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f04f 0c0a 	mov.w	ip, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd00:	3a30      	subs	r2, #48	; 0x30
 800bd02:	2a09      	cmp	r2, #9
 800bd04:	d903      	bls.n	800bd0e <_svfiprintf_r+0x1a6>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0c6      	beq.n	800bc98 <_svfiprintf_r+0x130>
 800bd0a:	9105      	str	r1, [sp, #20]
 800bd0c:	e7c4      	b.n	800bc98 <_svfiprintf_r+0x130>
 800bd0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd12:	4604      	mov	r4, r0
 800bd14:	2301      	movs	r3, #1
 800bd16:	e7f0      	b.n	800bcfa <_svfiprintf_r+0x192>
 800bd18:	ab03      	add	r3, sp, #12
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	462a      	mov	r2, r5
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <_svfiprintf_r+0x1f4>)
 800bd20:	a904      	add	r1, sp, #16
 800bd22:	4638      	mov	r0, r7
 800bd24:	f3af 8000 	nop.w
 800bd28:	1c42      	adds	r2, r0, #1
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	d1d6      	bne.n	800bcdc <_svfiprintf_r+0x174>
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	065b      	lsls	r3, r3, #25
 800bd32:	f53f af2d 	bmi.w	800bb90 <_svfiprintf_r+0x28>
 800bd36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd38:	b01d      	add	sp, #116	; 0x74
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3e:	ab03      	add	r3, sp, #12
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	462a      	mov	r2, r5
 800bd44:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <_svfiprintf_r+0x1f4>)
 800bd46:	a904      	add	r1, sp, #16
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f000 f9bd 	bl	800c0c8 <_printf_i>
 800bd4e:	e7eb      	b.n	800bd28 <_svfiprintf_r+0x1c0>
 800bd50:	0800d1b5 	.word	0x0800d1b5
 800bd54:	0800d1bf 	.word	0x0800d1bf
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	0800bab5 	.word	0x0800bab5
 800bd60:	0800d1bb 	.word	0x0800d1bb

0800bd64 <__sfputc_r>:
 800bd64:	6893      	ldr	r3, [r2, #8]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	b410      	push	{r4}
 800bd6c:	6093      	str	r3, [r2, #8]
 800bd6e:	da08      	bge.n	800bd82 <__sfputc_r+0x1e>
 800bd70:	6994      	ldr	r4, [r2, #24]
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	db01      	blt.n	800bd7a <__sfputc_r+0x16>
 800bd76:	290a      	cmp	r1, #10
 800bd78:	d103      	bne.n	800bd82 <__sfputc_r+0x1e>
 800bd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd7e:	f000 bb73 	b.w	800c468 <__swbuf_r>
 800bd82:	6813      	ldr	r3, [r2, #0]
 800bd84:	1c58      	adds	r0, r3, #1
 800bd86:	6010      	str	r0, [r2, #0]
 800bd88:	7019      	strb	r1, [r3, #0]
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <__sfputs_r>:
 800bd92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd94:	4606      	mov	r6, r0
 800bd96:	460f      	mov	r7, r1
 800bd98:	4614      	mov	r4, r2
 800bd9a:	18d5      	adds	r5, r2, r3
 800bd9c:	42ac      	cmp	r4, r5
 800bd9e:	d101      	bne.n	800bda4 <__sfputs_r+0x12>
 800bda0:	2000      	movs	r0, #0
 800bda2:	e007      	b.n	800bdb4 <__sfputs_r+0x22>
 800bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda8:	463a      	mov	r2, r7
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ffda 	bl	800bd64 <__sfputc_r>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d1f3      	bne.n	800bd9c <__sfputs_r+0xa>
 800bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdb8 <_vfiprintf_r>:
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	460d      	mov	r5, r1
 800bdbe:	b09d      	sub	sp, #116	; 0x74
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	4698      	mov	r8, r3
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	b118      	cbz	r0, 800bdd0 <_vfiprintf_r+0x18>
 800bdc8:	6a03      	ldr	r3, [r0, #32]
 800bdca:	b90b      	cbnz	r3, 800bdd0 <_vfiprintf_r+0x18>
 800bdcc:	f7ff fc40 	bl	800b650 <__sinit>
 800bdd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd2:	07d9      	lsls	r1, r3, #31
 800bdd4:	d405      	bmi.n	800bde2 <_vfiprintf_r+0x2a>
 800bdd6:	89ab      	ldrh	r3, [r5, #12]
 800bdd8:	059a      	lsls	r2, r3, #22
 800bdda:	d402      	bmi.n	800bde2 <_vfiprintf_r+0x2a>
 800bddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdde:	f7f8 f9f9 	bl	80041d4 <__retarget_lock_acquire_recursive>
 800bde2:	89ab      	ldrh	r3, [r5, #12]
 800bde4:	071b      	lsls	r3, r3, #28
 800bde6:	d501      	bpl.n	800bdec <_vfiprintf_r+0x34>
 800bde8:	692b      	ldr	r3, [r5, #16]
 800bdea:	b99b      	cbnz	r3, 800be14 <_vfiprintf_r+0x5c>
 800bdec:	4629      	mov	r1, r5
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f000 fb78 	bl	800c4e4 <__swsetup_r>
 800bdf4:	b170      	cbz	r0, 800be14 <_vfiprintf_r+0x5c>
 800bdf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf8:	07dc      	lsls	r4, r3, #31
 800bdfa:	d504      	bpl.n	800be06 <_vfiprintf_r+0x4e>
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	b01d      	add	sp, #116	; 0x74
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be06:	89ab      	ldrh	r3, [r5, #12]
 800be08:	0598      	lsls	r0, r3, #22
 800be0a:	d4f7      	bmi.n	800bdfc <_vfiprintf_r+0x44>
 800be0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be0e:	f7f8 f9f5 	bl	80041fc <__retarget_lock_release_recursive>
 800be12:	e7f3      	b.n	800bdfc <_vfiprintf_r+0x44>
 800be14:	2300      	movs	r3, #0
 800be16:	9309      	str	r3, [sp, #36]	; 0x24
 800be18:	2320      	movs	r3, #32
 800be1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800be22:	2330      	movs	r3, #48	; 0x30
 800be24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bfd8 <_vfiprintf_r+0x220>
 800be28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be2c:	f04f 0901 	mov.w	r9, #1
 800be30:	4623      	mov	r3, r4
 800be32:	469a      	mov	sl, r3
 800be34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be38:	b10a      	cbz	r2, 800be3e <_vfiprintf_r+0x86>
 800be3a:	2a25      	cmp	r2, #37	; 0x25
 800be3c:	d1f9      	bne.n	800be32 <_vfiprintf_r+0x7a>
 800be3e:	ebba 0b04 	subs.w	fp, sl, r4
 800be42:	d00b      	beq.n	800be5c <_vfiprintf_r+0xa4>
 800be44:	465b      	mov	r3, fp
 800be46:	4622      	mov	r2, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ffa1 	bl	800bd92 <__sfputs_r>
 800be50:	3001      	adds	r0, #1
 800be52:	f000 80a9 	beq.w	800bfa8 <_vfiprintf_r+0x1f0>
 800be56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be58:	445a      	add	r2, fp
 800be5a:	9209      	str	r2, [sp, #36]	; 0x24
 800be5c:	f89a 3000 	ldrb.w	r3, [sl]
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 80a1 	beq.w	800bfa8 <_vfiprintf_r+0x1f0>
 800be66:	2300      	movs	r3, #0
 800be68:	f04f 32ff 	mov.w	r2, #4294967295
 800be6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be70:	f10a 0a01 	add.w	sl, sl, #1
 800be74:	9304      	str	r3, [sp, #16]
 800be76:	9307      	str	r3, [sp, #28]
 800be78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be7c:	931a      	str	r3, [sp, #104]	; 0x68
 800be7e:	4654      	mov	r4, sl
 800be80:	2205      	movs	r2, #5
 800be82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be86:	4854      	ldr	r0, [pc, #336]	; (800bfd8 <_vfiprintf_r+0x220>)
 800be88:	f7f4 f9da 	bl	8000240 <memchr>
 800be8c:	9a04      	ldr	r2, [sp, #16]
 800be8e:	b9d8      	cbnz	r0, 800bec8 <_vfiprintf_r+0x110>
 800be90:	06d1      	lsls	r1, r2, #27
 800be92:	bf44      	itt	mi
 800be94:	2320      	movmi	r3, #32
 800be96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be9a:	0713      	lsls	r3, r2, #28
 800be9c:	bf44      	itt	mi
 800be9e:	232b      	movmi	r3, #43	; 0x2b
 800bea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b2a      	cmp	r3, #42	; 0x2a
 800beaa:	d015      	beq.n	800bed8 <_vfiprintf_r+0x120>
 800beac:	9a07      	ldr	r2, [sp, #28]
 800beae:	4654      	mov	r4, sl
 800beb0:	2000      	movs	r0, #0
 800beb2:	f04f 0c0a 	mov.w	ip, #10
 800beb6:	4621      	mov	r1, r4
 800beb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bebc:	3b30      	subs	r3, #48	; 0x30
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d94d      	bls.n	800bf5e <_vfiprintf_r+0x1a6>
 800bec2:	b1b0      	cbz	r0, 800bef2 <_vfiprintf_r+0x13a>
 800bec4:	9207      	str	r2, [sp, #28]
 800bec6:	e014      	b.n	800bef2 <_vfiprintf_r+0x13a>
 800bec8:	eba0 0308 	sub.w	r3, r0, r8
 800becc:	fa09 f303 	lsl.w	r3, r9, r3
 800bed0:	4313      	orrs	r3, r2
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	46a2      	mov	sl, r4
 800bed6:	e7d2      	b.n	800be7e <_vfiprintf_r+0xc6>
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	1d19      	adds	r1, r3, #4
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	9103      	str	r1, [sp, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfbb      	ittet	lt
 800bee4:	425b      	neglt	r3, r3
 800bee6:	f042 0202 	orrlt.w	r2, r2, #2
 800beea:	9307      	strge	r3, [sp, #28]
 800beec:	9307      	strlt	r3, [sp, #28]
 800beee:	bfb8      	it	lt
 800bef0:	9204      	strlt	r2, [sp, #16]
 800bef2:	7823      	ldrb	r3, [r4, #0]
 800bef4:	2b2e      	cmp	r3, #46	; 0x2e
 800bef6:	d10c      	bne.n	800bf12 <_vfiprintf_r+0x15a>
 800bef8:	7863      	ldrb	r3, [r4, #1]
 800befa:	2b2a      	cmp	r3, #42	; 0x2a
 800befc:	d134      	bne.n	800bf68 <_vfiprintf_r+0x1b0>
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	1d1a      	adds	r2, r3, #4
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	9203      	str	r2, [sp, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bfb8      	it	lt
 800bf0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf0e:	3402      	adds	r4, #2
 800bf10:	9305      	str	r3, [sp, #20]
 800bf12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bfe8 <_vfiprintf_r+0x230>
 800bf16:	7821      	ldrb	r1, [r4, #0]
 800bf18:	2203      	movs	r2, #3
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	f7f4 f990 	bl	8000240 <memchr>
 800bf20:	b138      	cbz	r0, 800bf32 <_vfiprintf_r+0x17a>
 800bf22:	9b04      	ldr	r3, [sp, #16]
 800bf24:	eba0 000a 	sub.w	r0, r0, sl
 800bf28:	2240      	movs	r2, #64	; 0x40
 800bf2a:	4082      	lsls	r2, r0
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	3401      	adds	r4, #1
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf36:	4829      	ldr	r0, [pc, #164]	; (800bfdc <_vfiprintf_r+0x224>)
 800bf38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf3c:	2206      	movs	r2, #6
 800bf3e:	f7f4 f97f 	bl	8000240 <memchr>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d03f      	beq.n	800bfc6 <_vfiprintf_r+0x20e>
 800bf46:	4b26      	ldr	r3, [pc, #152]	; (800bfe0 <_vfiprintf_r+0x228>)
 800bf48:	bb1b      	cbnz	r3, 800bf92 <_vfiprintf_r+0x1da>
 800bf4a:	9b03      	ldr	r3, [sp, #12]
 800bf4c:	3307      	adds	r3, #7
 800bf4e:	f023 0307 	bic.w	r3, r3, #7
 800bf52:	3308      	adds	r3, #8
 800bf54:	9303      	str	r3, [sp, #12]
 800bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf58:	443b      	add	r3, r7
 800bf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5c:	e768      	b.n	800be30 <_vfiprintf_r+0x78>
 800bf5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf62:	460c      	mov	r4, r1
 800bf64:	2001      	movs	r0, #1
 800bf66:	e7a6      	b.n	800beb6 <_vfiprintf_r+0xfe>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	3401      	adds	r4, #1
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	f04f 0c0a 	mov.w	ip, #10
 800bf74:	4620      	mov	r0, r4
 800bf76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7a:	3a30      	subs	r2, #48	; 0x30
 800bf7c:	2a09      	cmp	r2, #9
 800bf7e:	d903      	bls.n	800bf88 <_vfiprintf_r+0x1d0>
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d0c6      	beq.n	800bf12 <_vfiprintf_r+0x15a>
 800bf84:	9105      	str	r1, [sp, #20]
 800bf86:	e7c4      	b.n	800bf12 <_vfiprintf_r+0x15a>
 800bf88:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e7f0      	b.n	800bf74 <_vfiprintf_r+0x1bc>
 800bf92:	ab03      	add	r3, sp, #12
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	462a      	mov	r2, r5
 800bf98:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <_vfiprintf_r+0x22c>)
 800bf9a:	a904      	add	r1, sp, #16
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f3af 8000 	nop.w
 800bfa2:	4607      	mov	r7, r0
 800bfa4:	1c78      	adds	r0, r7, #1
 800bfa6:	d1d6      	bne.n	800bf56 <_vfiprintf_r+0x19e>
 800bfa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_vfiprintf_r+0x202>
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	059a      	lsls	r2, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_vfiprintf_r+0x202>
 800bfb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb6:	f7f8 f921 	bl	80041fc <__retarget_lock_release_recursive>
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	065b      	lsls	r3, r3, #25
 800bfbe:	f53f af1d 	bmi.w	800bdfc <_vfiprintf_r+0x44>
 800bfc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfc4:	e71c      	b.n	800be00 <_vfiprintf_r+0x48>
 800bfc6:	ab03      	add	r3, sp, #12
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	462a      	mov	r2, r5
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <_vfiprintf_r+0x22c>)
 800bfce:	a904      	add	r1, sp, #16
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f000 f879 	bl	800c0c8 <_printf_i>
 800bfd6:	e7e4      	b.n	800bfa2 <_vfiprintf_r+0x1ea>
 800bfd8:	0800d1b5 	.word	0x0800d1b5
 800bfdc:	0800d1bf 	.word	0x0800d1bf
 800bfe0:	00000000 	.word	0x00000000
 800bfe4:	0800bd93 	.word	0x0800bd93
 800bfe8:	0800d1bb 	.word	0x0800d1bb

0800bfec <_printf_common>:
 800bfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff0:	4616      	mov	r6, r2
 800bff2:	4699      	mov	r9, r3
 800bff4:	688a      	ldr	r2, [r1, #8]
 800bff6:	690b      	ldr	r3, [r1, #16]
 800bff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	bfb8      	it	lt
 800c000:	4613      	movlt	r3, r2
 800c002:	6033      	str	r3, [r6, #0]
 800c004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c008:	4607      	mov	r7, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	b10a      	cbz	r2, 800c012 <_printf_common+0x26>
 800c00e:	3301      	adds	r3, #1
 800c010:	6033      	str	r3, [r6, #0]
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	0699      	lsls	r1, r3, #26
 800c016:	bf42      	ittt	mi
 800c018:	6833      	ldrmi	r3, [r6, #0]
 800c01a:	3302      	addmi	r3, #2
 800c01c:	6033      	strmi	r3, [r6, #0]
 800c01e:	6825      	ldr	r5, [r4, #0]
 800c020:	f015 0506 	ands.w	r5, r5, #6
 800c024:	d106      	bne.n	800c034 <_printf_common+0x48>
 800c026:	f104 0a19 	add.w	sl, r4, #25
 800c02a:	68e3      	ldr	r3, [r4, #12]
 800c02c:	6832      	ldr	r2, [r6, #0]
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	42ab      	cmp	r3, r5
 800c032:	dc26      	bgt.n	800c082 <_printf_common+0x96>
 800c034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c038:	1e13      	subs	r3, r2, #0
 800c03a:	6822      	ldr	r2, [r4, #0]
 800c03c:	bf18      	it	ne
 800c03e:	2301      	movne	r3, #1
 800c040:	0692      	lsls	r2, r2, #26
 800c042:	d42b      	bmi.n	800c09c <_printf_common+0xb0>
 800c044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c048:	4649      	mov	r1, r9
 800c04a:	4638      	mov	r0, r7
 800c04c:	47c0      	blx	r8
 800c04e:	3001      	adds	r0, #1
 800c050:	d01e      	beq.n	800c090 <_printf_common+0xa4>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	6922      	ldr	r2, [r4, #16]
 800c056:	f003 0306 	and.w	r3, r3, #6
 800c05a:	2b04      	cmp	r3, #4
 800c05c:	bf02      	ittt	eq
 800c05e:	68e5      	ldreq	r5, [r4, #12]
 800c060:	6833      	ldreq	r3, [r6, #0]
 800c062:	1aed      	subeq	r5, r5, r3
 800c064:	68a3      	ldr	r3, [r4, #8]
 800c066:	bf0c      	ite	eq
 800c068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c06c:	2500      	movne	r5, #0
 800c06e:	4293      	cmp	r3, r2
 800c070:	bfc4      	itt	gt
 800c072:	1a9b      	subgt	r3, r3, r2
 800c074:	18ed      	addgt	r5, r5, r3
 800c076:	2600      	movs	r6, #0
 800c078:	341a      	adds	r4, #26
 800c07a:	42b5      	cmp	r5, r6
 800c07c:	d11a      	bne.n	800c0b4 <_printf_common+0xc8>
 800c07e:	2000      	movs	r0, #0
 800c080:	e008      	b.n	800c094 <_printf_common+0xa8>
 800c082:	2301      	movs	r3, #1
 800c084:	4652      	mov	r2, sl
 800c086:	4649      	mov	r1, r9
 800c088:	4638      	mov	r0, r7
 800c08a:	47c0      	blx	r8
 800c08c:	3001      	adds	r0, #1
 800c08e:	d103      	bne.n	800c098 <_printf_common+0xac>
 800c090:	f04f 30ff 	mov.w	r0, #4294967295
 800c094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c098:	3501      	adds	r5, #1
 800c09a:	e7c6      	b.n	800c02a <_printf_common+0x3e>
 800c09c:	18e1      	adds	r1, r4, r3
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	2030      	movs	r0, #48	; 0x30
 800c0a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0a6:	4422      	add	r2, r4
 800c0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	e7c7      	b.n	800c044 <_printf_common+0x58>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	47c0      	blx	r8
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d0e6      	beq.n	800c090 <_printf_common+0xa4>
 800c0c2:	3601      	adds	r6, #1
 800c0c4:	e7d9      	b.n	800c07a <_printf_common+0x8e>
	...

0800c0c8 <_printf_i>:
 800c0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	7e0f      	ldrb	r7, [r1, #24]
 800c0ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0d0:	2f78      	cmp	r7, #120	; 0x78
 800c0d2:	4691      	mov	r9, r2
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	469a      	mov	sl, r3
 800c0da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0de:	d807      	bhi.n	800c0f0 <_printf_i+0x28>
 800c0e0:	2f62      	cmp	r7, #98	; 0x62
 800c0e2:	d80a      	bhi.n	800c0fa <_printf_i+0x32>
 800c0e4:	2f00      	cmp	r7, #0
 800c0e6:	f000 80d4 	beq.w	800c292 <_printf_i+0x1ca>
 800c0ea:	2f58      	cmp	r7, #88	; 0x58
 800c0ec:	f000 80c0 	beq.w	800c270 <_printf_i+0x1a8>
 800c0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0f8:	e03a      	b.n	800c170 <_printf_i+0xa8>
 800c0fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0fe:	2b15      	cmp	r3, #21
 800c100:	d8f6      	bhi.n	800c0f0 <_printf_i+0x28>
 800c102:	a101      	add	r1, pc, #4	; (adr r1, 800c108 <_printf_i+0x40>)
 800c104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c108:	0800c161 	.word	0x0800c161
 800c10c:	0800c175 	.word	0x0800c175
 800c110:	0800c0f1 	.word	0x0800c0f1
 800c114:	0800c0f1 	.word	0x0800c0f1
 800c118:	0800c0f1 	.word	0x0800c0f1
 800c11c:	0800c0f1 	.word	0x0800c0f1
 800c120:	0800c175 	.word	0x0800c175
 800c124:	0800c0f1 	.word	0x0800c0f1
 800c128:	0800c0f1 	.word	0x0800c0f1
 800c12c:	0800c0f1 	.word	0x0800c0f1
 800c130:	0800c0f1 	.word	0x0800c0f1
 800c134:	0800c279 	.word	0x0800c279
 800c138:	0800c1a1 	.word	0x0800c1a1
 800c13c:	0800c233 	.word	0x0800c233
 800c140:	0800c0f1 	.word	0x0800c0f1
 800c144:	0800c0f1 	.word	0x0800c0f1
 800c148:	0800c29b 	.word	0x0800c29b
 800c14c:	0800c0f1 	.word	0x0800c0f1
 800c150:	0800c1a1 	.word	0x0800c1a1
 800c154:	0800c0f1 	.word	0x0800c0f1
 800c158:	0800c0f1 	.word	0x0800c0f1
 800c15c:	0800c23b 	.word	0x0800c23b
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	1d1a      	adds	r2, r3, #4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	602a      	str	r2, [r5, #0]
 800c168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c16c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c170:	2301      	movs	r3, #1
 800c172:	e09f      	b.n	800c2b4 <_printf_i+0x1ec>
 800c174:	6820      	ldr	r0, [r4, #0]
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	0607      	lsls	r7, r0, #24
 800c17a:	f103 0104 	add.w	r1, r3, #4
 800c17e:	6029      	str	r1, [r5, #0]
 800c180:	d501      	bpl.n	800c186 <_printf_i+0xbe>
 800c182:	681e      	ldr	r6, [r3, #0]
 800c184:	e003      	b.n	800c18e <_printf_i+0xc6>
 800c186:	0646      	lsls	r6, r0, #25
 800c188:	d5fb      	bpl.n	800c182 <_printf_i+0xba>
 800c18a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c18e:	2e00      	cmp	r6, #0
 800c190:	da03      	bge.n	800c19a <_printf_i+0xd2>
 800c192:	232d      	movs	r3, #45	; 0x2d
 800c194:	4276      	negs	r6, r6
 800c196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19a:	485a      	ldr	r0, [pc, #360]	; (800c304 <_printf_i+0x23c>)
 800c19c:	230a      	movs	r3, #10
 800c19e:	e012      	b.n	800c1c6 <_printf_i+0xfe>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	6820      	ldr	r0, [r4, #0]
 800c1a4:	1d19      	adds	r1, r3, #4
 800c1a6:	6029      	str	r1, [r5, #0]
 800c1a8:	0605      	lsls	r5, r0, #24
 800c1aa:	d501      	bpl.n	800c1b0 <_printf_i+0xe8>
 800c1ac:	681e      	ldr	r6, [r3, #0]
 800c1ae:	e002      	b.n	800c1b6 <_printf_i+0xee>
 800c1b0:	0641      	lsls	r1, r0, #25
 800c1b2:	d5fb      	bpl.n	800c1ac <_printf_i+0xe4>
 800c1b4:	881e      	ldrh	r6, [r3, #0]
 800c1b6:	4853      	ldr	r0, [pc, #332]	; (800c304 <_printf_i+0x23c>)
 800c1b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c1ba:	bf0c      	ite	eq
 800c1bc:	2308      	moveq	r3, #8
 800c1be:	230a      	movne	r3, #10
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1c6:	6865      	ldr	r5, [r4, #4]
 800c1c8:	60a5      	str	r5, [r4, #8]
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	bfa2      	ittt	ge
 800c1ce:	6821      	ldrge	r1, [r4, #0]
 800c1d0:	f021 0104 	bicge.w	r1, r1, #4
 800c1d4:	6021      	strge	r1, [r4, #0]
 800c1d6:	b90e      	cbnz	r6, 800c1dc <_printf_i+0x114>
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	d04b      	beq.n	800c274 <_printf_i+0x1ac>
 800c1dc:	4615      	mov	r5, r2
 800c1de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c1e6:	5dc7      	ldrb	r7, [r0, r7]
 800c1e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1ec:	4637      	mov	r7, r6
 800c1ee:	42bb      	cmp	r3, r7
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	d9f4      	bls.n	800c1de <_printf_i+0x116>
 800c1f4:	2b08      	cmp	r3, #8
 800c1f6:	d10b      	bne.n	800c210 <_printf_i+0x148>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	07de      	lsls	r6, r3, #31
 800c1fc:	d508      	bpl.n	800c210 <_printf_i+0x148>
 800c1fe:	6923      	ldr	r3, [r4, #16]
 800c200:	6861      	ldr	r1, [r4, #4]
 800c202:	4299      	cmp	r1, r3
 800c204:	bfde      	ittt	le
 800c206:	2330      	movle	r3, #48	; 0x30
 800c208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c20c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c210:	1b52      	subs	r2, r2, r5
 800c212:	6122      	str	r2, [r4, #16]
 800c214:	f8cd a000 	str.w	sl, [sp]
 800c218:	464b      	mov	r3, r9
 800c21a:	aa03      	add	r2, sp, #12
 800c21c:	4621      	mov	r1, r4
 800c21e:	4640      	mov	r0, r8
 800c220:	f7ff fee4 	bl	800bfec <_printf_common>
 800c224:	3001      	adds	r0, #1
 800c226:	d14a      	bne.n	800c2be <_printf_i+0x1f6>
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	b004      	add	sp, #16
 800c22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	f043 0320 	orr.w	r3, r3, #32
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	4833      	ldr	r0, [pc, #204]	; (800c308 <_printf_i+0x240>)
 800c23c:	2778      	movs	r7, #120	; 0x78
 800c23e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	6829      	ldr	r1, [r5, #0]
 800c246:	061f      	lsls	r7, r3, #24
 800c248:	f851 6b04 	ldr.w	r6, [r1], #4
 800c24c:	d402      	bmi.n	800c254 <_printf_i+0x18c>
 800c24e:	065f      	lsls	r7, r3, #25
 800c250:	bf48      	it	mi
 800c252:	b2b6      	uxthmi	r6, r6
 800c254:	07df      	lsls	r7, r3, #31
 800c256:	bf48      	it	mi
 800c258:	f043 0320 	orrmi.w	r3, r3, #32
 800c25c:	6029      	str	r1, [r5, #0]
 800c25e:	bf48      	it	mi
 800c260:	6023      	strmi	r3, [r4, #0]
 800c262:	b91e      	cbnz	r6, 800c26c <_printf_i+0x1a4>
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	f023 0320 	bic.w	r3, r3, #32
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2310      	movs	r3, #16
 800c26e:	e7a7      	b.n	800c1c0 <_printf_i+0xf8>
 800c270:	4824      	ldr	r0, [pc, #144]	; (800c304 <_printf_i+0x23c>)
 800c272:	e7e4      	b.n	800c23e <_printf_i+0x176>
 800c274:	4615      	mov	r5, r2
 800c276:	e7bd      	b.n	800c1f4 <_printf_i+0x12c>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	6826      	ldr	r6, [r4, #0]
 800c27c:	6961      	ldr	r1, [r4, #20]
 800c27e:	1d18      	adds	r0, r3, #4
 800c280:	6028      	str	r0, [r5, #0]
 800c282:	0635      	lsls	r5, r6, #24
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	d501      	bpl.n	800c28c <_printf_i+0x1c4>
 800c288:	6019      	str	r1, [r3, #0]
 800c28a:	e002      	b.n	800c292 <_printf_i+0x1ca>
 800c28c:	0670      	lsls	r0, r6, #25
 800c28e:	d5fb      	bpl.n	800c288 <_printf_i+0x1c0>
 800c290:	8019      	strh	r1, [r3, #0]
 800c292:	2300      	movs	r3, #0
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	4615      	mov	r5, r2
 800c298:	e7bc      	b.n	800c214 <_printf_i+0x14c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	1d1a      	adds	r2, r3, #4
 800c29e:	602a      	str	r2, [r5, #0]
 800c2a0:	681d      	ldr	r5, [r3, #0]
 800c2a2:	6862      	ldr	r2, [r4, #4]
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f7f3 ffca 	bl	8000240 <memchr>
 800c2ac:	b108      	cbz	r0, 800c2b2 <_printf_i+0x1ea>
 800c2ae:	1b40      	subs	r0, r0, r5
 800c2b0:	6060      	str	r0, [r4, #4]
 800c2b2:	6863      	ldr	r3, [r4, #4]
 800c2b4:	6123      	str	r3, [r4, #16]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2bc:	e7aa      	b.n	800c214 <_printf_i+0x14c>
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	47d0      	blx	sl
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d0ad      	beq.n	800c228 <_printf_i+0x160>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	079b      	lsls	r3, r3, #30
 800c2d0:	d413      	bmi.n	800c2fa <_printf_i+0x232>
 800c2d2:	68e0      	ldr	r0, [r4, #12]
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	4298      	cmp	r0, r3
 800c2d8:	bfb8      	it	lt
 800c2da:	4618      	movlt	r0, r3
 800c2dc:	e7a6      	b.n	800c22c <_printf_i+0x164>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	47d0      	blx	sl
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d09d      	beq.n	800c228 <_printf_i+0x160>
 800c2ec:	3501      	adds	r5, #1
 800c2ee:	68e3      	ldr	r3, [r4, #12]
 800c2f0:	9903      	ldr	r1, [sp, #12]
 800c2f2:	1a5b      	subs	r3, r3, r1
 800c2f4:	42ab      	cmp	r3, r5
 800c2f6:	dcf2      	bgt.n	800c2de <_printf_i+0x216>
 800c2f8:	e7eb      	b.n	800c2d2 <_printf_i+0x20a>
 800c2fa:	2500      	movs	r5, #0
 800c2fc:	f104 0619 	add.w	r6, r4, #25
 800c300:	e7f5      	b.n	800c2ee <_printf_i+0x226>
 800c302:	bf00      	nop
 800c304:	0800d1c6 	.word	0x0800d1c6
 800c308:	0800d1d7 	.word	0x0800d1d7

0800c30c <__sflush_r>:
 800c30c:	898a      	ldrh	r2, [r1, #12]
 800c30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	0710      	lsls	r0, r2, #28
 800c316:	460c      	mov	r4, r1
 800c318:	d458      	bmi.n	800c3cc <__sflush_r+0xc0>
 800c31a:	684b      	ldr	r3, [r1, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dc05      	bgt.n	800c32c <__sflush_r+0x20>
 800c320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	dc02      	bgt.n	800c32c <__sflush_r+0x20>
 800c326:	2000      	movs	r0, #0
 800c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c32e:	2e00      	cmp	r6, #0
 800c330:	d0f9      	beq.n	800c326 <__sflush_r+0x1a>
 800c332:	2300      	movs	r3, #0
 800c334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c338:	682f      	ldr	r7, [r5, #0]
 800c33a:	6a21      	ldr	r1, [r4, #32]
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	d032      	beq.n	800c3a6 <__sflush_r+0x9a>
 800c340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	075a      	lsls	r2, r3, #29
 800c346:	d505      	bpl.n	800c354 <__sflush_r+0x48>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	1ac0      	subs	r0, r0, r3
 800c34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c34e:	b10b      	cbz	r3, 800c354 <__sflush_r+0x48>
 800c350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c352:	1ac0      	subs	r0, r0, r3
 800c354:	2300      	movs	r3, #0
 800c356:	4602      	mov	r2, r0
 800c358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b0      	blx	r6
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	d106      	bne.n	800c374 <__sflush_r+0x68>
 800c366:	6829      	ldr	r1, [r5, #0]
 800c368:	291d      	cmp	r1, #29
 800c36a:	d82b      	bhi.n	800c3c4 <__sflush_r+0xb8>
 800c36c:	4a29      	ldr	r2, [pc, #164]	; (800c414 <__sflush_r+0x108>)
 800c36e:	410a      	asrs	r2, r1
 800c370:	07d6      	lsls	r6, r2, #31
 800c372:	d427      	bmi.n	800c3c4 <__sflush_r+0xb8>
 800c374:	2200      	movs	r2, #0
 800c376:	6062      	str	r2, [r4, #4]
 800c378:	04d9      	lsls	r1, r3, #19
 800c37a:	6922      	ldr	r2, [r4, #16]
 800c37c:	6022      	str	r2, [r4, #0]
 800c37e:	d504      	bpl.n	800c38a <__sflush_r+0x7e>
 800c380:	1c42      	adds	r2, r0, #1
 800c382:	d101      	bne.n	800c388 <__sflush_r+0x7c>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b903      	cbnz	r3, 800c38a <__sflush_r+0x7e>
 800c388:	6560      	str	r0, [r4, #84]	; 0x54
 800c38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38c:	602f      	str	r7, [r5, #0]
 800c38e:	2900      	cmp	r1, #0
 800c390:	d0c9      	beq.n	800c326 <__sflush_r+0x1a>
 800c392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c396:	4299      	cmp	r1, r3
 800c398:	d002      	beq.n	800c3a0 <__sflush_r+0x94>
 800c39a:	4628      	mov	r0, r5
 800c39c:	f7ff fb3e 	bl	800ba1c <_free_r>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a4:	e7c0      	b.n	800c328 <__sflush_r+0x1c>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b0      	blx	r6
 800c3ac:	1c41      	adds	r1, r0, #1
 800c3ae:	d1c8      	bne.n	800c342 <__sflush_r+0x36>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0c5      	beq.n	800c342 <__sflush_r+0x36>
 800c3b6:	2b1d      	cmp	r3, #29
 800c3b8:	d001      	beq.n	800c3be <__sflush_r+0xb2>
 800c3ba:	2b16      	cmp	r3, #22
 800c3bc:	d101      	bne.n	800c3c2 <__sflush_r+0xb6>
 800c3be:	602f      	str	r7, [r5, #0]
 800c3c0:	e7b1      	b.n	800c326 <__sflush_r+0x1a>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	e7ad      	b.n	800c328 <__sflush_r+0x1c>
 800c3cc:	690f      	ldr	r7, [r1, #16]
 800c3ce:	2f00      	cmp	r7, #0
 800c3d0:	d0a9      	beq.n	800c326 <__sflush_r+0x1a>
 800c3d2:	0793      	lsls	r3, r2, #30
 800c3d4:	680e      	ldr	r6, [r1, #0]
 800c3d6:	bf08      	it	eq
 800c3d8:	694b      	ldreq	r3, [r1, #20]
 800c3da:	600f      	str	r7, [r1, #0]
 800c3dc:	bf18      	it	ne
 800c3de:	2300      	movne	r3, #0
 800c3e0:	eba6 0807 	sub.w	r8, r6, r7
 800c3e4:	608b      	str	r3, [r1, #8]
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	dd9c      	ble.n	800c326 <__sflush_r+0x1a>
 800c3ec:	6a21      	ldr	r1, [r4, #32]
 800c3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3f0:	4643      	mov	r3, r8
 800c3f2:	463a      	mov	r2, r7
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b0      	blx	r6
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dc06      	bgt.n	800c40a <__sflush_r+0xfe>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	f04f 30ff 	mov.w	r0, #4294967295
 800c408:	e78e      	b.n	800c328 <__sflush_r+0x1c>
 800c40a:	4407      	add	r7, r0
 800c40c:	eba8 0800 	sub.w	r8, r8, r0
 800c410:	e7e9      	b.n	800c3e6 <__sflush_r+0xda>
 800c412:	bf00      	nop
 800c414:	dfbffffe 	.word	0xdfbffffe

0800c418 <_fflush_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	690b      	ldr	r3, [r1, #16]
 800c41c:	4605      	mov	r5, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	b913      	cbnz	r3, 800c428 <_fflush_r+0x10>
 800c422:	2500      	movs	r5, #0
 800c424:	4628      	mov	r0, r5
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	b118      	cbz	r0, 800c432 <_fflush_r+0x1a>
 800c42a:	6a03      	ldr	r3, [r0, #32]
 800c42c:	b90b      	cbnz	r3, 800c432 <_fflush_r+0x1a>
 800c42e:	f7ff f90f 	bl	800b650 <__sinit>
 800c432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d0f3      	beq.n	800c422 <_fflush_r+0xa>
 800c43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c43c:	07d0      	lsls	r0, r2, #31
 800c43e:	d404      	bmi.n	800c44a <_fflush_r+0x32>
 800c440:	0599      	lsls	r1, r3, #22
 800c442:	d402      	bmi.n	800c44a <_fflush_r+0x32>
 800c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c446:	f7f7 fec5 	bl	80041d4 <__retarget_lock_acquire_recursive>
 800c44a:	4628      	mov	r0, r5
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7ff ff5d 	bl	800c30c <__sflush_r>
 800c452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c454:	07da      	lsls	r2, r3, #31
 800c456:	4605      	mov	r5, r0
 800c458:	d4e4      	bmi.n	800c424 <_fflush_r+0xc>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	059b      	lsls	r3, r3, #22
 800c45e:	d4e1      	bmi.n	800c424 <_fflush_r+0xc>
 800c460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c462:	f7f7 fecb 	bl	80041fc <__retarget_lock_release_recursive>
 800c466:	e7dd      	b.n	800c424 <_fflush_r+0xc>

0800c468 <__swbuf_r>:
 800c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46a:	460e      	mov	r6, r1
 800c46c:	4614      	mov	r4, r2
 800c46e:	4605      	mov	r5, r0
 800c470:	b118      	cbz	r0, 800c47a <__swbuf_r+0x12>
 800c472:	6a03      	ldr	r3, [r0, #32]
 800c474:	b90b      	cbnz	r3, 800c47a <__swbuf_r+0x12>
 800c476:	f7ff f8eb 	bl	800b650 <__sinit>
 800c47a:	69a3      	ldr	r3, [r4, #24]
 800c47c:	60a3      	str	r3, [r4, #8]
 800c47e:	89a3      	ldrh	r3, [r4, #12]
 800c480:	071a      	lsls	r2, r3, #28
 800c482:	d525      	bpl.n	800c4d0 <__swbuf_r+0x68>
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	b31b      	cbz	r3, 800c4d0 <__swbuf_r+0x68>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	6922      	ldr	r2, [r4, #16]
 800c48c:	1a98      	subs	r0, r3, r2
 800c48e:	6963      	ldr	r3, [r4, #20]
 800c490:	b2f6      	uxtb	r6, r6
 800c492:	4283      	cmp	r3, r0
 800c494:	4637      	mov	r7, r6
 800c496:	dc04      	bgt.n	800c4a2 <__swbuf_r+0x3a>
 800c498:	4621      	mov	r1, r4
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7ff ffbc 	bl	800c418 <_fflush_r>
 800c4a0:	b9e0      	cbnz	r0, 800c4dc <__swbuf_r+0x74>
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	60a3      	str	r3, [r4, #8]
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	6022      	str	r2, [r4, #0]
 800c4ae:	701e      	strb	r6, [r3, #0]
 800c4b0:	6962      	ldr	r2, [r4, #20]
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d004      	beq.n	800c4c2 <__swbuf_r+0x5a>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	07db      	lsls	r3, r3, #31
 800c4bc:	d506      	bpl.n	800c4cc <__swbuf_r+0x64>
 800c4be:	2e0a      	cmp	r6, #10
 800c4c0:	d104      	bne.n	800c4cc <__swbuf_r+0x64>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff ffa7 	bl	800c418 <_fflush_r>
 800c4ca:	b938      	cbnz	r0, 800c4dc <__swbuf_r+0x74>
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f000 f806 	bl	800c4e4 <__swsetup_r>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d0d5      	beq.n	800c488 <__swbuf_r+0x20>
 800c4dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c4e0:	e7f4      	b.n	800c4cc <__swbuf_r+0x64>
	...

0800c4e4 <__swsetup_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4b2a      	ldr	r3, [pc, #168]	; (800c590 <__swsetup_r+0xac>)
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	b118      	cbz	r0, 800c4f8 <__swsetup_r+0x14>
 800c4f0:	6a03      	ldr	r3, [r0, #32]
 800c4f2:	b90b      	cbnz	r3, 800c4f8 <__swsetup_r+0x14>
 800c4f4:	f7ff f8ac 	bl	800b650 <__sinit>
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4fe:	0718      	lsls	r0, r3, #28
 800c500:	d422      	bmi.n	800c548 <__swsetup_r+0x64>
 800c502:	06d9      	lsls	r1, r3, #27
 800c504:	d407      	bmi.n	800c516 <__swsetup_r+0x32>
 800c506:	2309      	movs	r3, #9
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	e034      	b.n	800c580 <__swsetup_r+0x9c>
 800c516:	0758      	lsls	r0, r3, #29
 800c518:	d512      	bpl.n	800c540 <__swsetup_r+0x5c>
 800c51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c51c:	b141      	cbz	r1, 800c530 <__swsetup_r+0x4c>
 800c51e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c522:	4299      	cmp	r1, r3
 800c524:	d002      	beq.n	800c52c <__swsetup_r+0x48>
 800c526:	4628      	mov	r0, r5
 800c528:	f7ff fa78 	bl	800ba1c <_free_r>
 800c52c:	2300      	movs	r3, #0
 800c52e:	6363      	str	r3, [r4, #52]	; 0x34
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	2300      	movs	r3, #0
 800c53a:	6063      	str	r3, [r4, #4]
 800c53c:	6923      	ldr	r3, [r4, #16]
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	f043 0308 	orr.w	r3, r3, #8
 800c546:	81a3      	strh	r3, [r4, #12]
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	b94b      	cbnz	r3, 800c560 <__swsetup_r+0x7c>
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c556:	d003      	beq.n	800c560 <__swsetup_r+0x7c>
 800c558:	4621      	mov	r1, r4
 800c55a:	4628      	mov	r0, r5
 800c55c:	f000 f8cd 	bl	800c6fa <__smakebuf_r>
 800c560:	89a0      	ldrh	r0, [r4, #12]
 800c562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c566:	f010 0301 	ands.w	r3, r0, #1
 800c56a:	d00a      	beq.n	800c582 <__swsetup_r+0x9e>
 800c56c:	2300      	movs	r3, #0
 800c56e:	60a3      	str	r3, [r4, #8]
 800c570:	6963      	ldr	r3, [r4, #20]
 800c572:	425b      	negs	r3, r3
 800c574:	61a3      	str	r3, [r4, #24]
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	b943      	cbnz	r3, 800c58c <__swsetup_r+0xa8>
 800c57a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c57e:	d1c4      	bne.n	800c50a <__swsetup_r+0x26>
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	0781      	lsls	r1, r0, #30
 800c584:	bf58      	it	pl
 800c586:	6963      	ldrpl	r3, [r4, #20]
 800c588:	60a3      	str	r3, [r4, #8]
 800c58a:	e7f4      	b.n	800c576 <__swsetup_r+0x92>
 800c58c:	2000      	movs	r0, #0
 800c58e:	e7f7      	b.n	800c580 <__swsetup_r+0x9c>
 800c590:	2000014c 	.word	0x2000014c

0800c594 <memmove>:
 800c594:	4288      	cmp	r0, r1
 800c596:	b510      	push	{r4, lr}
 800c598:	eb01 0402 	add.w	r4, r1, r2
 800c59c:	d902      	bls.n	800c5a4 <memmove+0x10>
 800c59e:	4284      	cmp	r4, r0
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	d807      	bhi.n	800c5b4 <memmove+0x20>
 800c5a4:	1e43      	subs	r3, r0, #1
 800c5a6:	42a1      	cmp	r1, r4
 800c5a8:	d008      	beq.n	800c5bc <memmove+0x28>
 800c5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5b2:	e7f8      	b.n	800c5a6 <memmove+0x12>
 800c5b4:	4402      	add	r2, r0
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	428a      	cmp	r2, r1
 800c5ba:	d100      	bne.n	800c5be <memmove+0x2a>
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5c6:	e7f7      	b.n	800c5b8 <memmove+0x24>

0800c5c8 <_raise_r>:
 800c5c8:	291f      	cmp	r1, #31
 800c5ca:	b538      	push	{r3, r4, r5, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	d904      	bls.n	800c5dc <_raise_r+0x14>
 800c5d2:	2316      	movs	r3, #22
 800c5d4:	6003      	str	r3, [r0, #0]
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5de:	b112      	cbz	r2, 800c5e6 <_raise_r+0x1e>
 800c5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5e4:	b94b      	cbnz	r3, 800c5fa <_raise_r+0x32>
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 f830 	bl	800c64c <_getpid_r>
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f6:	f000 b817 	b.w	800c628 <_kill_r>
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d00a      	beq.n	800c614 <_raise_r+0x4c>
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	d103      	bne.n	800c60a <_raise_r+0x42>
 800c602:	2316      	movs	r3, #22
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	2001      	movs	r0, #1
 800c608:	e7e7      	b.n	800c5da <_raise_r+0x12>
 800c60a:	2400      	movs	r4, #0
 800c60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c610:	4628      	mov	r0, r5
 800c612:	4798      	blx	r3
 800c614:	2000      	movs	r0, #0
 800c616:	e7e0      	b.n	800c5da <_raise_r+0x12>

0800c618 <raise>:
 800c618:	4b02      	ldr	r3, [pc, #8]	; (800c624 <raise+0xc>)
 800c61a:	4601      	mov	r1, r0
 800c61c:	6818      	ldr	r0, [r3, #0]
 800c61e:	f7ff bfd3 	b.w	800c5c8 <_raise_r>
 800c622:	bf00      	nop
 800c624:	2000014c 	.word	0x2000014c

0800c628 <_kill_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d07      	ldr	r5, [pc, #28]	; (800c648 <_kill_r+0x20>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	4611      	mov	r1, r2
 800c634:	602b      	str	r3, [r5, #0]
 800c636:	f7f7 f965 	bl	8003904 <_kill>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d102      	bne.n	800c644 <_kill_r+0x1c>
 800c63e:	682b      	ldr	r3, [r5, #0]
 800c640:	b103      	cbz	r3, 800c644 <_kill_r+0x1c>
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	bd38      	pop	{r3, r4, r5, pc}
 800c646:	bf00      	nop
 800c648:	20006bd4 	.word	0x20006bd4

0800c64c <_getpid_r>:
 800c64c:	f7f7 b952 	b.w	80038f4 <_getpid>

0800c650 <_realloc_r>:
 800c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c654:	4680      	mov	r8, r0
 800c656:	4614      	mov	r4, r2
 800c658:	460e      	mov	r6, r1
 800c65a:	b921      	cbnz	r1, 800c666 <_realloc_r+0x16>
 800c65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c660:	4611      	mov	r1, r2
 800c662:	f7fe be9b 	b.w	800b39c <_malloc_r>
 800c666:	b92a      	cbnz	r2, 800c674 <_realloc_r+0x24>
 800c668:	f7ff f9d8 	bl	800ba1c <_free_r>
 800c66c:	4625      	mov	r5, r4
 800c66e:	4628      	mov	r0, r5
 800c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c674:	f000 f8a0 	bl	800c7b8 <_malloc_usable_size_r>
 800c678:	4284      	cmp	r4, r0
 800c67a:	4607      	mov	r7, r0
 800c67c:	d802      	bhi.n	800c684 <_realloc_r+0x34>
 800c67e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c682:	d812      	bhi.n	800c6aa <_realloc_r+0x5a>
 800c684:	4621      	mov	r1, r4
 800c686:	4640      	mov	r0, r8
 800c688:	f7fe fe88 	bl	800b39c <_malloc_r>
 800c68c:	4605      	mov	r5, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0ed      	beq.n	800c66e <_realloc_r+0x1e>
 800c692:	42bc      	cmp	r4, r7
 800c694:	4622      	mov	r2, r4
 800c696:	4631      	mov	r1, r6
 800c698:	bf28      	it	cs
 800c69a:	463a      	movcs	r2, r7
 800c69c:	f7ff f9a8 	bl	800b9f0 <memcpy>
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	f7ff f9ba 	bl	800ba1c <_free_r>
 800c6a8:	e7e1      	b.n	800c66e <_realloc_r+0x1e>
 800c6aa:	4635      	mov	r5, r6
 800c6ac:	e7df      	b.n	800c66e <_realloc_r+0x1e>

0800c6ae <__swhatbuf_r>:
 800c6ae:	b570      	push	{r4, r5, r6, lr}
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b6:	2900      	cmp	r1, #0
 800c6b8:	b096      	sub	sp, #88	; 0x58
 800c6ba:	4615      	mov	r5, r2
 800c6bc:	461e      	mov	r6, r3
 800c6be:	da0d      	bge.n	800c6dc <__swhatbuf_r+0x2e>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c6c6:	f04f 0100 	mov.w	r1, #0
 800c6ca:	bf0c      	ite	eq
 800c6cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c6d0:	2340      	movne	r3, #64	; 0x40
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	6031      	str	r1, [r6, #0]
 800c6d6:	602b      	str	r3, [r5, #0]
 800c6d8:	b016      	add	sp, #88	; 0x58
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	466a      	mov	r2, sp
 800c6de:	f000 f849 	bl	800c774 <_fstat_r>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	dbec      	blt.n	800c6c0 <__swhatbuf_r+0x12>
 800c6e6:	9901      	ldr	r1, [sp, #4]
 800c6e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c6ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c6f0:	4259      	negs	r1, r3
 800c6f2:	4159      	adcs	r1, r3
 800c6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f8:	e7eb      	b.n	800c6d2 <__swhatbuf_r+0x24>

0800c6fa <__smakebuf_r>:
 800c6fa:	898b      	ldrh	r3, [r1, #12]
 800c6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6fe:	079d      	lsls	r5, r3, #30
 800c700:	4606      	mov	r6, r0
 800c702:	460c      	mov	r4, r1
 800c704:	d507      	bpl.n	800c716 <__smakebuf_r+0x1c>
 800c706:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	6123      	str	r3, [r4, #16]
 800c70e:	2301      	movs	r3, #1
 800c710:	6163      	str	r3, [r4, #20]
 800c712:	b002      	add	sp, #8
 800c714:	bd70      	pop	{r4, r5, r6, pc}
 800c716:	ab01      	add	r3, sp, #4
 800c718:	466a      	mov	r2, sp
 800c71a:	f7ff ffc8 	bl	800c6ae <__swhatbuf_r>
 800c71e:	9900      	ldr	r1, [sp, #0]
 800c720:	4605      	mov	r5, r0
 800c722:	4630      	mov	r0, r6
 800c724:	f7fe fe3a 	bl	800b39c <_malloc_r>
 800c728:	b948      	cbnz	r0, 800c73e <__smakebuf_r+0x44>
 800c72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72e:	059a      	lsls	r2, r3, #22
 800c730:	d4ef      	bmi.n	800c712 <__smakebuf_r+0x18>
 800c732:	f023 0303 	bic.w	r3, r3, #3
 800c736:	f043 0302 	orr.w	r3, r3, #2
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	e7e3      	b.n	800c706 <__smakebuf_r+0xc>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	6020      	str	r0, [r4, #0]
 800c742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	9b00      	ldr	r3, [sp, #0]
 800c74a:	6163      	str	r3, [r4, #20]
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	6120      	str	r0, [r4, #16]
 800c750:	b15b      	cbz	r3, 800c76a <__smakebuf_r+0x70>
 800c752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c756:	4630      	mov	r0, r6
 800c758:	f000 f81e 	bl	800c798 <_isatty_r>
 800c75c:	b128      	cbz	r0, 800c76a <__smakebuf_r+0x70>
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	f023 0303 	bic.w	r3, r3, #3
 800c764:	f043 0301 	orr.w	r3, r3, #1
 800c768:	81a3      	strh	r3, [r4, #12]
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	431d      	orrs	r5, r3
 800c76e:	81a5      	strh	r5, [r4, #12]
 800c770:	e7cf      	b.n	800c712 <__smakebuf_r+0x18>
	...

0800c774 <_fstat_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4d07      	ldr	r5, [pc, #28]	; (800c794 <_fstat_r+0x20>)
 800c778:	2300      	movs	r3, #0
 800c77a:	4604      	mov	r4, r0
 800c77c:	4608      	mov	r0, r1
 800c77e:	4611      	mov	r1, r2
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	f7f7 f91e 	bl	80039c2 <_fstat>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d102      	bne.n	800c790 <_fstat_r+0x1c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	b103      	cbz	r3, 800c790 <_fstat_r+0x1c>
 800c78e:	6023      	str	r3, [r4, #0]
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	bf00      	nop
 800c794:	20006bd4 	.word	0x20006bd4

0800c798 <_isatty_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	; (800c7b4 <_isatty_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f7 f91d 	bl	80039e2 <_isatty>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_isatty_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_isatty_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20006bd4 	.word	0x20006bd4

0800c7b8 <_malloc_usable_size_r>:
 800c7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7bc:	1f18      	subs	r0, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	bfbc      	itt	lt
 800c7c2:	580b      	ldrlt	r3, [r1, r0]
 800c7c4:	18c0      	addlt	r0, r0, r3
 800c7c6:	4770      	bx	lr

0800c7c8 <_init>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	bf00      	nop
 800c7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ce:	bc08      	pop	{r3}
 800c7d0:	469e      	mov	lr, r3
 800c7d2:	4770      	bx	lr

0800c7d4 <_fini>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr
